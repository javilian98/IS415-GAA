---
title: "In-class Exercise 8"
author: "Javier Lian"
---

## Importing Packages

```{r}
pacman::p_load(spdep, sp, tmap, sf, ClustGeo, Cluster, factoextra, NbClust, tidyverse, GGally)
```

## Importing Data

```{r}
shan_sf <- read_rds("data/rds/shan_sf.rds")
shan_ict <- read_rds("data/rds/shan_ict.rds")
```

## Conventional Hierarchical Clustering

```{r}
proxmat <- dist(shan_ict, method = 'euclidean')
hclust_ward <- hclust(proxmat, method = 'ward.D')
groups <- as.factor(cutree(hclust_ward, k = 6))
```

### Append to the geospatial data

```{r}
shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`) %>%
  select(-c(3:4, 7:9)) %>%
  rename(TS = TS.x)
```

### The dendrogram

```{r}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, k = 6, border = 2.5)
```

### Cluster map

```{r}
qtm(shan_sf_cluster, "CLUSTER")
```

## Spatially Constrained Clustering: SKATER method

### Step 1: Computing nearest neighbours

```{r}
shan.nb <- poly2nb(shan_sf)
summary(shan.nb)
```

### Step 2: Visualising the neighbours

```{r}
plot(st_geometry(shan_sf),
     border = grey(0.5))

pts <- st_coordinates(st_centroid(shan_sf))

plot(shan.nb,
     pts,
     col="blue",
     add=TRUE)
```

### Step 3: Computing minimum spanning tree

#### Calculating edge costs

```{r}
lcosts <- nbcosts(shan.nb, shan_ict)
```

#### Incorporating these costs into a weights object

```{r}
shan.w <- nb2listw(shan.nb, lcosts, style="B")
summary(shan.w)
```

#### Computing MST

```{r}
shan.mst <- mstree(shan.w)
```

#### Visualising MST

```{r}
plot(st_geometry(shan_sf),
     border = grey(0.5))

pts <- st_coordinates(st_centroid(shan_sf))

plot.mst(shan.mst,
     pts,
     col="blue",
     cex.lab=0.7,
     cex.circles=0.005,
     add=TRUE)
```

## Computing spatially constrained clusters using SKATER method

### The code

```{r}
skater.clust6 <- skater(edges = shan.mst[,1:2],
                        data = shan_ict,
                        method = "euclidean",
                        ncuts = 5
                        )
```

### The code to plot skater tree

```{r}
plot(st_geometry(shan_sf),
     border = gray(0.5))
plot(skater.clust6,
     pts,
     cex.lab=0.7,
     groups.colors=c("red", "green", 'blue', 'brown', 'pink'),
     cex.circles=0.005,
     add=TRUE)
```

## Visualising the Choropleth map

```{r}
groups_mat <- as.matrix(skater.clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`skater_CLUSTER`=`as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "skater_CLUSTER")
```

## Spatially Constrained Clustering: ClustGeo Method

### Computing spatial distance matrix

In the code chunk below, st_distance() of sf package is used to compute the distance matrix.

```{r}
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)
```

### The code

```{r}
cr <- choicealpha(proxmat, distmat,
                  range.alpha = seq(0,1,0.1),
                  K=6, graph = TRUE)
```

### Saving clustGeo output

```{r}
clust6 <- hclustgeo(proxmat, distmat, alpha = 0.2)
groups <- as.factor(cutree(clust6, k = 6))
shan_sf_clustGeo <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`clustGeo` = `as.matrix.groups.`)
```

### Visualising the clustGeo map

```{r}
qtm(shan_sf_clustGeo, "clustGeo")
```

Characterising the clusters

```{r}
ggparcoord(data = shan_sf_clustGeo,
           columns = c(17:21),
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE,
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ clustGeo) +
  theme(axis.text.x = element_text(angle = 30))
```
