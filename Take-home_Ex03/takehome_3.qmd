---
title: "Take-home Exercise 3"
author: "Javier Lian"
---

# **Prototyping Modules for Geospatial Analytics Shiny Application**

## Overview

Prototyping is essential in the application development process, acting as a bridge between design concepts and user interactions. By creating a prototype, teams can test and evaluate UX elements with stakeholders, which helps confirm design choices. This iterative process allows for adjustments and refinements before investing further resources, leading to a more efficient and effective final product.

## Shiny Application Development Cycle

1.  **Evaluating R Packages**: The initial step in Shiny prototyping involves identifying and validating R packages from CRAN that support the app’s functionality. This ensures the application’s foundation is reliable and compatible with the required analyses and visualizations.

2.  **Testing R Code**: Prototyping also involves running and validating specific R code snippets to confirm they produce expected outputs. This testing process helps ensure a smooth experience for end-users by troubleshooting issues early.

    1.  **Setting Parameters and Outputs**: Deciding on the parameters and outputs to expose in the application is a key step. These will guide user interaction and determine the dynamic nature of the app.

3.  **Designing the UI with Shiny Components**: The final prototyping phase involves selecting Shiny UI components that allow users to interact with the chosen parameters intuitively.

This structured approach facilitates a seamless transition from conceptual design to a fully functional application, prioritizing both technical robustness and user experience.

## Understanding Basics of Shiny

**Shiny** is an open-source R package designed to simplify the creation of interactive web applications without requiring knowledge of web design languages like HTML, CSS, or JavaScript.

### Core Components of Shiny

A Shiny application typically consists of an **`app.R`** file that includes two main sections:

1.  User Interface (UI) - Defines the front-end layout and elements that users interact with.

2.  Server - Contains the back-end logic, handling input-processing and output-rendering functions.

This modular structure keeps the UI and server functions distinct, ensuring a clean, organized codebase.

### UI Layout in Shiny

The Shiny UI includes components like:

1.  **Header Panel** (`headerPanel`): Displays the app’s title or brief descriptions.

2.  **Sidebar Panel** (`sidebarPanel`): A vertical panel for input controls, offering users a way to interact with the app.

3.  **Main Panel** (`mainPanel`): The primary area for output displays (e.g., maps, plots, tables).

![](images/Group 58.png)

### Flexible Layout with FluidRow and Column

Shiny employs a grid layout system through `fluidRow()` and `column()`, based on a 12-column structure, allowing flexible UI design. Each `fluidRow` can hold multiple `column` elements, enabling a variety of layouts by adjusting column widths.

### Navbar Pages for Organized Layouts

To structure complex applications, **`navbarPage()`** is available, enabling multiple sub-components within the app, each with distinct sidebar, tabset, or layout configurations.

### UI Components for Sidebar Panel

Shiny provides various functions for defining user inputs, including:

-   **`sliderInput()`**: For range-based input using sliders.

-   **`selectInput()`**: For dropdown lists.

-   **`textInput()`**: For text entry.

-   **`numericInput()`**: For numeric values.

-   **`checkboxInput()`** & **`checkboxGroupInput()`**: For binary or multiple-choice selections.

After configuring inputs, **`submitButton()`** compiles and sends these inputs to the server, updating outputs accordingly.

### Outputs in the Main Panel

Outputs are defined in the main panel using placeholders like `textOutput()`, `tableOutput()`, and `plotOutput()`. These are rendered on the UI through corresponding functions (`renderText`, `renderTable`, `renderPlot`), and can be organized using `fluidRow()` and `column()`.

### Organizing Outputs with Tabsets

To categorize content within the main panel, `tabsetPanel()` can create a series of tabs, effectively organizing multiple outputs in the application.

### Server Component

The server function processes inputs from the UI and specifies the outputs based on these inputs. It typically includes parameters for:

-   **Input**: Accesses user-defined UI inputs.

-   **Output**: Determines how outputs are displayed in the UI.

-   **Session (optional)**: Manages session-specific settings.

The interaction between the UI and server functions as a two-way communication loop, where user inputs from the UI are processed by the server, and the corresponding outputs are displayed back in the UI.

## Importing the packages

```{r}
pacman::p_load(sf, tmap, tidyverse, ggplot2, sfdep)
```

## Importing the Datasets

```{r}
# aspatial data
farms <- read_rds("data/aspatial/farms.rds")
# geospatial data
vietnam_geo <- read_rds("data/geospatial/vietnam_geo.rds")

# left-joined farms with vietnam_geo
vietnam_farms <- read_rds("data/aspatial/vietnam_farm.rds")
```

### Setting random seed

It is always a good practice to use `set.seed()` before performing simulation. This is to ensure that the computation is reproducible.

```{r}
set.seed(111)
```

## Constants and General Helper functions

```{r}
VIETNAM_FARMS_TYPES <- c(
  "CULTIVATION" = "Cultivation farm",
  "LIVESTOCK" = "Livestock farm",
  "FISHING" = "Fishing farm",
  "OTHERS" = "Others(*)"
)

YEARS <- 2012:2023

# Helper Function
populate_col_names <- function(new_data_list_name, years, columns) {
  # Initialize an empty character vector to store the results
  data_list <- character()

  for (year in years) {
    for (col_name in columns) {

      # Construct the variable name dynamically
      var_name <- paste0(year, " ", col_name)
      data_list <- c(data_list, var_name)
    }
  }

  # Assign the populated list to the specified list name
  assign(new_data_list_name, data_list, envir = .GlobalEnv)
}

populate_col_names("VIETNAM_COL_NAMES", YEARS, VIETNAM_FARMS_TYPES)
```

## Data Wrangling

### Separating data with each row having province, year & type of farm, and geometry.

This process creates rows of data containing columns: "Cities, provincies", "year and type of farm", "geometry", such that when plotting a map, we don't have to keep selecting those 3 columns every time.
```{r}
# Helper Function
populate_data_by_col <- function(new_data_list_name, data, years, columns) {
  # Initialize an empty list to store the results
  data_list <- list()

  for (col_name in columns) {
    data_list[[col_name]] <- data[, c("Cities, provincies", col_name, "geometry")]
  }

  # Assign the populated list to the specified list name
  assign(new_data_list_name, data_list, envir = .GlobalEnv)
}

populate_data_by_col("vietnam_farms_data", vietnam_farms, YEARS, VIETNAM_COL_NAMES)
```

```{r}
vietnam_farms_data
```

## Exploratory Data Analysis (EDA)

When interacting with the Shiny app UI, I would like to provide options for user to view the data in either map mode or other plots (histograms, box plots, etc.).

```{r, fig.width=8, fig.height=16}

ggplot(vietnam_farms_data[["2012 Cultivation farm"]], aes(x = `2012 Cultivation farm`, y = reorder(`Cities, provincies`, `2012 Cultivation farm`))) +
  geom_bar(stat = "identity", width = 0.7, fill = "skyblue") +  # Adjust width to increase bar height
  geom_text(aes(label = `2012 Cultivation farm`), 
            hjust = 1.2,  # Position the text at the end of the bars
            size = 4) +  # Adjust text size if needed
  labs(title = "Total Cultivation Farms by Province (2012)",
       x = "Cultivation Farms (2012)",
       y = "Cities") +
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 12, margin = margin(t = 5, b = 5)),  # Increase font size and add margin
    plot.title = element_text(hjust = 0.5),  # Center the title
    panel.grid.major.y = element_line(size = 0.5, color = "lightgrey"),  # Optional: add grid lines for clarity
    panel.spacing = unit(5, "lines")  # Increase spacing between bars
  )
```

```{r, fig.width=6, fig.height=10}
qtm(st_as_sf(vietnam_farms), "2012 Cultivation farm")
```

## Global Measures of Spatial Autocorrelation

In this section, we will be performing spatial complete randomness test for global spatial autocorrelation.

Before we can compute the global spatial autocorrelation statistics, we'll need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. province) in the study area.

We will create a helper function compute_and_populate_queens() to compute queen for each column in the dataset. It takes in arguments:

1.  new_data_list_name: assigning a variable name to hold the list of outputs
2.  data: the input data to be used in computing the queens
3.  years: years ranging from 2012 to 2013
4.  columns: data columns

```{r}
# Helper Function
compute_and_populate_queens <- function(new_data_list_name, data, years, columns) {
  # Initialize an empty list to store the results
  data_list <- list()

  for (col_name in VIETNAM_COL_NAMES) {
    data_list[[col_name]] <- data[[col_name]] %>%
      mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)
  }

  # Assign the populated list to the specified list name
  assign(new_data_list_name, data_list, envir = .GlobalEnv)
}

compute_and_populate_queens("vietnam_farms_q", vietnam_farms_data, YEARS, VIETNAM_COL_NAMES)
```

Results of queen for every data column

```{r}
vietnam_farms_q
```

### Global Moran's I Test

Global Moran's I is a statistical test used to assess spatial autocorrelation in a data set, which means it evaluates whether the presence of a particular phenomenon (like the number of cultivation farms) in a geographic area is influenced by nearby areas

```{r}
compute_list_of_morans_i_test <- function(new_data_list_name, data, years, columns) {
  # Initialize an empty list to store the results
  data_list <- list()

  for (col_name in VIETNAM_COL_NAMES) {
    data_list[[col_name]]<- global_moran_test(data[[col_name]][[col_name]],
            vietnam_farms_q[[col_name]]$nb,
            vietnam_farms_q[[col_name]]$wt)
  }

  # Assign the populated list to the specified list name
  assign(new_data_list_name, data_list, envir = .GlobalEnv)
}

compute_list_of_morans_i_test("vietnam_farms_moran_i_test_res", vietnam_farms_q, YEARS, VIETNAM_COL_NAMES)
```

```{r}
vietnam_farms_moran_i_test_res
```

### Performing Global Moran's I Permutation Test

In practice, Monte carlo simulation should be used to perform the statistical test. For **sfdep**, it is supported by `global_moran_perm()`

```{r}
compute_list_of_morans_i_mc_test <- function(new_data_list_name, data, years, columns) {
  # Initialize an empty list to store the results
  data_list <- list()

  for (col_name in VIETNAM_COL_NAMES) {
    data_list[[col_name]]<- global_moran_perm(data[[col_name]][[col_name]],
            vietnam_farms_q[[col_name]]$nb,
            vietnam_farms_q[[col_name]]$wt,
            nsim = 999,
            zero.policy = TRUE, 
            na.action=na.omit)
  }

  # Assign the populated list to the specified list name
  assign(new_data_list_name, data_list, envir = .GlobalEnv)
}

compute_list_of_morans_i_mc_test("vietnam_farms_moran_i_mc_test_res", vietnam_farms_q, YEARS, VIETNAM_COL_NAMES)
```

```{r}
vietnam_farms_moran_i_mc_test_res
```

### Visualising Monte Carlo Moran’s I

```{r}
hist(vietnam_farms_moran_i_mc_test_res[["2012 Cultivation farm"]]$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

![](images/Group 53.png)

## Local Measures of Spatial Autocorrelation

Local Indicators of Spatial Association (LISA) help us identify clusters among different regions. In simpler terms, LISA is a statistical method that shows how much a region is affected by its neighboring areas, with higher values indicating a stronger influence from the surroundings.

### Helper Functions

### Computing local Moran’s I

```{r}
#Helper function
compute_list_of_lisa <- function(new_data_list_name, data, years, columns) {
  # Initialize an empty list to store the results
  data_list <- list()

  for (col_name in columns) {
    
    data_list[[col_name]] <- data[[col_name]] %>% 
      mutate(local_moran = local_moran(
        data[[col_name]][[col_name]], 
        vietnam_farms_q[[col_name]]$nb, 
        vietnam_farms_q[[col_name]]$wt, nsim = 99),
             .before = 1) %>%
      unnest(local_moran)
  }

  # Assign the populated list to the specified list name
  assign(new_data_list_name, data_list, envir = .GlobalEnv)
}

compute_list_of_lisa("vietnam_farms_list_lisa", vietnam_farms_q, YEARS, VIETNAM_COL_NAMES)
```

```{r}
vietnam_farms_list_lisa
```

```{r}
vietnam_farms_list_lisa["2012 Cultivation farm"][["2012 Cultivation farm"]]
```

#### Visualising Local Moran’s I

```{r fig.width=8, fig.height=12}

plot_list_of_lisa <- function(new_data_list_name, data, years, columns) {
  # Initialize an empty list to store the results
  data_list <- list()

  for (col_name in columns) {
    
    data_list[[col_name]] <- tm_shape(st_as_sf(data[[col_name]])) +
      tm_fill("ii",
              palette = c("#b7dce9","#e1ecbb","#f5f3a6",
                          "#ec9a64","#d21b1c")) +
      tm_layout(main.title = paste("Spatial Autocorrelation\n of Vietnam", col_name),
                main.title.position = "center",
                # main.title.size = 1.3,
                # main.title.fontface = "bold",
                legend.title.size = 1,
                legend.text.size = 1,
                frame = TRUE) +
      tm_borders(col = "black", alpha = 0.6) +
      tm_compass(type="8star", text.size = 1.5, size = 3, position=c("RIGHT", "TOP"))
  }

  # Assign the populated list to the specified list name
  assign(new_data_list_name, data_list, envir = .GlobalEnv)
}

plot_list_of_lisa("vietnam_farms_list_lisa_plots", vietnam_farms_list_lisa, YEARS, VIETNAM_COL_NAMES)
```

```{r fig.width=6, fig.height=10}
vietnam_farms_list_lisa_plots$`2012 Cultivation farm`
```

#### Visualising Local Moran’s I p-value

```{r}
plot_list_of_lisa_pii <- function(new_data_list_name, data, years, columns) {
  # Initialize an empty list to store the results
  data_list <- list()

  for (col_name in columns) {
    
    data_list[[col_name]] <- tm_shape(st_as_sf(data[[col_name]])) +
      tm_fill("p_ii",
              palette = c("#b7dce9","#e1ecbb","#f5f3a6",
                          "#ec9a64","#d21b1c")) +
      tm_layout(main.title = paste("Statistical Significance of Spatial Autocorrelation\n of Vietnam", col_name),
                main.title.position = "center",
                # main.title.size = 1.3,
                # main.title.fontface = "bold",
                legend.title.size = 1,
                legend.text.size = 1,
                frame = TRUE) +
      tm_borders(col = "black", alpha = 0.6) +
      tm_compass(type="8star", text.size = 1.5, size = 3, position=c("RIGHT", "TOP"))
  }

  # Assign the populated list to the specified list name
  assign(new_data_list_name, data_list, envir = .GlobalEnv)
}

plot_list_of_lisa_pii("vietnam_farms_list_lisa_pii_plots", vietnam_farms_list_lisa, YEARS, VIETNAM_COL_NAMES)
```

```{r fig.width=6, fig.height=10}
vietnam_farms_list_lisa_pii_plots$`2012 Cultivation farm`
```

#### Visualising Statistically Significant Local Spatial Autocorrelation Map

```{r, fig.width=6, fig.height=10}
plot_list_of_lisa_sig <- function(new_data_list_name, data, years, columns) {
  # Initialize an empty list to store the results
  data_list <- list()

  for (col_name in columns) {
    
    data_list[[col_name]] <- tm_shape(st_as_sf(data[[col_name]])) +
      tm_fill("p_ii",
              palette = c("#b7dce9","#e1ecbb","#f5f3a6",
                          "#ec9a64","#d21b1c")) +
      tm_layout(main.title = paste("Statistical Significance of Spatial Autocorrelation\n of Vietnam", col_name),
                main.title.position = "center",
                # main.title.size = 1.3,
                # main.title.fontface = "bold",
                legend.title.size = 1,
                legend.text.size = 1,
                frame = TRUE) +
      tm_borders(col = "black", alpha = 0.6) +
      tm_compass(type="8star", text.size = 1.5, size = 3, position=c("RIGHT", "TOP"))
  }

  # Assign the populated list to the specified list name
  assign(new_data_list_name, data_list, envir = .GlobalEnv)
}
```

![](images/Group 57.png)

### LISA Classification

The local indicator of spatial association (LISA) for each observation gives an indication of the extent of significant spatial clustering of similar values around that observation. In general, the analysis will calculate a local statistic value, a z-score, a pseudo p-value, and a code representing the cluster type for each statistically significant feature. LISA map is a categorical map showing type of outliers and clusters. There are two types of outliers namely: **High-Low** and **Low-High** outliers. Likewise, there are two type of clusters namely: **High-High** and **Low-Low** cluaters.

Specific to our study, we may infer LISA classifications as below.

-   **High-Low Outliers:** Provinces with a high number of farms, surrounded by neighbouring provinces with low number of farms.

-   **Low-High Outliers**: Provinces with a low number of farms, surrounded by neighbouring provinces with high number of farms.

-   **High-High Clusters**: Provinces with a high number of farms, surrounded by neighbouring provinces with high number of farms.

-   **Low-Low Clusters**: Provinces with a low number of farms, surrounded by neighbouring provinces with low number of farms.

```{r}

tmap_mode("plot")
plot_list_of_lisa_class <- function(new_data_list_name, data, years, columns) {
  # Initialize an empty list to store the results
  data_list <- list()

  for (col_name in columns) {
    lisa <- st_as_sf(data[[col_name]])
    lisa_sig <- lisa  %>%
      filter(p_ii_sim < 0.05)
    
    data_list[[col_name]] <- tm_shape(lisa) +
      tm_polygons() +
      tm_borders(col = "black", alpha = 0.6)+
      tm_shape(lisa_sig)+
        tm_fill("mean", 
                palette = c("#b7dce9","#ec9a64","#e1ecbb", "#d21b1c"),
                title = "LISA class",
                midpoint = NA,
                legend.hist = TRUE, 
                legend.is.portrait = TRUE,
                legend.hist.z = 0.1) +
        tm_borders(col = "black", alpha = 0.6)+
        tm_layout(main.title = paste("Province-Level LISA Map of\n ", col_name),
                  main.title.position = "center",
                  main.title.size = 1.7,
                  main.title.fontface = "bold",
                  legend.outside = TRUE,
                  legend.outside.position = "right",
                  legend.title.size = 1.8,
                  legend.text.size = 1.3,
                  frame = TRUE) +
        tm_borders(alpha = 0.5) +
        tm_compass(type="8star", text.size = 1.5, size = 2, position=c("RIGHT", "TOP")) +
        tm_scale_bar(position=c("LEFT", "BOTTOM"), text.size=1.2) +
        tm_grid(labels.size = 1,alpha =0.2)
  }

  # Assign the populated list to the specified list name
  assign(new_data_list_name, data_list, envir = .GlobalEnv)
}
```

```{r}
plot_list_of_lisa_class("vietnam_farms_list_lisa_classs_plots", vietnam_farms_list_lisa, YEARS, VIETNAM_COL_NAMES)
```

```{r, fig.width=8, fig.height=8}
vietnam_farms_list_lisa_classs_plots$`2012 Cultivation farm`
```

![](images/Group 55.png)

### Hot Spot and Cold Spot Area Analysis

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.

A hotspot is a region or value that is higher relative to its surroundings

```{r}
#| warning: false


# helper functions
compute_and_generate_wm <- function(new_data_list_name, data, years, columns) {
  # Initialize an empty list to store the results
  data_list <- list()

  for (col_name in columns) {
    data_list[[col_name]] <- data[[col_name]] %>%
      mutate(nb = include_self(st_contiguity(geometry)),
             wt = st_inverse_distance(nb, geometry,
                                       scale = 1,
                                       alpha = 1),
             .before = 1)
  }

  # Assign the populated list to the specified list name
  assign(new_data_list_name, data_list, envir = .GlobalEnv)
}

compute_and_generate_wm("vietnam_farms_wm", vietnam_farms_data, YEARS, VIETNAM_COL_NAMES)
```

Next, we will calculate local Gi∗ using `local_gstart_perm()` function from **sfdep** package. This function uses a neighbour list `nb` and a weight list `wt` as an input and generate Gi∗ statistics through a Monte Carlo permutation with specified `nsim`. The results will then be stored into a new object called `HCSA`.

```{r}
# helper functions
compute_and_generate_HCSA <- function(new_data_list_name, data, years, columns) {
  # Initialize an empty list to store the results
  data_list <- list()

  for (col_name in columns) {
    data_list[[col_name]] <- data[[col_name]] %>% 
      mutate(local_Gi_star = local_gstar_perm(data[[col_name]][[col_name]], 
                                              nb, 
                                              data[[col_name]]$wt, nsim = 99),
             .before = 1) %>%
      unnest(local_Gi_star)
  }

  # Assign the populated list to the specified list name
  assign(new_data_list_name, data_list, envir = .GlobalEnv)
}

compute_and_generate_HCSA("vietnam_farms_HCSA", vietnam_farms_wm, YEARS, VIETNAM_COL_NAMES)
```

```{r}
vietnam_farms_HCSA
```

### Visualising HCSA

Next, we will use relevant `tmap` functions to visualise the result of local Gi∗ values for our study area. For visualisation purpose, we will create a new column `label` similar to what we did in Local Moran’s I.

```{r, fig.width=8, fig.height=10}
tmap_mode("plot")  

# helper functions
plot_vietnam_farms_HCSA <- function(new_data_list_name, data, years, columns) {
  # Initialize an empty list to store the results
  data_list <- list()

  for (col_name in columns) {
    # Create the map for each column in a separate tm_shape call
    data_list[[col_name]] <- tm_shape(st_as_sf(data[[col_name]])) +
      tm_fill("gi_star", 
              palette = c("#57bfc0", "#7977f3","#f8d673","#f8b675","#f67774"),
              title = "Gi*",
              midpoint = 0) +
      tm_borders(col = "black", alpha = 0.6) +
      tm_layout(main.title = paste("Hotspots & Coldspots of\n ", col_name),
                main.title.position = "center",
                main.title.size = 1.5,
                main.title.fontface = "bold",
                legend.title.size = 1,
                legend.text.size = 1,
                frame = TRUE) +
      tm_compass(type="8star", text.size = 1.5, size = 3, position=c("RIGHT", "TOP")) +
      tm_scale_bar(position=c("LEFT", "BOTTOM"), text.size=1.2) +
      tm_grid(labels.size = 1, alpha = 0.2)
  }

  # Assign the populated list to the specified list name
  assign(new_data_list_name, data_list, envir = .GlobalEnv)
}

plot_vietnam_farms_HCSA("vietnam_farms_HCSA_plots", vietnam_farms_HCSA, YEARS, VIETNAM_COL_NAMES)
```

```{r, fig.width=6, fig.height=8}
vietnam_farms_HCSA_plots$`2012 Cultivation farm`
vietnam_farms_HCSA_plots$`2013 Cultivation farm`
vietnam_farms_HCSA_plots$`2014 Cultivation farm`
vietnam_farms_HCSA_plots$`2015 Cultivation farm`
vietnam_farms_HCSA_plots$`2016 Cultivation farm`
vietnam_farms_HCSA_plots$`2017 Cultivation farm`
vietnam_farms_HCSA_plots$`2018 Cultivation farm`
vietnam_farms_HCSA_plots$`2019 Cultivation farm`
vietnam_farms_HCSA_plots$`2020 Cultivation farm`
vietnam_farms_HCSA_plots$`2021 Cultivation farm`
vietnam_farms_HCSA_plots$`2022 Cultivation farm`
vietnam_farms_HCSA_plots$`2023 Cultivation farm`
```

![](images/Group 56.png)
