---
title: "Take-home Exercise 1"
author: "Javier Lian"
---

## Introduction

Millions of people have their lives shattered by armed conflict – wars – every year.

Armed conflict has been on the rise since about 2012, after a decline in the 1990s and early 2000s. First came conflicts in Libya, Syria and Yemen, triggered by the 2011 Arab uprisings. Libya’s instability spilled south, helping set off a protracted crisis in the Sahel region. A fresh wave of major combat followed: the 2020 Azerbaijani-Armenian war over the Nagorno-Karabakh enclave, horrific fighting in Ethiopia’s northern Tigray region that began weeks later, the conflict prompted by the Myanmar army’s 2021 power grab and Russia’s 2022 assault on Ukraine. Add to those 2023’s devastation in Sudan and Gaza. Around the globe, more people are dying in fighting, being forced from their homes or in need of life-saving aid than in decades.

## **The Data**

### **Armed conflict data**

For the purpose of this assignment, armed conflict data of Myanmar between 2021-2024 from [Armed Conflict Location & Event Data (ACLED)](https://acleddata.com/), an independent, impartial, international non-profit organization collecting data on violent conflict and protest in all countries and territories in the world, should be used.

In terms of event types, students should focus on at least four main event types, namely: Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.

In terms of study period, students should focus on quarterly armed conflict events from January 2021 until June 2024.

### **GIS Data**

-   [Geospatial data](http://geonode.themimu.info/layers/?limit=100&offset=0) on [Myanmar Information Management Unit, MIMU](http://www.themimu.info/)

## **Installing and Loading the R packages**

In this hands-on exercise, five R packages will be used, they are:

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.

-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.

-   [**raster**](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.

-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

Use the code chunk below to install and launch the five R packages.

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
```

## Importing Spatial Data File

```{r}
acled_sf <- readr::read_csv("data/aspatial/ACLED_Myanmar.csv")
```

## Importing Geospatial Data Files

```{r}
mpsz_adm1 <- st_read(
  dsn = "data/geospatial/admin1",
  layer = "mmr_polbnda_adm1_250k_mimu_1"
)

mpsz_adm2 <- st_read(
  dsn = "data/geospatial/admin2",
  layer = "mmr_polbnda_adm2_250k_mimu"
)

mpsz_adm3 <- st_read(
  dsn = "data/geospatial/admin3",
  layer = "mmr_polbnda_adm3_250k_mimu_1"
)
```

## Geospatial Data wrangling

### Inspecting columns

```{r}
colnames(acled_sf)
ncol(acled_sf)
```

### Dropping unused columns

```{r}
acled_sf <- acled_sf %>%
  select(-iso, -region, -country, -notes, -time_precision)
```

Inspecting columns again

```{r}
colnames(acled_sf)
ncol(acled_sf)
```

### Converting timezone to Yangon, Myanmar

```{r}
acled_sf$timestamp <- as_datetime(acled_sf$timestamp, tz = "Asia/Yangon")

# Extract only the time in hh:mm format (24-hour format) into a new column
acled_sf <- acled_sf %>%
  mutate(time_only = format(timestamp, "%H:%M"))

head(acled_sf$time_only, 40)
```

Now we are going to convert the longitude and latitude to CRS system of Myanmar

```{r}
acled_sf <- acled_sf %>%
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
  st_transform(crs = 32647) %>%
  mutate(
    event_date = dmy(event_date)
  )
```
