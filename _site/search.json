[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "Javier’s IS415-GAA Website\nWelcome to IS415 Geospatial Analytics and Applications. In this website, you will find my coursework and learning journey prepared for this course."
  },
  {
    "objectID": "Take-home_Ex/takehome_1.html",
    "href": "Take-home_Ex/takehome_1.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Millions of people have their lives shattered by armed conflict – wars – every year.\nArmed conflict has been on the rise since about 2012, after a decline in the 1990s and early 2000s. First came conflicts in Libya, Syria and Yemen, triggered by the 2011 Arab uprisings. Libya’s instability spilled south, helping set off a protracted crisis in the Sahel region. A fresh wave of major combat followed: the 2020 Azerbaijani-Armenian war over the Nagorno-Karabakh enclave, horrific fighting in Ethiopia’s northern Tigray region that began weeks later, the conflict prompted by the Myanmar army’s 2021 power grab and Russia’s 2022 assault on Ukraine. Add to those 2023’s devastation in Sudan and Gaza. Around the globe, more people are dying in fighting, being forced from their homes or in need of life-saving aid than in decades."
  },
  {
    "objectID": "Take-home_Ex/takehome_1.html#introduction",
    "href": "Take-home_Ex/takehome_1.html#introduction",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Millions of people have their lives shattered by armed conflict – wars – every year.\nArmed conflict has been on the rise since about 2012, after a decline in the 1990s and early 2000s. First came conflicts in Libya, Syria and Yemen, triggered by the 2011 Arab uprisings. Libya’s instability spilled south, helping set off a protracted crisis in the Sahel region. A fresh wave of major combat followed: the 2020 Azerbaijani-Armenian war over the Nagorno-Karabakh enclave, horrific fighting in Ethiopia’s northern Tigray region that began weeks later, the conflict prompted by the Myanmar army’s 2021 power grab and Russia’s 2022 assault on Ukraine. Add to those 2023’s devastation in Sudan and Gaza. Around the globe, more people are dying in fighting, being forced from their homes or in need of life-saving aid than in decades."
  },
  {
    "objectID": "Take-home_Ex/takehome_1.html#the-objectives",
    "href": "Take-home_Ex/takehome_1.html#the-objectives",
    "title": "Take-home Exercise 1",
    "section": "The Objectives",
    "text": "The Objectives\n\nGain a better insight of the safety of civilians in Myanmar by knowing which hour of the day is dangerous to be outside"
  },
  {
    "objectID": "Take-home_Ex/takehome_1.html#the-data",
    "href": "Take-home_Ex/takehome_1.html#the-data",
    "title": "Take-home Exercise 1",
    "section": "The Data",
    "text": "The Data\n\nArmed conflict data\nFor the purpose of this assignment, armed conflict data of Myanmar between 2021-2024 from Armed Conflict Location & Event Data (ACLED), an independent, impartial, international non-profit organization collecting data on violent conflict and protest in all countries and territories in the world, should be used.\nIn terms of event types, students should focus on at least four main event types, namely: Battles, Explosions/Remote Violence, Strategic developments, and Violence against civilians.\nIn terms of study period, students should focus on quarterly armed conflict events from January 2021 until June 2024.\n\n\nGIS Data\n\nGeospatial data on Myanmar Information Management Unit, MIMU"
  },
  {
    "objectID": "Take-home_Ex/takehome_1.html#installing-and-loading-the-r-packages",
    "href": "Take-home_Ex/takehome_1.html#installing-and-loading-the-r-packages",
    "title": "Take-home Exercise 1",
    "section": "Installing and Loading the R packages",
    "text": "Installing and Loading the R packages\nIn this hands-on exercise, five R packages will be used, they are:\n\nsf, a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\nsparr, provides functions to estimate fixed and adaptive kernel-smoothed spatial relative risk surfaces via the density-ratio method and perform subsequent inference. Fixed-bandwidth spatiotemporal density and relative risk estimation is also supported.\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\nUse the code chunk below to install and launch the five R packages.\n\npacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse)"
  },
  {
    "objectID": "Take-home_Ex/takehome_1.html#importing-spatial-data-file",
    "href": "Take-home_Ex/takehome_1.html#importing-spatial-data-file",
    "title": "Take-home Exercise 1",
    "section": "Importing Spatial Data File",
    "text": "Importing Spatial Data File\n\nacled &lt;- readr::read_csv(\"data/aspatial/ACLED_Myanmar.csv\")\n\nRows: 51553 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Take-home_Ex/takehome_1.html#importing-geospatial-data-files",
    "href": "Take-home_Ex/takehome_1.html#importing-geospatial-data-files",
    "title": "Take-home Exercise 1",
    "section": "Importing Geospatial Data Files",
    "text": "Importing Geospatial Data Files\n\nmpsz_adm1_sf &lt;- st_read(\n  dsn = \"data/geospatial/admin1\",\n  layer = \"mmr_polbnda_adm1_250k_mimu_1\"\n) %&gt;%\n  st_transform(crs = 32647)\n\nReading layer `mmr_polbnda_adm1_250k_mimu_1' from data source \n  `C:\\javilian98\\IS415-GAA\\Take-home_Ex\\data\\geospatial\\admin1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Take-home_Ex/takehome_1.html#constant-variables",
    "href": "Take-home_Ex/takehome_1.html#constant-variables",
    "title": "Take-home Exercise 1",
    "section": "Constant Variables",
    "text": "Constant Variables\n\n### Constants\n# Define a named vector for event types\nevent_types &lt;- c(\n  \"VIOLENCE_CIVILIANS\" = \"Violence against civilians\",\n  \"BATTLES\" = \"Battles\",\n  \"STRAT_DEVS\" = \"Strategic developments\",\n  \"EXPLOSIONS_REMOTE_VIOLENCE\" = \"Explosions/Remote violence\"\n)\n\n# List of years and quarters\nCONST_YEARS &lt;- 2021:2024\nCONST_QUARTERS &lt;- 1:4"
  },
  {
    "objectID": "Take-home_Ex/takehome_1.html#geospatial-data-wrangling",
    "href": "Take-home_Ex/takehome_1.html#geospatial-data-wrangling",
    "title": "Take-home Exercise 1",
    "section": "Geospatial Data wrangling",
    "text": "Geospatial Data wrangling\n\nInspecting columns\n\ncolnames(acled)\n\n [1] \"event_id_cnty\"      \"event_date\"         \"year\"              \n [4] \"time_precision\"     \"disorder_type\"      \"event_type\"        \n [7] \"sub_event_type\"     \"actor1\"             \"assoc_actor_1\"     \n[10] \"inter1\"             \"actor2\"             \"assoc_actor_2\"     \n[13] \"inter2\"             \"interaction\"        \"civilian_targeting\"\n[16] \"iso\"                \"region\"             \"country\"           \n[19] \"admin1\"             \"admin2\"             \"admin3\"            \n[22] \"location\"           \"latitude\"           \"longitude\"         \n[25] \"geo_precision\"      \"source\"             \"source_scale\"      \n[28] \"notes\"              \"fatalities\"         \"tags\"              \n[31] \"timestamp\"         \n\nncol(acled)\n\n[1] 31\n\n\n\n\nDropping unused columns\n\nacled &lt;- acled %&gt;%\n  select(-iso, -region, -country, -notes, -time_precision)\n\nInspecting columns again\n\ncolnames(acled)\n\n [1] \"event_id_cnty\"      \"event_date\"         \"year\"              \n [4] \"disorder_type\"      \"event_type\"         \"sub_event_type\"    \n [7] \"actor1\"             \"assoc_actor_1\"      \"inter1\"            \n[10] \"actor2\"             \"assoc_actor_2\"      \"inter2\"            \n[13] \"interaction\"        \"civilian_targeting\" \"admin1\"            \n[16] \"admin2\"             \"admin3\"             \"location\"          \n[19] \"latitude\"           \"longitude\"          \"geo_precision\"     \n[22] \"source\"             \"source_scale\"       \"fatalities\"        \n[25] \"tags\"               \"timestamp\"         \n\nncol(acled)\n\n[1] 26\n\n\n\n\nConverting timezone to Yangon, Myanmar\n\nacled$timestamp &lt;- as_datetime(acled$timestamp, tz = \"Asia/Yangon\")\n\nExtract the Hour, Minutes and Seconds into their new respective columns from the timestamp column to be used later.\n\nacled &lt;- acled %&gt;%\n  mutate(\n    Hour = hour(timestamp),\n    Minutes = minute(timestamp),\n    Seconds = second(timestamp)\n  )\n\nNow we are going to convert the longitude and latitude to CRS system of Myanmar, and extract the month number to a new Month_num column. Likewise for quarter number into Quarter_num column.\n\nacled_sf &lt;- acled %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;%\n  st_transform(crs = 32647) %&gt;%\n  mutate(\n    event_date = dmy(event_date),\n    Month_num = month(event_date),\n    Quarter_num = quarter(event_date)\n  )\n\n\n\nOrganising Data: Split data into years and quarters\nSeparate data into years 2021-2024\n\nacled_sf_2021 &lt;- acled_sf %&gt;%\n  filter(year == 2021)\n\nacled_sf_2022 &lt;- acled_sf %&gt;%\n  filter(year == 2022)\n\nacled_sf_2023 &lt;- acled_sf %&gt;%\n  filter(year == 2023)\n\nacled_sf_2024 &lt;- acled_sf %&gt;%\n  filter(year == 2024)\n\nSeparate data from each year to quarters Q1-Q4\n\nacled_sf_2021_q1 &lt;- acled_sf_2021 %&gt;%\n  filter(quarters(event_date) == \"Q1\")\nacled_sf_2021_q2 &lt;- acled_sf_2021 %&gt;%\n  filter(quarters(event_date) == \"Q2\")\nacled_sf_2021_q3 &lt;- acled_sf_2021 %&gt;%\n  filter(quarters(event_date) == \"Q3\")\nacled_sf_2021_q4 &lt;- acled_sf_2021 %&gt;%\n  filter(quarters(event_date) == \"Q4\")\n\nacled_sf_2022_q1 &lt;- acled_sf_2022 %&gt;%\n  filter(quarters(event_date) == \"Q1\")\nacled_sf_2022_q2 &lt;- acled_sf_2022 %&gt;%\n  filter(quarters(event_date) == \"Q2\")\nacled_sf_2022_q3 &lt;- acled_sf_2022 %&gt;%\n  filter(quarters(event_date) == \"Q3\")\nacled_sf_2022_q4 &lt;- acled_sf_2022 %&gt;%\n  filter(quarters(event_date) == \"Q4\")\n\nacled_sf_2023_q1 &lt;- acled_sf_2023 %&gt;%\n  filter(quarters(event_date) == \"Q1\")\nacled_sf_2023_q2 &lt;- acled_sf_2023 %&gt;%\n  filter(quarters(event_date) == \"Q2\")\nacled_sf_2023_q3 &lt;- acled_sf_2023 %&gt;%\n  filter(quarters(event_date) == \"Q3\")\nacled_sf_2023_q4 &lt;- acled_sf_2023 %&gt;%\n  filter(quarters(event_date) == \"Q4\")\n\nacled_sf_2024_q1 &lt;- acled_sf_2024 %&gt;%\n  filter(quarters(event_date) == \"Q1\")\nacled_sf_2024_q2 &lt;- acled_sf_2024 %&gt;%\n  filter(quarters(event_date) == \"Q2\")\n\n\n\nDivde data based on event types\n\nHelper function to derive data based on our types.\nGiven the nature of the task which is to study each event data per quarter of each year, there will be a lot of repetitive codes by the end of this exercise. So the benefits it provides is an organised and reusable piece of code snippet that allows you to apply to other sets of data by changing certain arguments.\n\n### Helper functions\nget_quarter_data_from_event_type &lt;- function(data, event_type_arg) {\n  # Filter the data based on the specified event_type\n  filtered_data &lt;- data %&gt;%\n    group_by(admin1) %&gt;%\n    filter(event_type == event_type_arg) %&gt;%\n    select(Quarter_num) %&gt;%\n  \n  # Return the filtered data\n  return(filtered_data)\n}\n\npopulate_quarter_data_from_event_type &lt;- function(event_type, data_list_name, years, quarters) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n  \n  # Loop over the years and quarters to populate the list\n  for (year in years) {\n    for (quarter in quarters) {\n      if (year == 2024 && quarter &gt; 2) next  # Skip quarters beyond Q2 for 2024\n      \n      # Construct the variable name dynamically\n      var_name &lt;- paste0(year, \"_q\", quarter)\n      data_var_name &lt;- paste0(\"acled_sf_\", year, \"_q\", quarter)\n      \n      # Get the event type data and store it in the list\n      event_data_list[[var_name]] &lt;- get_quarter_data_from_event_type(\n        get(data_var_name),\n        event_type\n      )\n    }\n  }\n  \n  # Assign the populated list to the specified list name\n  assign(data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\nNow with the help of the helper functions created, we are going to get all the the four event type data separated by quarters of each year.\n\nViolence Against CiviliansExplosions/Remote ViolenceStrategic DevelopmentsBattles\n\n\n\npopulate_quarter_data_from_event_type(\n  event_types[\"VIOLENCE_CIVILIANS\"], \n  \"violence_civilians_sf\",\n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\n\n\n\npopulate_quarter_data_from_event_type(\n  event_types[\"EXPLOSIONS_REMOTE_VIOLENCE\"], \n  \"explosions_remote_violence_sf\",\n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\n\n\n\npopulate_quarter_data_from_event_type(\n  event_types[\"STRAT_DEVS\"], \n  \"strat_devs_sf\",\n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\n\n\n\npopulate_quarter_data_from_event_type(\n  event_types[\"BATTLES\"], \n  \"battles_sf\",\n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\n\n\n\n\n\n\nConverting sf format into spatstat’s ppp format\nspatstat requires the analytical data in ppp object form. We will write a helper function to convert each list of data from event types to PPP format.\n\nHelper functions to converrt sf to ppp\n\nconvert_to_ppp &lt;- function(data_list_name, sf_list, years, quarters) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n  \n  # Loop over the years and quarters to populate the list\n  for (year in years) {\n    for (quarter in quarters) {\n      if (year == 2024 && quarter &gt; 2) next  # Skip quarters beyond Q2 for 2024\n      \n      # Construct the variable name dynamically\n      var_name &lt;- paste0(year, \"_q\", quarter)\n      \n      # Get the event type data and store it in the list\n      event_data_list[[var_name]] &lt;- as.ppp(sf_list[[var_name]])\n    }\n  }\n  \n  # Assign the populated list to the specified list name\n  assign(data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\n\nconvert_to_ppp(\"violence_civilians_ppp\", violence_civilians_sf, CONST_YEARS, CONST_QUARTERS)\nconvert_to_ppp(\"explosions_remote_violence_ppp\", explosions_remote_violence_sf, CONST_YEARS, CONST_QUARTERS)\nconvert_to_ppp(\"strat_devs_ppp\", strat_devs_sf, CONST_YEARS, CONST_QUARTERS)\nconvert_to_ppp(\"battles_ppp\", battles_sf, CONST_YEARS, CONST_QUARTERS)\n\nNow, let us plot and have a look at the data of Q1 2021 from the list violence_civilians_ppp.\n\nplot(violence_civilians_ppp[[\"2021_q1\"]])\n\n\n\n\n\n\n\n\n\nsummary(violence_civilians_ppp[[\"2021_q1\"]])\n\nMarked planar point pattern:  147 points\nAverage intensity 1.609184e-10 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 13 decimal places\n\nmarks are numeric, of type 'integer'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n      1       1       1       1       1       1 \n\nWindow: rectangle = [-180845.7, 456560.5] x [1375186.1, 2808348.1] units\n                    (637400 x 1433000 units)\nWindow area = 9.13506e+11 square units\n\n\nNotice the warning message about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.\n\n\n\nEvaluate duplicate points\nWe can check the duplication in a ppp object by using the code chunk below.\n\nany(duplicated(violence_civilians_ppp[[\"2021_q1\"]]))\n\n[1] TRUE\n\n\n\n\nRemoving duplicated points\nWe will use jitterirng to curb the duplicates for all the data.\n\nHelper function to remove duplicates\n\nremove_duplicates &lt;- function(data_list_name, ppp_list, years, quarters) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n  \n  # Loop over the years and quarters to populate the list\n  for (year in years) {\n    for (quarter in quarters) {\n      if (year == 2024 && quarter &gt; 2) next  # Skip quarters beyond Q2 for 2024\n      \n      # Construct the variable name dynamically\n      var_name &lt;- paste0(year, \"_q\", quarter)\n      \n      # Get the event type data and store it in the list\n      event_data_list[[var_name]] &lt;- rjitter(ppp_list[[var_name]], retry=TRUE, nsim=1, drop=TRUE)\n    }\n  }\n  \n  # Assign the populated list to the specified list name\n  assign(data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\n\nremove_duplicates(\"violence_civilians_ppp\", violence_civilians_ppp, CONST_YEARS, CONST_QUARTERS)\nremove_duplicates(\"explosions_remote_violence_ppp\", explosions_remote_violence_ppp, CONST_YEARS, CONST_QUARTERS)\nremove_duplicates(\"strat_devs_ppp\", strat_devs_ppp, CONST_YEARS, CONST_QUARTERS)\nremove_duplicates(\"battles_ppp\", battles_ppp, CONST_YEARS, CONST_QUARTERS)\n\n\n\n\nEvaluate duplicate points again\nWe have removed all the duplicates as you can see from the output below.\n\nany(duplicated(violence_civilians_ppp[[\"2021_q1\"]]))\n\n[1] FALSE\n\n\n\n\nCreating owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Mynanmar boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to convert the SpatialPolygon object into owin object of spatstat.\n\nmpsz_adm1_owin &lt;- as.owin(mpsz_adm1_sf)\nmpsz_adm1_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [-210008.6, 724647.6] x [1072026.3, 3158467.1] units\n\n\n\n\nCombining point events object and owin object\n\nHelper functions for combining ppp obj with owin obj, and plotting them.\nIn this last step of geospatial data wrangling, we will combine the owin object with the PPP list of data.\n\ncombine_ppp_with_owin &lt;- function(data_list_name, ppp_list, owin_obj, years, quarters) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n  \n  # Loop over the years and quarters to populate the list\n  for (year in years) {\n    for (quarter in quarters) {\n      if (year == 2024 && quarter &gt; 2) next  # Skip quarters beyond Q2 for 2024\n      \n      # Construct the variable name dynamically\n      var_name &lt;- paste0(year, \"_q\", quarter)\n      \n      # Get the event type data and store it in the list\n      event_data_list[[var_name]] &lt;- ppp_list[[var_name]][owin_obj]\n    }\n  }\n  \n  # Assign the populated list to the specified list name\n  assign(data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\n# Helper function to plot the list of  data\n\nhelper_func_plot_list &lt;- function(kde_list) {\n  for (name in names(kde_list)) {\n    plot(kde_list[[name]], main = name)\n  }\n}\n\n\nViolence Against CiviliansExplosions/Remote Violence\n\n\n\ncombine_ppp_with_owin(\"violence_civilians_ppp\", violence_civilians_ppp, mpsz_adm1_owin, CONST_YEARS, CONST_QUARTERS)\n\n\nhelper_func_plot_list(violence_civilians_ppp)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncombine_ppp_with_owin(\n  \"explosions_remote_violence_ppp\", \n  explosions_remote_violence_ppp, \n  mpsz_adm1_owin, \n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\n\nhelper_func_plot_list(explosions_remote_violence_ppp)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStrategic Developments\n\ncombine_ppp_with_owin(\"strat_devs_ppp\", strat_devs_ppp, mpsz_adm1_owin, CONST_YEARS, CONST_QUARTERS)\n\n\nhelper_func_plot_list(strat_devs_ppp)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBattles\n\ncombine_ppp_with_owin(\"battles_ppp\", battles_ppp, mpsz_adm1_owin, CONST_YEARS, CONST_QUARTERS)\n\n\nhelper_func_plot_list(battles_ppp)"
  },
  {
    "objectID": "Take-home_Ex/takehome_1.html#deriving-kde-layers-for-event-types",
    "href": "Take-home_Ex/takehome_1.html#deriving-kde-layers-for-event-types",
    "title": "Take-home Exercise 1",
    "section": "Deriving KDE layers for Event Types",
    "text": "Deriving KDE layers for Event Types\n\nRescaling unit measurement to km\nIn the code chunk below, the helper function is used to covert the unit of measurement from meter to kilometer.\n\nHelper function to rescale unit measurement to km\n\nrescale_to_km &lt;- function(data_list_name, ppp_list, years, quarters) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n  \n  # Loop over the years and quarters to populate the list\n  for (year in years) {\n    for (quarter in quarters) {\n      if (year == 2024 && quarter &gt; 2) next  # Skip quarters beyond Q2 for 2024\n      \n      # Construct the variable name dynamically\n      var_name &lt;- paste0(year, \"_q\", quarter)\n      \n      # Get the event type data and store it in the list\n      event_data_list[[var_name]] &lt;- rescale.ppp(ppp_list[[var_name]], 1000, \"km\")\n    }\n  }\n  \n  # Assign the populated list to the specified list name\n  assign(data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\n\nrescale_to_km(\"violence_civilians_ppp_km\", violence_civilians_ppp, CONST_YEARS, CONST_QUARTERS)\nrescale_to_km(\"explosions_remote_violence_ppp_km\", explosions_remote_violence_ppp, CONST_YEARS, CONST_QUARTERS)\nrescale_to_km(\"strat_devs_ppp_km\", strat_devs_ppp, CONST_YEARS, CONST_QUARTERS)\nrescale_to_km(\"battles_ppp_km\", battles_ppp, CONST_YEARS, CONST_QUARTERS)\n\n\n\n\nComputing KDE layers for Event Types\nHelper function for computing KDE\n\nhelper_func_process_kde &lt;- function(data_list_name, ppp_list, years, quarters, kernel_type, sigma_type) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n  \n  # Loop over the years and quarters to populate the list\n  for (year in years) {\n    for (quarter in quarters) {\n      if (year == 2024 && quarter &gt; 2) next  # Skip quarters beyond Q2 for 2024\n      \n      # Construct the variable name dynamically\n      var_name &lt;- paste0(year, \"_q\", quarter)\n      \n      # Get the event type data and store it in the list\n      event_data_list[[var_name]] = density(\n        ppp_list[[var_name]],\n        sigma = sigma_type,\n        edge = TRUE,\n        kernel = kernel_type,\n        main = paste(year, \"Q\", quarter)\n      )\n    }\n  }\n  \n  # Assign the populated list to the specified list name\n  assign(data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\n\nI have tried using automatic bandwidth selection methods however, due to the performance limitations of my computer, it took extremely long to compute every single data.\nMy alternative solution is to play around using fixed bandwidth, and the value of 10 seemed to give a decent visualisation of the plots.\n\n\nViolence Against CiviliansExplosion & Remote ViolenceStrategic DevelopmentsBattles\n\n\n\nsigma_value &lt;- 10\n\nhelper_func_process_kde(\n  \"kde_list_violence_civilians\",\n  violence_civilians_ppp_km,\n  CONST_YEARS, \n  CONST_QUARTERS, \n  \"gaussian\", \n  sigma_value\n)\n\n\n\n\nsigma_value &lt;- 10\n\nhelper_func_process_kde(\n  \"kde_list_explosions_remote_violence\",\n  explosions_remote_violence_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS,\n  \"gaussian\",\n  sigma_value\n)\n\n\n\n\nsigma_value &lt;- 10\n\nhelper_func_process_kde(\n  \"kde_list_strat_devs\",\n  strat_devs_ppp_km,\n  CONST_YEARS,\n  CONST_QUARTERS,\n  \"gaussian\",\n  sigma_value\n)\n\n\n\n\nsigma_value &lt;- 10\n\nhelper_func_process_kde(\n  \"kde_list_battles\",\n  battles_ppp_km,\n  CONST_YEARS, \n  CONST_QUARTERS, \n  \"gaussian\", \n  sigma_value\n)\n\n\n\n\n\n\nVisualising KDE Layers\nHelper function for plotting the KDE Layers\n\nhelper_func_plot_kde_list &lt;- function(kde_list, xlab = \"Distance (km)\", ylab = \"Density\") {\n  for (name in names(kde_list)) {\n    plot(kde_list[[name]], main = name, xlab = xlab, ylab = ylab)\n  }\n}\n\n\nViolence Against CiviliansExplosions/Remote ViolenceStrategic DevelopmentsBattles\n\n\n\nhelper_func_plot_kde_list(kde_list_violence_civilians)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhelper_func_plot_kde_list(kde_list_violence_civilians)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhelper_func_plot_kde_list(kde_list_strat_devs)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhelper_func_plot_kde_list(kde_list_battles)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKDE Insights\nBased on the above KDE layers, it shows that there is always a concentration in each plot of heatmap that starts of in Sagaing state of Myanmar then it radiates to other states, and Q3 of year 2023 has the highest intensity in the map."
  },
  {
    "objectID": "Take-home_Ex/takehome_1.html#nd-order-spatial-point-patterns-analysis",
    "href": "Take-home_Ex/takehome_1.html#nd-order-spatial-point-patterns-analysis",
    "title": "Take-home Exercise 1",
    "section": "2nd-order spatial point patterns analysis",
    "text": "2nd-order spatial point patterns analysis\nNext, we will conduct our 2nd-order spatial point patterns analysis. But the computation levels and requirements will increase significantly. Hence, they are more appropriate for local view such as at the state level.\nIn that case, let us find which state has the most number of occurrences in the acled_sf variable.\n\nsummary &lt;- acled_sf %&gt;%\n  group_by(admin1) %&gt;%\n  summarise(count = n()) %&gt;%\n  arrange(desc(count))\n\nsummary\n\nSimple feature collection with 18 features and 2 fields\nGeometry type: MULTIPOINT\nDimension:     XY\nBounding box:  xmin: -208804.4 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 18 × 3\n   admin1      count                                                    geometry\n   &lt;chr&gt;       &lt;int&gt;                                            &lt;MULTIPOINT [m]&gt;\n 1 Sagaing     14043 ((-16397.05 2576482), (-13816.45 2549666), (-13808.2 25332…\n 2 Mandalay     5047 ((68129.21 2320839), (69197.66 2321843), (69550.81 2329036…\n 3 Magway       4585 ((-14448.48 2310133), (-11811.97 2503484), (-11778.42 2331…\n 4 Yangon       3893 ((148595 1924891), (149693.3 1924406), (161280.2 1841113),…\n 5 Shan-North   3435 ((217854 2555977), (229100.8 2553686), (237609.2 2472369),…\n 6 Kachin       3198 ((195339.5 2804590), (203637.2 2823909), (208746.8 2822422…\n 7 Tanintharyi  2850 ((383968.4 1610809), (384739.6 1614423), (389620.5 1590573…\n 8 Rakhine      2343 ((-208804.4 2357274), (-207135 2358896), (-206931.7 235949…\n 9 Kayin        1992 ((233276 2137205), (235185 2133257), (236637.1 2129658), (…\n10 Mon          1878 ((274988.3 1941700), (275098 1944865), (275324.9 1930892),…\n11 Chin         1742 ((-156265.4 2407840), (-152350.3 2435531), (-151082.3 2423…\n12 Shan-South   1534 ((221551.2 2321401), (229883.3 2328254), (231506.5 2346187…\n13 Bago-East    1400 ((196713.9 2122389), (204976.2 2126874), (207611 2124472),…\n14 Kayah        1398 ((279858.3 2139472), (283918.5 2160815), (285121.8 2165750…\n15 Ayeyarwady   1062 ((-1808.855 1832416), (1429.168 1776303), (1438.857 183487…\n16 Bago-West     718 ((78145.15 2073712), (79398.46 2070678), (81116.12 2070440…\n17 Nay Pyi Taw   340 ((168739.4 2244682), (180557.3 2184994), (180562.1 2184673…\n18 Shan-East      95 ((489266.8 2244252), (502198.1 2360984), (526697.7 2270740…\n\n\nBased on the summary data above, Sagaing has the most number of counts in the entire acled_sf data. So let us filter down the data to related to Sagaing.\nHelper functions Filter by state\n\nCOUNTRY_STATE &lt;- \"Sagaing\"\n\nget_quarter_data_by_state &lt;- function(data, state_arg, event_type_arg) {\n  # Filter the data based on the specified event_type\n  filtered_data &lt;- data %&gt;%\n    group_by(admin1) %&gt;%\n    filter(\n      (admin1 == state_arg) &\n      (event_type == event_type_arg)\n    ) %&gt;%\n    select(Quarter_num)\n  \n  # Return the filtered data\n  return(filtered_data)\n}\n\npopulate_quarter_data_by_state &lt;- function(event_type, data_list_name, years, quarters, country_state) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n  \n  # Loop over the years and quarters to populate the list\n  for (year in years) {\n    for (quarter in quarters) {\n      if (year == 2024 && quarter &gt; 2) next  # Skip quarters beyond Q2 for 2024\n      \n      # Construct the variable name dynamically\n      var_name &lt;- paste0(year, \"_q\", quarter)\n      data_var_name &lt;- paste0(\"acled_sf_\", year, \"_q\", quarter)\n      \n      # Get the event type data and store it in the list\n      event_data_list[[var_name]] &lt;- get_quarter_data_by_state(\n        get(data_var_name),\n        country_state,\n        event_type\n      )\n    }\n  }\n  \n  # Assign the populated list to the specified list name\n  assign(data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\nNow let us generate a list of data for each event types in Sagaing.\n\nViolence Against CiviliansExplosions/Remote ViolenceStrategic DevelopmentsBattles\n\n\n\npopulate_quarter_data_by_state(\n  event_types[\"VIOLENCE_CIVILIANS\"], \n  \"violence_civilians_state_sf\",\n  CONST_YEARS, \n  CONST_QUARTERS, \n  COUNTRY_STATE\n)\n\n\n\n\npopulate_quarter_data_by_state(\n  event_types[\"EXPLOSIONS_REMOTE_VIOLENCE\"], \n  \"explosions_remote_violence_state_sf\",\n  CONST_YEARS, \n  CONST_QUARTERS, \n  COUNTRY_STATE\n)\n\n\n\n\npopulate_quarter_data_by_state(\n  event_types[\"STRAT_DEVS\"], \n  \"strat_devs_state_sf\",\n  CONST_YEARS, \n  CONST_QUARTERS, \n  COUNTRY_STATE\n)\n\n\n\n\npopulate_quarter_data_by_state(\n  event_types[\"BATTLES\"], \n  \"battles_state_sf\",\n  CONST_YEARS, \n  CONST_QUARTERS, \n  COUNTRY_STATE\n)\n\n\n\n\n\nConvert to PPP from sf\nBefore we can perform our 2nd Order spacial point patterns analysis, we’ll need to convert our sf data of Sagaing into ppp format.\n\nconvert_to_ppp(\"violence_civilians_state_ppp\", violence_civilians_state_sf, CONST_YEARS, CONST_QUARTERS)\nconvert_to_ppp(\"explosions_remote_violence_state_ppp\", explosions_remote_violence_state_sf, CONST_YEARS, CONST_QUARTERS)\nconvert_to_ppp(\"strat_devs_state_ppp\", strat_devs_state_sf, CONST_YEARS, CONST_QUARTERS)\nconvert_to_ppp(\"battles_state_ppp\", battles_state_sf, CONST_YEARS, CONST_QUARTERS)\n\n\nclass(violence_civilians_state_ppp[[\"2021_q1\"]])\n\n[1] \"ppp\"\n\n\n\n\nRemoving duplicated ppp points\nWe also need to remove any possible duplicates in the list of data.\n\nany(duplicated(violence_civilians_state_ppp[[\"2021_q1\"]]))\n\n[1] TRUE\n\nany(duplicated(violence_civilians_state_ppp[[\"2021_q2\"]]))\n\n[1] TRUE\n\nany(duplicated(violence_civilians_state_ppp[[\"2021_q3\"]]))\n\n[1] TRUE\n\nany(duplicated(violence_civilians_state_ppp[[\"2021_q4\"]]))\n\n[1] TRUE\n\nany(duplicated(violence_civilians_state_ppp[[\"2022_q1\"]]))\n\n[1] TRUE\n\nany(duplicated(violence_civilians_state_ppp[[\"2022_q2\"]]))\n\n[1] TRUE\n\nany(duplicated(violence_civilians_state_ppp[[\"2022_q3\"]]))\n\n[1] TRUE\n\nany(duplicated(violence_civilians_state_ppp[[\"2022_q4\"]]))\n\n[1] TRUE\n\nany(duplicated(violence_civilians_state_ppp[[\"2023_q1\"]]))\n\n[1] TRUE\n\nany(duplicated(violence_civilians_state_ppp[[\"2023_q2\"]]))\n\n[1] TRUE\n\nany(duplicated(violence_civilians_state_ppp[[\"2023_q3\"]]))\n\n[1] TRUE\n\nany(duplicated(violence_civilians_state_ppp[[\"2023_q4\"]]))\n\n[1] TRUE\n\nany(duplicated(violence_civilians_state_ppp[[\"2024_q1\"]]))\n\n[1] TRUE\n\nany(duplicated(violence_civilians_state_ppp[[\"2024_q2\"]]))\n\n[1] TRUE\n\n\n\nremove_duplicates(\"violence_civilians_state_ppp\", violence_civilians_ppp, CONST_YEARS, CONST_QUARTERS)\nremove_duplicates(\"explosions_remote_violence_state_ppp\", explosions_remote_violence_ppp, CONST_YEARS, CONST_QUARTERS)\nremove_duplicates(\"strat_devs_state_ppp\", strat_devs_ppp, CONST_YEARS, CONST_QUARTERS)\nremove_duplicates(\"battles_state_ppp\", battles_ppp, CONST_YEARS, CONST_QUARTERS)\n\nNow we also need to make sure of unit of measurement is in kilometres too.\n\nrescale_to_km(\"violence_civilians_state_ppp_km\", violence_civilians_state_ppp, CONST_YEARS, CONST_QUARTERS)\nrescale_to_km(\"explosions_remote_violence_state_ppp_km\", explosions_remote_violence_state_ppp, CONST_YEARS, CONST_QUARTERS)\nrescale_to_km(\"strat_devs_state_ppp_km\", strat_devs_state_ppp, CONST_YEARS, CONST_QUARTERS)\nrescale_to_km(\"battles_state_ppp_km\", battles_state_ppp, CONST_YEARS, CONST_QUARTERS)\n\n\nviolence_civilians_state_ppp_km[[\"2021_q1\"]]\n\nMarked planar point pattern: 137 points\nmarks are numeric, of storage type  'integer'\nwindow: polygonal boundary\nenclosing rectangle: [-210.0086, 724.6476] x [1072.0263, 3158.4671] km\n\n\n\n\nAnalysing Spatial Point Process Using F function\nThe F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.\nWe will compute F-function estimation by using Fest() of spatstat package, and also perform monte carlo simulation test using envelope() of spatstat package.\n\nHelper functions\n\ncompute_2nd_order_spa &lt;- function(Fest, data_list_name, ppp_list, years, quarters) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n  \n  # Loop over the years and quarters to populate the list\n  for (year in years) {\n    for (quarter in quarters) {\n      if (year == 2024 && quarter &gt; 2) next  # Skip quarters beyond Q2 for 2024\n      \n      # Construct the variable name dynamically\n      var_name &lt;- paste0(year, \"_q\", quarter)\n      \n      # Get the event type data and store it in the list\n      event_data_list[[var_name]] = Fest(ppp_list[[var_name]])\n    }\n  }\n  \n  # Assign the populated list to the specified list name\n  assign(data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\nenvelope_2nd_order_spa &lt;- function(Fest, data_list_name, ppp_list, years, quarters) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n  \n  # Loop over the years and quarters to populate the list\n  for (year in years) {\n    for (quarter in quarters) {\n      if (year == 2024 && quarter &gt; 2) next  # Skip quarters beyond Q2 for 2024\n      \n      # Construct the variable name dynamically\n      var_name &lt;- paste0(year, \"_q\", quarter)\n      \n      # Get the event type data and store it in the list\n      event_data_list[[var_name]] &lt;- envelope(ppp_list[[var_name]], Fest, nsim = 40)\n    }\n  }\n  \n  # Assign the populated list to the specified list name\n  assign(data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\n\nViolence Against CiviliansExplosions/Remote ViolenceStrategic DevelopmentsBattles\n\n\n\ncompute_2nd_order_spa(\n  Fest, \n  \"F_violence_civilians_state_ppp_km\", \n  violence_civilians_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\nenvelope_2nd_order_spa(\n  Fest, \n  \"F_violence_civilians_state_ppp_km_csr\", \n  violence_civilians_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\n\n\n\n\n\ncompute_2nd_order_spa(\n  Fest, \n  \"F_explosions_remote_violence_state_ppp_km\", \n  explosions_remote_violence_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\nenvelope_2nd_order_spa(\n  Fest, \n  \"F_explosions_remote_violence_state_ppp_km_csr\", \n  explosions_remote_violence_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\n\n\n\n\n\ncompute_2nd_order_spa(\n  Fest, \n  \"F_strat_devs_state_ppp_km\", \n  strat_devs_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\nenvelope_2nd_order_spa(\n  Fest, \n  \"F_strat_devs_state_ppp_km_csr\", \n  strat_devs_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3,\n [3:16 remaining] 4,  [3:08 remaining] 5,  [3:04 remaining] 6,\n [3:05 remaining] 7,  [2:43 remaining] 8,  [2:26 remaining] 9,\n [2:13 remaining] 10,  [2:02 remaining] 11,  [1:53 remaining] 12,\n [1:45 remaining] 13,  [1:38 remaining] 14,  [1:31 remaining] 15,\n [1:26 remaining] 16,  [1:20 remaining] 17,  [1:15 remaining] 18,\n [1:11 remaining] 19,  [1:10 remaining] 20,  [1:09 remaining] 21,\n [1:07 remaining] 22,  [1:05 remaining] 23,  [1:03 remaining] 24,\n [1:01 remaining] 25,  [1:00 remaining] 26,  [56 sec remaining] 27,\n [53 sec remaining] 28,  [50 sec remaining] 29,  [46 sec remaining] 30,\n [43 sec remaining] 31,  [39 sec remaining] 32,  [35 sec remaining] 33,\n [30 sec remaining] 34,  [25 sec remaining] 35,  [21 sec remaining] 36,\n [16 sec remaining] 37,  [12 sec remaining] 38,  [8 sec remaining] 39,\n [4 sec remaining] \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\n\n\n\n\n\ncompute_2nd_order_spa(\n  Fest, \n  \"F_battles_state_ppp_km\", \n  battles_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\nenvelope_2nd_order_spa(\n  Fest, \n  \"F_battles_state_ppp_km_csr\", \n  battles_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n )\n\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\n\n\n\n\n\n\n\n\nPlotting the data\nHelper function to plot the list of CSR data\n\nhelper_func_plot_csr_list &lt;- function(kde_list) {\n  for (name in names(kde_list)) {\n    plot(kde_list[[name]], main = name)\n  }\n}\n\n\nViolence Against CiviliansExplosions/Remote ViolenceStrategic DevelopmentsBattles\n\n\n\nhelper_func_plot_csr_list(F_violence_civilians_state_ppp_km_csr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhelper_func_plot_csr_list(F_explosions_remote_violence_state_ppp_km_csr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhelper_func_plot_csr_list(F_strat_devs_state_ppp_km_csr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhelper_func_plot_csr_list(F_battles_state_ppp_km_csr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nG Function\nThe G function measures the distribution of the distances from an arbitrary event to its nearest event.\nWe will compute G-function estimation by using Gest() of spatstat package and perform monte carlo simulation test using envelope() of spatstat package.\n\nViolence Against CiviliansExplosions/Remote ViolenceStrategic DevelopmentsBattles\n\n\n\ncompute_2nd_order_spa(\n  Gest, \n  \"G_violence_civilians_state_ppp_km\", \n  violence_civilians_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\nenvelope_2nd_order_spa(\n  Gest, \n  \"G_violence_civilians_state_ppp_km_csr\", \n  violence_civilians_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4,  [3:15 remaining] 5,  [2:56 remaining] 6,\n [2:37 remaining] 7,  [2:24 remaining] 8,  [2:13 remaining] 9,\n [2:04 remaining] 10,  [1:58 remaining] 11,  [1:51 remaining] 12,\n [1:45 remaining] 13,  [1:44 remaining] 14,  [1:40 remaining] 15,\n [1:34 remaining] 16,  [1:29 remaining] 17,  [1:25 remaining] 18,\n [1:20 remaining] 19,  [1:16 remaining] 20,  [1:12 remaining] 21,\n [1:08 remaining] 22,  [1:05 remaining] 23,  [1:03 remaining] 24,\n [59 sec remaining] 25,  [55 sec remaining] 26,  [51 sec remaining] 27,\n [47 sec remaining] 28,  [43 sec remaining] 29,  [40 sec remaining] 30,\n [36 sec remaining] 31,  [32 sec remaining] 32,  [29 sec remaining] 33,\n [25 sec remaining] 34,  [22 sec remaining] 35,  [18 sec remaining] 36,\n [14 sec remaining] 37,  [11 sec remaining] 38,  [7 sec remaining] 39,\n [4 sec remaining] \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\n\n\n\n\n\ncompute_2nd_order_spa(\n  Gest, \n  \"G_explosions_remote_violence_state_ppp_km\", \n  explosions_remote_violence_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\nenvelope_2nd_order_spa(\n  Gest, \n  \"G_explosions_remote_violence_state_ppp_km_csr\", \n  explosions_remote_violence_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\n\n\n\n\n\ncompute_2nd_order_spa(\n  Gest, \n  \"G_strat_devs_state_ppp_km\", \n  strat_devs_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\nenvelope_2nd_order_spa(\n  Gest, \n  \"G_strat_devs_state_ppp_km_csr\", \n  strat_devs_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3,\n [3:20 remaining] 4,  [2:59 remaining] 5,  [2:50 remaining] 6,\n [2:37 remaining] 7,  [2:29 remaining] 8,  [2:25 remaining] 9,\n [2:19 remaining] 10,  [2:17 remaining] 11,  [2:14 remaining] 12,\n [2:10 remaining] 13,  [2:04 remaining] 14,  [1:59 remaining] 15,\n [1:54 remaining] 16,  [1:48 remaining] 17,  [1:43 remaining] 18,\n [1:38 remaining] 19,  [1:34 remaining] 20,  [1:29 remaining] 21,\n [1:25 remaining] 22,  [1:20 remaining] 23,  [1:16 remaining] 24,\n [1:12 remaining] 25,  [1:07 remaining] 26,  [1:02 remaining] 27,\n [58 sec remaining] 28,  [53 sec remaining] 29,  [49 sec remaining] 30,\n [44 sec remaining] 31,  [40 sec remaining] 32,  [35 sec remaining] 33,\n [31 sec remaining] 34,  [26 sec remaining] 35,  [22 sec remaining] 36,\n [18 sec remaining] 37,  [13 sec remaining] 38,  [9 sec remaining] 39,\n [4 sec remaining] \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\n\n\n\n\n\ncompute_2nd_order_spa(\n  Gest, \n  \"G_battles_state_ppp_km\", \n  battles_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n)\n\nenvelope_2nd_order_spa(\n  Gest, \n  \"G_battles_state_ppp_km_csr\", \n  battles_state_ppp_km, \n  CONST_YEARS, \n  CONST_QUARTERS\n )\n\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2,  [3:21 remaining] 3,\n [3:14 remaining] 4,  [3:09 remaining] 5,  [3:03 remaining] 6,\n [3:03 remaining] 7,  [2:56 remaining] 8,  [2:50 remaining] 9,\n [2:44 remaining] 10,  [2:40 remaining] 11,  [2:33 remaining] 12,\n [2:25 remaining] 13,  [2:19 remaining] 14,  [2:12 remaining] 15,\n [2:06 remaining] 16,  [1:59 remaining] 17,  [1:54 remaining] 18,\n [1:48 remaining] 19,  [1:42 remaining] 20,  [1:37 remaining] 21,\n [1:32 remaining] 22,  [1:28 remaining] 23,  [1:23 remaining] 24,\n [1:18 remaining] 25,  [1:13 remaining] 26,  [1:08 remaining] 27,\n [1:03 remaining] 28,  [58 sec remaining] 29,  [53 sec remaining] 30,\n [48 sec remaining] 31,  [43 sec remaining] 32,  [39 sec remaining] 33,\n [34 sec remaining] 34,  [30 sec remaining] 35,  [25 sec remaining] 36,\n [19 sec remaining] 37,  [15 sec remaining] 38,  [10 sec remaining] 39,\n [5 sec remaining] \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\nGenerating 40 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, \n40.\n\nDone.\n\n\n\n\n\n\nViolence Against CiviliansExplosions/Remote ViolenceStrategic DevelopmentsBattles\n\n\n\nhelper_func_plot_csr_list(G_violence_civilians_state_ppp_km_csr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhelper_func_plot_csr_list(G_explosions_remote_violence_state_ppp_km_csr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhelper_func_plot_csr_list(G_strat_devs_state_ppp_km_csr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhelper_func_plot_csr_list(G_battles_state_ppp_km_csr)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2nd-Order Spacial Point Patterns Analysis Insights\nBased on the above plots of F and G functions, there is a clustering of points in the dataset. This means that the points are closer to each other that what would be expected under a random distribution.\n\n\nSpatio-temporal KDE layers for Event Types\nA spatio-temporal point process (also called space-time or spatial-temporal point process) is a random collection of points, where each point represents the time and location of an event. Examples of events include incidence of disease, sightings or births of a species, or the occurrences of fires, earthquakes, lightning strikes, tsunamis, or volcanic eruptions.\nThe analysis of spatio-temporal point patterns is becoming increasingly necessary, given the rapid emergence of geographically and temporally indexed data in a wide range of fields. Several spatio-temporal point patterns analysis methods have been introduced and implemented in R in the last ten years.\n\nHelper function for computing spatial-temporal KDE\n\nplot_stkde &lt;- function(acled_sf, year_arg, event_type_arg, mpsz_adm1_owin, plot_title_arg) {\n  # Filter and prepare the data\n  event_type_quarters_combined &lt;- acled_sf %&gt;% \n    filter(year == year_arg & event_type == event_type_arg) %&gt;%\n    select(Quarter_num) %&gt;%\n    as.ppp()\n  \n  # Create a point pattern and apply jitter\n  event_type_quarters_combined_ppp &lt;- rjitter(as.ppp(event_type_quarters_combined), retry=TRUE, nsim=1, drop=TRUE)\n  \n  # Mask the point pattern with the window\n  event_type_quarters_combined_ppp_owin &lt;- event_type_quarters_combined_ppp[mpsz_adm1_owin]\n  \n  # Calculate the space-time kernel density estimate\n  stkde_event_type_data &lt;- spattemp.density(event_type_quarters_combined_ppp_owin)\n  \n  # Print summary\n  print(summary(stkde_event_type_data))\n  \n  # Plot the results\n  par(mfcol=c(2, 3))\n  tims &lt;- c(1, 2, 3, 4)\n  for (i in tims) { \n    if (year_arg == 2024 && i &gt; 2) next\n    plot(stkde_event_type_data, i, \n         override.par=FALSE, \n         fix.range=TRUE, \n         main=paste(plot_title_arg, year_arg, \"Q\", i))\n  }\n}\n\n\nViolence Against CiviliansViolence Against Civilians in Year 2021Violence Against Civilians in Year 2022Violence Against Civilians in Year 2023Violence Against Civilians in Year 2024Explosion & Remote ViolenceStrategic DevelopmentsBattles\n\n\n\n\n\n\nplot_stkde(\n  acled_sf_2021, \n  2021, \n  event_types[\"VIOLENCE_CIVILIANS\"], \n  mpsz_adm1_owin, \n  \"STKDE on Violence Against Civilians in\"\n)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 68653.17 (spatial)\n  lambda = 0.0052 (temporal)\n\nNo. of observations\n  1863 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [2.201336e-17, 4.548589e-10]\nNULL\n\n\n\n\n\n\n\n\n\n\n\n\nplot_stkde(acled_sf_2022, 2022, event_types[\"VIOLENCE_CIVILIANS\"], mpsz_adm1_owin, \"STKDE on Violence Against Civilians in\")\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 73915.22 (spatial)\n  lambda = 0.0039 (temporal)\n\nNo. of observations\n  2009 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [3.388548e-15, 3.76366e-10]\nNULL\n\n\n\n\n\n\n\n\n\n\n\n\nplot_stkde(acled_sf_2023, 2023, event_types[\"VIOLENCE_CIVILIANS\"], mpsz_adm1_owin, \"STKDE on Violence Against Civilians in\")\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 66199.04 (spatial)\n  lambda = 0.0085 (temporal)\n\nNo. of observations\n  1646 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [9.447994e-18, 2.472184e-10]\nNULL\n\n\n\n\n\n\n\n\n\n\n\n\nplot_stkde(acled_sf_2024, 2024, event_types[\"VIOLENCE_CIVILIANS\"], mpsz_adm1_owin, \"STKDE on Violence Against Civilians in\")\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 85036.53 (spatial)\n  lambda = 0.0042 (temporal)\n\nNo. of observations\n  631 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 2]\n\nEvaluation\n  128 x 128 x 2 trivariate lattice\n  Density range: [6.885204e-14, 5.588596e-10]\nNULL\n\n\n\n\n\n\n\n\n\n\n\nExplosion and Remove Violence in Year 2021\n\nplot_stkde(acled_sf_2021, 2021, event_types[\"EXPLOSIONS_REMOTE_VIOLENCE\"], mpsz_adm1_owin, \"STKDE on Explosion & Remote Violence in\")\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 64492.56 (spatial)\n  lambda = 0.0033 (temporal)\n\nNo. of observations\n  2675 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [1.232502e-34, 1.148083e-09]\nNULL\n\n\n\n\n\n\n\n\n\nExplosion & Remote Violence in Year 2022\n\nplot_stkde(acled_sf_2022, 2022, event_types[\"EXPLOSIONS_REMOTE_VIOLENCE\"], mpsz_adm1_owin, \"STKDE on Explosion & Remote Violence in\")\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 63373.76 (spatial)\n  lambda = 0.0047 (temporal)\n\nNo. of observations\n  3668 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [4.611696e-19, 4.201904e-10]\nNULL\n\n\n\n\n\n\n\n\n\nExplosion and Remove Violence in Year 2023\n\nplot_stkde(acled_sf_2023, 2023, event_types[\"EXPLOSIONS_REMOTE_VIOLENCE\"], mpsz_adm1_owin, \"STKDE on Explosion & Remote Violence in\")\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 65917.67 (spatial)\n  lambda = 0.0048 (temporal)\n\nNo. of observations\n  3653 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [1.198038e-17, 3.967316e-10]\nNULL\n\n\n\n\n\n\n\n\n\nExplosion and Remove Violence in Year 2024\n\nplot_stkde(acled_sf_2024, 2024, event_types[\"EXPLOSIONS_REMOTE_VIOLENCE\"], mpsz_adm1_owin, \"STKDE on Explosion & Remote Violence in\")\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 75483.47 (spatial)\n  lambda = 0.0018 (temporal)\n\nNo. of observations\n  2072 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 2]\n\nEvaluation\n  128 x 128 x 2 trivariate lattice\n  Density range: [2.097493e-15, 1.970739e-09]\nNULL\n\n\n\n\n\n\n\n\n\n\n\nStrategic Developments in Year 2021\n\nplot_stkde(acled_sf_2021, 2021, event_types[\"STRAT_DEVS\"], mpsz_adm1_owin, \"STKDE on Strategic Developments in\")\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 63831.01 (spatial)\n  lambda = 0.0037 (temporal)\n\nNo. of observations\n  3381 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [6.909365e-15, 5.347878e-10]\nNULL\n\n\n\n\n\n\n\n\n\nStrategic Developments in Year 2022\n\nplot_stkde(acled_sf_2022, 2022, event_types[\"STRAT_DEVS\"], mpsz_adm1_owin, \"STKDE on Strategic Developments in\")\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 55149.53 (spatial)\n  lambda = 0.0022 (temporal)\n\nNo. of observations\n  4312 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [1.203656e-18, 9.088899e-10]\nNULL\n\n\n\n\n\n\n\n\n\nStrategic Developments in Year 2023\n\nplot_stkde(acled_sf_2023, 2023, event_types[\"STRAT_DEVS\"], mpsz_adm1_owin, \"STKDE on Strategic Developments in\")\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 61941.92 (spatial)\n  lambda = 0.0054 (temporal)\n\nNo. of observations\n  3115 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [1.585971e-18, 5.045853e-10]\nNULL\n\n\n\n\n\n\n\n\n\nStrategic Developments in Year 2024\n\nplot_stkde(acled_sf_2024, 2024, event_types[\"STRAT_DEVS\"], mpsz_adm1_owin, \"STKDE on Strategic Developments in\")\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 72805.04 (spatial)\n  lambda = 0.0026 (temporal)\n\nNo. of observations\n  1145 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 2]\n\nEvaluation\n  128 x 128 x 2 trivariate lattice\n  Density range: [3.368086e-14, 1.294003e-09]\nNULL\n\n\n\n\n\n\n\n\n\n\n\nBattles in Year 2021\n\nplot_stkde(acled_sf_2021, 2021, event_types[\"BATTLES\"], mpsz_adm1_owin, \"STKDE on Battles in\")\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 69194.75 (spatial)\n  lambda = 0.0047 (temporal)\n\nNo. of observations\n  2193 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [9.43846e-21, 4.51969e-10]\nNULL\n\n\n\n\n\n\n\n\n\nBattles in Year 2022\n\nplot_stkde(acled_sf_2022, 2022, event_types[\"BATTLES\"], mpsz_adm1_owin, \"STKDE on Battles in\")\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 64303.87 (spatial)\n  lambda = 0.0043 (temporal)\n\nNo. of observations\n  3787 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [2.630951e-17, 3.435047e-10]\nNULL\n\n\n\n\n\n\n\n\n\nBattles in Year 2023\n\nplot_stkde(acled_sf_2023, 2023, event_types[\"BATTLES\"], mpsz_adm1_owin, \"STKDE on Battles in\")\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 67073.04 (spatial)\n  lambda = 0.0042 (temporal)\n\nNo. of observations\n  3944 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 4]\n\nEvaluation\n  128 x 128 x 4 trivariate lattice\n  Density range: [6.109086e-17, 5.752058e-10]\nNULL\n\n\n\n\n\n\n\n\n\nBattles in Year 2024\n\nplot_stkde(acled_sf_2024, 2024, event_types[\"BATTLES\"], mpsz_adm1_owin, \"STKDE on Battles in\")\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 78864.27 (spatial)\n  lambda = 0.0019 (temporal)\n\nNo. of observations\n  1966 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 2]\n\nEvaluation\n  128 x 128 x 2 trivariate lattice\n  Density range: [2.097587e-15, 1.722009e-09]\nNULL"
  },
  {
    "objectID": "Take-home_Ex/takehome_1.html#conclusions",
    "href": "Take-home_Ex/takehome_1.html#conclusions",
    "title": "Take-home Exercise 1",
    "section": "Conclusions",
    "text": "Conclusions\nThe ACLED Myanmar dataset definitely holds some interesting insights on how the intensity of each event spreads across to various regions of the country, indicating which state has the most active conflicts going on while allowing us to know which part of Myanmar travelers should steer clear of for their safety."
  },
  {
    "objectID": "Take-home_Ex/takehome_1.html#personal-learnings",
    "href": "Take-home_Ex/takehome_1.html#personal-learnings",
    "title": "Take-home Exercise 1",
    "section": "Personal Learnings",
    "text": "Personal Learnings\nI would have to admit that this exercise has been really challenging and could also be very time-consuming as well due to the speed performance limitations of my computer. Despite all of that, it has also challenged me to find ways to handle an extremely large data set for the first time, making sure that I should plan ahead on what I want to analyse first before writing the code for it.\n\nI believe that the remaining take-home exercises would be more manageable after rigorous and technical experience gained from this take-home exercise."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute Global Measures of Spatial Autocorrelation (GMSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#overview",
    "title": "Hands-on Exercise 6",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute Global Measures of Spatial Autocorrelation (GMSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#getting-started",
    "title": "Hands-on Exercise 6",
    "section": "Getting Started",
    "text": "Getting Started\n\n9.2.1 The analytical question\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.\n\n\n9.2.2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n9.2.3 Setting the Analytical Tools\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 6",
    "section": "Getting the Data Into R Environment",
    "text": "Getting the Data Into R Environment\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\nImport shapefile into r environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\javilian98\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImport csv file into r environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\n\nVisualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#global-measures-of-spatial-autocorrelation",
    "href": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#global-measures-of-spatial-autocorrelation",
    "title": "Hands-on Exercise 6",
    "section": "Global Measures of Spatial Autocorrelation",
    "text": "Global Measures of Spatial Autocorrelation\nIn this section, you will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\nComputing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\nRow-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\nWhat can we learn from the code chunk above?\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#global-measures-of-spatial-autocorrelation-morans-i",
    "href": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#global-measures-of-spatial-autocorrelation-morans-i",
    "title": "Hands-on Exercise 6",
    "section": "Global Measures of Spatial Autocorrelation: Moran’s I",
    "text": "Global Measures of Spatial Autocorrelation: Moran’s I\nIn this section, you will learn how to perform Moran’s I statistics testing by using moran.test() of spdep.\n\nMaron’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\nQuestion: What statistical conclusion can you draw from the output above?\n\n\nAnswer: There is a high standard deviation and a very low p-value, meaning that there is a significant positive spatial correlation from the above.\n\n\n\nComputing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nQuestion: What statistical conclustion can you draw from the output above?\n\n\n\nVisualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\n\nQuestion: What statistical observation can you draw from the output above?\n\n\nChallenge: Instead of using Base Graph to plot the values, plot the values by using ggplot2 package.\n\n\n# Convert the results to a data frame for ggplot\nbperm_df &lt;- data.frame(Simulated_Morans_I = bperm$res[1:999])\n\n# Create the histogram using ggplot2  \nggplot(bperm_df, aes(x = Simulated_Morans_I)) +\n  geom_histogram(bins = 20, fill = \"blue\", color = \"black\") +\n  geom_vline(xintercept = 0, color = \"red\", linetype = \"dashed\", size = 1) +\n  labs(title = \"Histogram of Simulated Moran's I\",\n       x = \"Simulated Moran's I\",\n       y = \"Frequency\") +\n  theme_minimal()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "href": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "title": "Hands-on Exercise 6",
    "section": "Global Measures of Spatial Autocorrelation: Geary’s C",
    "text": "Global Measures of Spatial Autocorrelation: Geary’s C\nIn this section, you will learn how to perform Geary’s C statistics testing by using appropriate functions of spdep package.\n\nGeary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\nQuestion: What statistical conclusion can you draw from the output above?\n\n\nAnswer: The Geary C statistic of 0.691, with a standard deviate of 3.6108 and a p-value of 0.0001526, indicates significant negative spatial autocorrelation in GDP per capita across Hunan. This means that regions with high GDP per capita tend to be surrounded by areas with low GDP per capita, suggesting dissimilarity in spatial patterns.\n\n\n\nComputing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nQuestion: What statistical conclusion can you draw from the output above?\n\nAnswer: The observed Geary C statistic of 0.69072, with a p-value of 0.001, indicates significant negative spatial autocorrelation in GDP per capita across Hunan. This strong evidence suggests that areas with high GDP per capita are surrounded by areas with low GDP per capita.\n\n\nVisualising the Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n\n\n\nQuestion: What statistical observation can you draw from the output?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#spatial-correlogram",
    "href": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#spatial-correlogram",
    "title": "Hands-on Exercise 6",
    "section": "Spatial Correlogram",
    "text": "Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\nCompute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nQuestion: What statistical observation can you draw from the plot above?\n\n\nAnswer: The spatial correlogram reveals significant positive autocorrelation for the first three lags, indicating nearby areas have similar GDP per capita. However, the fourth lag is not significant, and the fifth and sixth lags show significant negative autocorrelation, suggesting that dissimilarities in GDP per capita emerge at greater distances.\n\n\n\nCompute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below.\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 6",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\nPlotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\nPlotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\nPreparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)    \n\nThis is follow by centering the local Moran’s around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])\n\nNext, we will set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.05\n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\nLastly, places non-significant Moran in the category 0.\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\nPlotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\n\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison.\n\nQuestion: What statistical observations can you draw from the LISA map above?\n\n\nAnswer: LISA map have larger areas of high-high quadrant compared to the GDPPC map."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 6",
    "section": "Hot Spot and Cold Spot Area Analysis",
    "text": "Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\nGetis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\nDeriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\nDeriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\nDetermine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#computing-gi-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex06/hands_on6.html#computing-gi-statistics",
    "title": "Hands-on Exercise 6",
    "section": "Computing Gi statistics",
    "text": "Computing Gi statistics\n\nGi statistics using fixed distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\nMapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\nQuestion: What statistical observation can you draw from the Gi map above?\n\n\n\nGi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nMapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\nQuestion: What statistical observation can you draw from the Gi map above?\n\n\nAnswer: There is clear distinction of local Gi values of 4-6 and values of -4 to -2."
  },
  {
    "objectID": "In-class_Ex/ICE_06/ice_06.html",
    "href": "In-class_Ex/ICE_06/ice_06.html",
    "title": "In-class Exercise 06",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, tmap, tidyverse, tmap)\n\nImporting Data\n\nhunan_2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhunan_sf &lt;- st_read(\n  dsn = \"data/geospatial\",\n  layer = \"Hunan\"\n)\n\nReading layer `Hunan' from data source \n  `C:\\javilian98\\IS415-GAA\\In-class_Ex\\ICE_06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan_GDPPC &lt;- left_join(hunan_sf, hunan_2012) %&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\n\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\n\nPerforming Global Moran’s I test\n\nglobal_moran_test(\n  wm_q$GDPPC,\n  wm_q$nb,\n  wm_q$wt\n)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\n\n\nmoranI &lt;- global_moran(\n  wm_q$GDPPC,\n  wm_q$nb,\n  wm_q$wt\n)\n\n\n\n\n\nset.seed(1234)\n\n\nglobal_moran_perm(\n  wm_q$GDPPC,\n  wm_q$nb,\n  wm_q$wt,\n  nsim = 99\n)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\n\n\n\nlisa &lt;- wm_q %&gt;%\n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99\n  ),\n  .before = 1) %&gt;%\n  unnest(local_moran)\n\n\nuse p_ii_sim for simulation\nii for local_moran\nmean & median more important\n\nexcessive skewness -&gt; use median column\n\nexcessive: if a lot of number that deviates from 0 (negative/positive)\ncan plot histogram to evaluate\n\nif close to 0 skewness -&gt; use mean column\n\n\nVisualising local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6, 8)) +\n  tm_layout(\n    main.title = \"local Moran's I of GDPPC\",\n    main.title.size = 1\n  )\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVisualising p-value of local Moran’s I and p-value\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(lisa) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6, 8)) +\n  tm_layout(\n    main.title = \"local Moran's I of GDPPC\",\n    main.title.size = 1\n  )\n\nmap2 &lt;- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n          labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"p-value of local Moran's I\",\n    main.title.size = 1\n  )\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\n\n\nlisa_sig &lt;- lisa %&gt;%\n  filter(p_ii &lt; 0.05)\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") +\n  tm_borders(alpha = 0.5)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\nto create LISA map, need to have the p_ii filter code line"
  },
  {
    "objectID": "In-class_Ex/ICE_06/ice_06.html#install-packages",
    "href": "In-class_Ex/ICE_06/ice_06.html#install-packages",
    "title": "In-class Exercise 06",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, tmap, tidyverse, tmap)\n\nImporting Data\n\nhunan_2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nhunan_sf &lt;- st_read(\n  dsn = \"data/geospatial\",\n  layer = \"Hunan\"\n)\n\nReading layer `Hunan' from data source \n  `C:\\javilian98\\IS415-GAA\\In-class_Ex\\ICE_06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan_GDPPC &lt;- left_join(hunan_sf, hunan_2012) %&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n\n\n\n\nwm_q &lt;- hunan_GDPPC %&gt;%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\n\nPerforming Global Moran’s I test\n\nglobal_moran_test(\n  wm_q$GDPPC,\n  wm_q$nb,\n  wm_q$wt\n)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\n\n\nmoranI &lt;- global_moran(\n  wm_q$GDPPC,\n  wm_q$nb,\n  wm_q$wt\n)\n\n\n\n\n\nset.seed(1234)\n\n\nglobal_moran_perm(\n  wm_q$GDPPC,\n  wm_q$nb,\n  wm_q$wt,\n  nsim = 99\n)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\n\n\n\nlisa &lt;- wm_q %&gt;%\n  mutate(local_moran = local_moran(\n    GDPPC, nb, wt, nsim = 99\n  ),\n  .before = 1) %&gt;%\n  unnest(local_moran)\n\n\nuse p_ii_sim for simulation\nii for local_moran\nmean & median more important\n\nexcessive skewness -&gt; use median column\n\nexcessive: if a lot of number that deviates from 0 (negative/positive)\ncan plot histogram to evaluate\n\nif close to 0 skewness -&gt; use mean column\n\n\nVisualising local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6, 8)) +\n  tm_layout(\n    main.title = \"local Moran's I of GDPPC\",\n    main.title.size = 1\n  )\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nVisualising p-value of local Moran’s I and p-value\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nmap1 &lt;- tm_shape(lisa) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6, 8)) +\n  tm_layout(\n    main.title = \"local Moran's I of GDPPC\",\n    main.title.size = 1\n  )\n\nmap2 &lt;- tm_shape(lisa) +\n  tm_fill(\"p_ii\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n          labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n    main.title = \"p-value of local Moran's I\",\n    main.title.size = 1\n  )\n\ntmap_arrange(map1, map2, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\n\n\nlisa_sig &lt;- lisa %&gt;%\n  filter(p_ii &lt; 0.05)\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") +\n  tm_borders(alpha = 0.5)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\nto create LISA map, need to have the p_ii filter code line"
  },
  {
    "objectID": "In-class_Ex/ICE_06/ice_06.html#hot-spot-and-cold-spot-analysis",
    "href": "In-class_Ex/ICE_06/ice_06.html#hot-spot-and-cold-spot-analysis",
    "title": "In-class Exercise 06",
    "section": "Hot Spot and Cold Spot Analysis",
    "text": "Hot Spot and Cold Spot Analysis\n\nComputing local Gi* statistics\n\nwm_idw &lt;- hunan_GDPPC %&gt;%\n  mutate(\n    nb = st_contiguity(geometry),\n    wts = st_inverse_distance(\n      nb, geometry,\n      scale = 1, alpha = 1\n    ),\n    .before = 1\n  )\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\n\n\nHCSA &lt;- wm_idw %&gt;%\n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wt, nsim = 99\n  ), .before = 1) %&gt;%\n  unnest(local_Gi)\n\nHCSA\n\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 19\n   gi_star cluster   e_gi     var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;    &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.0416 Low     0.0114 0.00000641  0.0493 9.61e-1  0.7          0.35    0.875\n 2 -0.333  Low     0.0106 0.00000384 -0.0941 9.25e-1  1            0.5     0.661\n 3  0.281  High    0.0126 0.00000751 -0.151  8.80e-1  0.9          0.45    0.640\n 4  0.411  High    0.0118 0.00000922  0.264  7.92e-1  0.6          0.3     0.853\n 5  0.387  High    0.0115 0.00000956  0.339  7.34e-1  0.62         0.31    1.07 \n 6 -0.368  High    0.0118 0.00000591 -0.583  5.60e-1  0.72         0.36    0.594\n 7  3.56   High    0.0151 0.00000731  2.61   9.01e-3  0.06         0.03    1.09 \n 8  2.52   High    0.0136 0.00000614  1.49   1.35e-1  0.2          0.1     1.12 \n 9  4.56   High    0.0144 0.00000584  3.53   4.17e-4  0.04         0.02    1.23 \n10  1.16   Low     0.0104 0.00000370  1.82   6.86e-2  0.12         0.06    0.416\n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wts &lt;list&gt;, NAME_2 &lt;chr&gt;,\n#   ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;, ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\n\n\nVisualising Gi*\n\nHCSA_sig &lt;- HCSA %&gt;%\n  filter(p_sim &lt; 0.05)\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"gi_star\") +\n  tm_borders(alpha = 0.5)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\ngstat is for hotspot and coldspot\nLISA for clusters"
  },
  {
    "objectID": "Take-home_Ex02/takehome_2.html",
    "href": "Take-home_Ex02/takehome_2.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Drug abuse is associated with significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. In 2021, 1 in 17 people aged 15–64 in the world had used a drug in the past 12 months. Notwithstanding population growth, the estimated number of drug users grew from 240 million in 2011 to 296 million in 2021.\nThe geopolitics of Thailand which is near the Golden Triangle of Indochina, the largest drug production site in Asia, and the constant transportation infrastructure development made Thailand became market and transit routes for drug trafficking to the third countries.\nIn Thailand, drug abuse is one of the major social issue. There are about 2.7 million youths using drugs in Thailand. Among youths aged between 15 and 19 years, there are about 300,000 who have needs for drug treatment. Most of Thai youths involved with drugs are vocational-school students, which nearly doubles in number compared to secondary-school students."
  },
  {
    "objectID": "Take-home_Ex02/takehome_2.html#overview",
    "href": "Take-home_Ex02/takehome_2.html#overview",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "Drug abuse is associated with significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. In 2021, 1 in 17 people aged 15–64 in the world had used a drug in the past 12 months. Notwithstanding population growth, the estimated number of drug users grew from 240 million in 2011 to 296 million in 2021.\nThe geopolitics of Thailand which is near the Golden Triangle of Indochina, the largest drug production site in Asia, and the constant transportation infrastructure development made Thailand became market and transit routes for drug trafficking to the third countries.\nIn Thailand, drug abuse is one of the major social issue. There are about 2.7 million youths using drugs in Thailand. Among youths aged between 15 and 19 years, there are about 300,000 who have needs for drug treatment. Most of Thai youths involved with drugs are vocational-school students, which nearly doubles in number compared to secondary-school students."
  },
  {
    "objectID": "Take-home_Ex02/takehome_2.html#objectives",
    "href": "Take-home_Ex02/takehome_2.html#objectives",
    "title": "Take-home Exercise 2",
    "section": "Objectives",
    "text": "Objectives\nTo discover:\n\nif the key indicators of drug abuse of Thailand are independent from space.\nIf the indicators of drug abuse is indeed spatial dependent, then, you would like to detect where are the clusters and outliers, and the hotspots.\nLast but not least, you are also interested to investigate how the observation above evolve over time."
  },
  {
    "objectID": "Take-home_Ex02/takehome_2.html#tasks",
    "href": "Take-home_Ex02/takehome_2.html#tasks",
    "title": "Take-home Exercise 2",
    "section": "Tasks",
    "text": "Tasks\nThe specific tasks of this take-home exercise are as follows:\n\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer:\n\na study area layer in sf polygon features. It must be at province level (including Bangkok) of Thailand.\na drug abuse indicators layer within the study area in sf polygon features.\n\nUsing the extracted data, perform global spatial autocorrelation analysis by using sfdep methods.\nUsing the extracted data, perform local spatial autocorrelation analysis by using sfdep methods.\nDescribe the spatial patterns revealed by the analysis above."
  },
  {
    "objectID": "Take-home_Ex02/takehome_2.html#the-data",
    "href": "Take-home_Ex02/takehome_2.html#the-data",
    "title": "Take-home Exercise 2",
    "section": "The Data",
    "text": "The Data\nFor the purpose of this take-home exercise, two data sets shall be used, they are:\n\nThailand Drug Offenses [2017-2022] at Kaggle.\nThailand - Subnational Administrative Boundaries at HDX. You are required to use the province boundary data set."
  },
  {
    "objectID": "Take-home_Ex02/takehome_2.html#installing-the-dependencies",
    "href": "Take-home_Ex02/takehome_2.html#installing-the-dependencies",
    "title": "Take-home Exercise 2",
    "section": "Installing the Dependencies",
    "text": "Installing the Dependencies\nLoading the required packages\n\nsf Needed to handle spatial data through the new simple features standard\ntmap Create thematic maps, particularly chloropleth maps in our case\ntidyverse For easy data manipulation and some visualisation\nggplot2 A step above the usual visualisations, like histograms\nsfdep Spatial dependence with spatial features, the highlight of this take home exercise. The spacetime object is particularly useful\n\n\npacman::p_load(sf, tmap, tidyverse, ggplot2, sfdep)"
  },
  {
    "objectID": "Take-home_Ex02/takehome_2.html#importing-the-datasets",
    "href": "Take-home_Ex02/takehome_2.html#importing-the-datasets",
    "title": "Take-home Exercise 2",
    "section": "Importing the Datasets",
    "text": "Importing the Datasets\nImporting the tha_admbnda_adm1_rtsd_20220121 dataset as variable thbd, which contains polygons representing the borders of the provinces of Thailand.\n\nthbd &lt;- st_read(\n  dsn = \"data/geospatial\",\n  layer = \"tha_admbnda_adm1_rtsd_20220121\"\n)\n\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\javilian98\\IS415-GAA\\Take-home_Ex02\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n\n\nImporting the thai_drug_offenses_2017_2022 aspatial dataset as thdo. This dataset contains points, representing drug cases.\n\nthdo &lt;- read_csv(\"data/aspatial/thai_drug_offenses_2017_2022.csv\")\n\n\nSetting random seed\nIt is always a good practice to use set.seed() before performing simulation. This is to ensure that the computation is reproducible.\n\nset.seed(111)"
  },
  {
    "objectID": "Take-home_Ex02/takehome_2.html#data-wrangling",
    "href": "Take-home_Ex02/takehome_2.html#data-wrangling",
    "title": "Take-home Exercise 2",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\nRemoving unused columns\nFor thbd (Thai boundary data), I decided to select 4 columns (Shape_Length, Shape_Area, ADM1_EN and geometry) which I think are the most useful from the dataset.\nAnd for thdo (Thai drug offences), I decided to remove province_th column as it might not be helpful if you cannot read Thai scripts.\n\nthbd &lt;- thbd %&gt;%\n  select(1:3, 17)\n\nthdo &lt;- thdo %&gt;%\n  select(-province_th)\n\n\n\nReplacing column values\nWhen analysing both datasets, I noticed that in the thbd dataset, the province names ‘Bueng Kan’ and ‘Lop Buri’ are correct. However, those names were misspelled as ‘buogkan’ and ‘Loburi’ in the thdo dataset. So we have to fix that using mutate() and recode() methods!\n\nthdo &lt;- thdo %&gt;%\n  mutate(\n    province_en = recode(province_en, \n                         \"buogkan\" = \"Bueng Kan\",\n                         \"Loburi\" = \"Lop Buri\")\n  )\n\n\n\nFocusing on specific drug offenses\nFirstly, let us find out how many types of drug offenses are there in the aspatial thdo dataset.\n\n# Get distinct type_of_drug_offenses\nthdo_offenses_types &lt;- thdo %&gt;%\n  distinct(types_of_drug_offenses)\n\nthdo_offenses_types\n\n# A tibble: 16 × 1\n   types_of_drug_offenses                                \n   &lt;chr&gt;                                                 \n 1 drug_use_cases                                        \n 2 suspects_in_drug_use_cases                            \n 3 possession_cases                                      \n 4 suspects_in_possession_cases                          \n 5 possession_with_intent_to_distribute_cases            \n 6 suspects_in_possession_with_intent_to_distribute_cases\n 7 trafficking_cases                                     \n 8 suspects_in_trafficking_cases                         \n 9 production_cases                                      \n10 suspects_in_production_cases                          \n11 import_cases                                          \n12 suspects_in_import_cases                              \n13 export_cases                                          \n14 suspects_in_export_cases                              \n15 conspiracy_cases                                      \n16 suspects_in_conspiracy_cases                          \n\n\nBelow is the code for finding the number of non-zero cases per year:\n\nthdo_year_no_cases_summary &lt;- thdo %&gt;%\n  filter(no_cases &gt; 0) %&gt;%              # Filter for non-zero no_cases\n  group_by(fiscal_year) %&gt;%             # Group by year\n  summarise(non_zero_count = n()) %&gt;%   # Count non-zero cases per year\n  arrange(desc(non_zero_count))         # Arrange in descending order\n\n\nprint(thdo_year_no_cases_summary)\n\n# A tibble: 6 × 2\n  fiscal_year non_zero_count\n        &lt;dbl&gt;          &lt;int&gt;\n1        2017            974\n2        2020            974\n3        2019            966\n4        2018            965\n5        2021            844\n6        2022            830\n\n\nI will be focusing on the most recent year which is year 2022. So let’s filter the thdo to year 2022.\n\nthdo &lt;- thdo %&gt;% filter(fiscal_year == 2022)\n\nSuspected cases may not be 100% actual cases that happened, so I am going to remove all suspected cases.\n\nthdo &lt;- thdo %&gt;% filter(!grepl(\"suspects_\", types_of_drug_offenses))\n\nSince the main analysis of this assignment is focusing on drug abuse, I am going to filter the data related to that offense.\n\nthdo &lt;- thdo %&gt;% filter(types_of_drug_offenses == \"drug_use_cases\")\n\n\n\nJoining Datasets\nIn this section, I would like to join the row data of each province from thbd with thdo.\nWhen I tried running the left_join command initially, the output (image below) recommended to me to perform a cross_join, which outputs over 57,000 rows of data from the initial 7,000+ rows of data.\nAnd In order to perform a left join, there needs to be identical column name and values between the two datasets (thbd and thdo). The two datasets have same province values but different column names (in this case, ADM1_EN and province_en from thbd and thdo respectively).\n\n\nRenaming column values\nMy solution may not be ideal but if I change the column name from one dataset to match with the other dataset, then it would solve the issue.\nIn this case, let’s change the column name ADM1_EN from thbd to province_en from thdo.\n\nthbd = rename(thbd, province_en = ADM1_EN)\n\nLet’s take a look at the output to see if the column name has been changed.\n\ncolnames(thbd)\n\n[1] \"Shape_Leng\"  \"Shape_Area\"  \"province_en\" \"geometry\"   \n\n\nIndeed it has been changed. Nice!\n\n\nPerforming the left join\n\nthbddo &lt;- left_join(thbd, thdo, by = join_by(province_en))"
  },
  {
    "objectID": "Take-home_Ex02/takehome_2.html#global-measures-of-spatial-autocorrelation",
    "href": "Take-home_Ex02/takehome_2.html#global-measures-of-spatial-autocorrelation",
    "title": "Take-home Exercise 2",
    "section": "Global Measures of Spatial Autocorrelation",
    "text": "Global Measures of Spatial Autocorrelation\nIn this section, I will be performing spatial complete randomness test for global spatial autocorrelation.\nBefore I can compute the global spatial autocorrelation statistics, I’ll need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. province) in the study area.\n\nDeriving Queen’s contiguity weights\nWhen I tried to compute the Queen’s contiguity weights, I received an error in RStudio mentioning “cannot allocate vector of size 7.9 Gb”. Unfortunately, my solution for it is to scale down to a year’s worth of data.\n\nWhen using the st_contiguity() method, I encountered an error mentioning some data has empty neighbours. I could either remove it entirely but this would affect the number of provinces and might skew the overall analysis, or the more optimal way is to create a buffer (learnt from the previous hands-on exercise) to connect features in the data.\n\n# Create a buffer to connect features\nbuffered_geometries &lt;- st_buffer(thbddo$geometry, dist = 100)  # Adjust distance as needed\n\n# Recalculate neighbors using buffered geometries\nnb_buffered &lt;- st_contiguity(buffered_geometries)\n\n# Create weights with the buffered neighbors\nthbddo_q &lt;- thbddo %&gt;%\n  mutate(nb = nb_buffered,\n         wt = st_weights(nb_buffered, style = \"W\"),\n         .before = 1)\n\nNow I can successfully compute the queen.\n\nthbddo_q\n\nSimple feature collection with 77 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                            nb\n1          2, 3, 4, 15, 59, 60\n2                        1, 15\n3                  1, 4, 5, 59\n4              1, 3, 5, 10, 17\n5       3, 4, 6, 7, 10, 58, 59\n6                  5, 7, 8, 58\n7  5, 6, 8, 10, 19, 25, 48, 55\n8              6, 7, 9, 48, 58\n9                    8, 48, 49\n10             4, 5, 7, 17, 19\n                                                                            wt\n1             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n2                                                                     0.5, 0.5\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                      0.2, 0.2, 0.2, 0.2, 0.2\n5  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n6                                                       0.25, 0.25, 0.25, 0.25\n7                       0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n8                                                      0.2, 0.2, 0.2, 0.2, 0.2\n9                                              0.3333333, 0.3333333, 0.3333333\n10                                                     0.2, 0.2, 0.2, 0.2, 0.2\n   Shape_Leng Shape_Area              province_en fiscal_year\n1    2.417227 0.13133873                  Bangkok        2022\n2    1.695100 0.07926199             Samut Prakan        2022\n3    1.251111 0.05323766               Nonthaburi        2022\n4    1.884945 0.12698345             Pathum Thani        2022\n5    3.041716 0.21393797 Phra Nakhon Si Ayutthaya        2022\n6    1.739908 0.07920961                Ang Thong        2022\n7    5.693342 0.54578838                 Lop Buri        2022\n8    1.778326 0.06872655                Sing Buri        2022\n9    2.896316 0.20907828                 Chai Nat        2022\n10   4.766446 0.29208711                 Saraburi        2022\n   types_of_drug_offenses no_cases                       geometry\n1          drug_use_cases     2755 MULTIPOLYGON (((100.6139 13...\n2          drug_use_cases     1953 MULTIPOLYGON (((100.7306 13...\n3          drug_use_cases      809 MULTIPOLYGON (((100.3415 14...\n4          drug_use_cases     1599 MULTIPOLYGON (((100.8916 14...\n5          drug_use_cases     1298 MULTIPOLYGON (((100.5131 14...\n6          drug_use_cases      784 MULTIPOLYGON (((100.3332 14...\n7          drug_use_cases      985 MULTIPOLYGON (((101.3453 15...\n8          drug_use_cases      493 MULTIPOLYGON (((100.3691 15...\n9          drug_use_cases      617 MULTIPOLYGON (((100.1199 15...\n10         drug_use_cases      839 MULTIPOLYGON (((101.3994 15...\n\n\n\n\nGlobal Moran’s I Test\nIn this section, I use Moran’s I Test to understand the presence of systemic spatial variations of drug abuse cases. In other words, how the number of drug abuse cases in each province varies according to its surrounding provinces compared to that under spatial randomness.\n\nglobal_moran_test(thbddo_q$no_cases,\n            thbddo_q$nb,\n            thbddo_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.8114, p-value = 0.002467\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.216232665      -0.013157895       0.006657561 \n\n\n\n\nPerforming Global Moran’s I Permutation Test\nIn practice, Monte carlo simulation should be used to perform the statistical test. For sfdep, it is supported by global_moran_perm()\n\nthbddo_q_mc_res &lt;- global_moran_perm(thbddo_q$no_cases,\n           thbddo_q$nb,\n           thbddo_q$wt,\n           nsim = 999,\n           zero.policy = TRUE, \n           na.action=na.omit)\n\nthbddo_q_mc_res\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.21623, observed rank = 998, p-value = 0.004\nalternative hypothesis: two.sided\n\n\nThe results from summary indicate that the simulated values of Global Moran’s I vary from negative to positive, with a slight skew towards negative values. If the observed Global Moran’s I value is significantly greater than the maximum of this distribution, it suggests strong positive spatial autocorrelation in your data. Conversely, if it falls below the minimum, it indicates strong negative autocorrelation.\n\nThe observed Moran’s I statistic (0.21623) is significantly higher than most of the simulated values, as indicated by the p-value of 0.004. This suggests a strong positive spatial autocorrelation in drug abuse cases in Thailand for the year 2022, meaning provinces with high drug abuse cases are likely to be near other provinces with high drug abuse cases.\n\n    summary(thbddo_q_mc_res$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.22963 -0.07502 -0.02307 -0.01883  0.02989  0.26842 \n\n\n\nvar(thbddo_q_mc_res$res[1:999])\n\n[1] 0.006165505\n\n\nTo visualise the monte-carlo simulation results, we plot a histogram. Our observed result was 0.21623, which falls slightly outside the results generated from our simulation. As such, we can deem the results to be less than likely to be due to chance and that there is a significant degree of spatial autocorrelation in the number of drug abuse cases per province.\n\nggplot() + \n  aes(thbddo_q_mc_res$res[1:999]) + \n  geom_histogram(colour=\"black\", fill=\"pink\") + \n  labs(title = \"Histogram of Simulated Moran's I For Drug Abuse Cases Year 2022\",\n       x = \"Simulated Moran's I\",\n       y = \"Occurences\") +\n  theme_minimal()"
  },
  {
    "objectID": "Take-home_Ex02/takehome_2.html#local-measures-of-spatial-autocorrelation",
    "href": "Take-home_Ex02/takehome_2.html#local-measures-of-spatial-autocorrelation",
    "title": "Take-home Exercise 2",
    "section": "Local Measures of Spatial Autocorrelation",
    "text": "Local Measures of Spatial Autocorrelation\nLocal Indicators of Spatial Association (LISA) help us identify clusters among different regions. In simpler terms, LISA is a statistical method that shows how much a region is affected by its neighboring areas, with higher values indicating a stronger influence from the surroundings.\n\nLocal Moran’s I\n\nlisa &lt;- thbddo_q %&gt;% \n  mutate(local_moran = local_moran(\n    no_cases, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_moran)\n\n\nlisa\n\nSimple feature collection with 77 features and 20 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n# A tibble: 77 × 21\n         ii      eii   var_ii   z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.285   -0.00289 0.149    -0.731 0.465     0.48         0.24    0.725\n 2  0.111    0.0133  0.0344    0.528 0.597     0.58         0.29    0.582\n 3 -0.165   -0.0336  0.168    -0.320 0.749     0.7          0.35   -0.921\n 4  0.0122   0.00120 0.000465  0.509 0.611     0.7          0.35   -0.565\n 5  0.132   -0.00183 0.0139    1.13  0.257     0.28         0.14   -0.342\n 6  0.436    0.00209 0.140     1.16  0.245     0.28         0.14   -0.541\n 7  0.131   -0.00766 0.0453    0.651 0.515     0.6          0.3    -0.565\n 8  0.637   -0.0183  0.226     1.38  0.169     0.1          0.05   -0.678\n 9  0.790   -0.0535  0.331     1.47  0.142     0.06         0.03   -1.01 \n10  0.00790 -0.0861  0.132     0.258 0.796     0.88         0.44   -0.394\n# ℹ 67 more rows\n# ℹ 13 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, Shape_Leng &lt;dbl&gt;, Shape_Area &lt;dbl&gt;, province_en &lt;chr&gt;,\n#   fiscal_year &lt;dbl&gt;, types_of_drug_offenses &lt;chr&gt;, no_cases &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n\nThe output of local_moran() is a sf data.frame containing the columns ii, eii, var_ii, z_ii, p_ii, p_ii_sim.\n\nii: local moran statistic\neii: expectation of local moran statistic; for localmoran_permthe permutation sample means\nvar_ii: variance of local moran statistic; for localmoran_permthe permutation sample standard deviations\nz_ii: standard deviate of local moran statistic; for localmoran_perm based on permutation sample means and standard deviations\np_ii: p-value of local moran statistic using pnorm(); for localmoran_perm using standard deviatse based on permutation sample means and standard deviations\n\n\nVisualising Local Moran’s I\n\nclass(lisa)\n\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\ntm_shape(lisa) +\n  tm_fill(\"ii\",\n          palette = c(\"#b7dce9\",\"#e1ecbb\",\"#f5f3a6\",\n                      \"#ec9a64\",\"#d21b1c\")) +\n  tm_layout(main.title = \"Spatial Autocorrelation\\n of Drug Abuse Cases in Year 2022 Thailand\",\n            main.title.position = \"center\",\n            main.title.size = 1.3,\n            main.title.fontface = \"bold\",\n            legend.title.size = 1,\n            legend.text.size = 1,\n            frame = TRUE) +\n  tm_borders(col = \"black\", alpha = 0.6) +\n  tm_compass(type=\"8star\", text.size = 1.5, size = 3, position=c(\"RIGHT\", \"TOP\"))\n\n\n\n\n\n\n\n\n\n\nVisualising Local Moran’s I p-value\n\ntm_shape(lisa)+\n  tm_fill(\"p_ii\", \n          palette = c(\"#b7dce9\",\"#c9e3d2\",\"#f5f3a6\",\"#ec9a64\",\"#d21b1c\"),\n          ) +\n  tm_borders(col = \"black\", alpha = 0.6)+\n  tm_layout(main.title = \"Statistical Significance of Spatial Autocorrelation\\n of Drug Abuse Cases in Year 2022 Thailand\",\n            main.title.position = \"center\",\n            main.title.size = 1.5,\n            main.title.fontface = \"bold\",\n            legend.title.size = 1,\n            legend.text.size = 1,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", text.size = 1.5, size = 3, position=c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position=c(\"LEFT\", \"BOTTOM\"), text.size=1.2) +\n  tm_grid(labels.size = 1,alpha =0.2)\n\n\n\n\n\n\n\n\n\n\nVisualising Statistically Significant Local Spatial Autocorrelation Map\n\nlisa_sig &lt;- lisa  %&gt;%\n  filter(p_ii_sim &lt; 0.05)\n\ntm_shape(lisa)+\n  tm_polygons() +\n  tm_borders(col = \"black\", alpha = 0.6)+\ntm_shape(lisa_sig)+\n  tm_fill(\"ii\", \n          palette = c(\"#b7dce9\",\"#e1ecbb\",\"#f5f3a6\",\n                      \"#f8d887\",\"#ec9a64\",\"#d21b1c\"),\n          title = \"Local Moran's I (p &lt; 0.05)\",\n          midpoint = NA,\n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_borders(col = \"black\", alpha = 0.6)+\n  tm_layout(main.title = \"Statistically Significant Province-Level Spatial Autocorrelation Map \\n of Drug Abuse Cases in Thailand 2022\",\n            main.title.position = \"center\",\n            main.title.size = 1.5,\n            main.title.fontface = \"bold\",\n            legend.title.size = 1,\n            legend.text.size = 1,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", text.size = 1.5, size = 3, position=c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position=c(\"LEFT\", \"BOTTOM\"), text.size=1.2) +\n  tm_grid(labels.size = 1,alpha =0.2)\n\n\n\n\n\n\n\n\n\n\n\nLISA Classification\nThe local indicator of spatial association (LISA) for each observation gives an indication of the extent of significant spatial clustering of similar values around that observation. In general, the analysis will calculate a local statistic value, a z-score, a pseudo p-value, and a code representing the cluster type for each statistically significant feature. LISA map is a categorical map showing type of outliers and clusters. There are two types of outliers namely: High-Low and Low-High outliers. Likewise, there are two type of clusters namely: High-High and Low-Low cluaters.\nSpecific to our study, we may infer LISA classifications as below.\n\nHigh-Low Outliers: Provinces with a high value of drug abuse cases, surrounded by neighbouring provinces with low values of drug abuse cases.\nLow-High Outliers: Provinces with a low value of drug abuse cases, surrounded by neighbouring provinces with high values of drug abuse cases.\nHigh-High Clusters: Provinces with a high value of drug abuse cases, surrounded by neighbouring provinces with high values of drug abuse cases.\nLow-Low Clusters: Provinces with a low value of drug abuse cases, surrounded by neighbouring provinces with low values of drug abuse cases.\n\n\nVisualising Statistically Significant LISA Map for Study Area\nIn lisa sf data.frame we created when calculating local Moran’s Ii , we can find three fields contain the LISA categories. They are mean, median and pysal. We will use mean column to visualise LISA classification maps with relevant tmap functions.\n\ntmap_mode(\"plot\")\nstudy_area_lisa &lt;- tm_shape(lisa)+\n  tm_polygons() +\n  tm_borders(col = \"black\", alpha = 0.6)+\ntm_shape(lisa_sig)+\n  tm_fill(\"mean\", \n          palette = c(\"#b7dce9\",\"#ec9a64\",\"#e1ecbb\", \"#d21b1c\"),\n          title = \"LISA class\",\n          midpoint = NA,\n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_borders(col = \"black\", alpha = 0.6)+\n  tm_layout(main.title = \"Province-Level LISA Map of Drug Abuse Cases in Thailand 2022\",\n            main.title.position = \"center\",\n            main.title.size = 1.7,\n            main.title.fontface = \"bold\",\n            legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.title.size = 1.8,\n            legend.text.size = 1.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", text.size = 1.5, size = 2, position=c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position=c(\"LEFT\", \"BOTTOM\"), text.size=1.2) +\n  tm_grid(labels.size = 1,alpha =0.2)\n\nstudy_area_lisa\n\n\n\n\n\n\n\n\n\n\n\nHot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\nwm_idw &lt;- thbddo %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n\nNext, we will calculate local Gi∗ using local_gstart_perm() function from sfdep package. This function uses a neighbour list nb and a weight list wt as an input and generate Gi∗ statistics through a Monte Carlo permutation with specified nsim. The results will then be stored into a new object called HCSA.\n\nHCSA &lt;- wm_idw %&gt;% \n  mutate(local_Gi_star = local_gstar_perm(\n    no_cases, nb, wt, nsim = 99),\n         .before = 1) %&gt;%\n  unnest(local_Gi_star)\n\nNext, we will use relevant tmap functions to visualise the result of local Gi∗ values for our study area. For visualisation purpose, we will create a new column label similar to what we did in Local Moran’s I.\n\ntmap_mode(\"plot\")  \ntm_shape(HCSA)+\n  tm_fill(\"gi_star\", \n          palette = c(\"#57bfc0\", \"#7977f3\",\"#f8d673\",\"#f8b675\",\"#f67774\"),\n          title = \"Gi*\",\n          midpoint = 0) +\n  tm_borders(col = \"black\", alpha = 0.6)+\n  tm_layout(main.title = \" Hotspots & Coldspots of Drug Abuse Cases in Thailand 2022\",\n            main.title.position = \"center\",\n            main.title.size = 1.5,\n            main.title.fontface = \"bold\",\n            legend.title.size = 1,\n            legend.text.size = 1,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", text.size = 1.5, size = 3, position=c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position=c(\"LEFT\", \"BOTTOM\"), text.size=1.2) +\n  tm_grid(labels.size = 1,alpha =0.2)\n\n\n\n\n\n\n\n\nSimilar to what we have done for LISA, we will only focus on provinces with statistically significant Local Getis-Ord Gi∗ values. To achieve this, we will filter out all Local Getis-Ord Gi∗ values with a p-value &gt; 0.05. Subsequently, we will use relevant tmap functions to create a statistically significant local spatial autocorrelation map for our study area.\n\nHCSA_sig &lt;- HCSA  %&gt;%\n  filter(p_sim &lt; 0.05)\n\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_polygons() +\ntm_shape(HCSA_sig)+\n  tm_fill(\"gi_star\", \n          palette = c(\"#57bfc0\", \"#7977f3\",\"#f8d673\",\"#f8b675\",\"#f67774\"),\n          title = \"Gi*\",\n          midpoint = 0,\n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_borders(col = \"black\", alpha = 0.6)+\n  tm_layout(main.title = \"Statistically Significant Hotspots & Coldspots \\nof Drug Abuse Cases in Thailand 2022\",\n            main.title.position = \"center\",\n            main.title.size = 1.5,\n            main.title.fontface = \"bold\",\n            legend.title.size = 1,\n            legend.text.size = 1,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", text.size = 1.5, size = 3, position=c(\"RIGHT\", \"TOP\")) +\n  tm_scale_bar(position=c(\"LEFT\", \"BOTTOM\"), text.size=1.2) +\n  tm_grid(labels.size = 1,alpha =0.2)"
  },
  {
    "objectID": "Take-home_Ex02/takehome_2.html#conclusion",
    "href": "Take-home_Ex02/takehome_2.html#conclusion",
    "title": "Take-home Exercise 2",
    "section": "Conclusion",
    "text": "Conclusion\nThis study aimed to analyze drug abuse patterns in Thailand, focusing on the spatial distribution of drug-related offenses across provinces. Utilizing geospatial data and statistical methods, we sought to understand the independence of key indicators of drug abuse from spatial influences, identify clusters and outliers, and examine how these patterns evolve over time.\nThe Global Moran’s I test revealed significant positive spatial autocorrelation in drug abuse cases, indicating that provinces with high or low drug use rates tend to be clustered together rather than randomly distributed. This suggests that local factors—such as socioeconomic conditions, accessibility to treatment, and proximity to drug trafficking routes—play a crucial role in influencing drug abuse patterns.\nThe LISA analysis identified specific provinces as either hotspots (High-High clusters) or cold spots (Low-Low clusters) for drug abuse. This classification allows for targeted interventions, helping policymakers focus resources where they are most needed.\nNotable high-low outliers indicate provinces with high drug abuse cases surrounded by areas with low cases, highlighting potential spillover effects or unique local factors contributing to the issue.\nThe Getis-Ord Gi* statistic identified significant hotspots and cold spots, reinforcing the findings from the LISA analysis. This further supports the notion that drug abuse is not uniformly distributed across Thailand, with certain regions experiencing acute challenges that require immediate attention.\nWhile this analysis primarily focused on data from 2022, the methodology allows for ongoing evaluation of trends over time. Future studies could leverage this framework to monitor changes in drug abuse patterns in response to interventions or shifts in policy.\n\nRecommendations for Future Research:\n\nBroader Data Integration: Incorporating additional data sources, such as socioeconomic indicators, healthcare access, and law enforcement activities, could provide deeper insights into the factors driving drug abuse in specific regions.\nLongitudinal Studies: Conducting longitudinal studies would help identify trends over time and assess the impact of policy changes on drug abuse patterns.\nQualitative Research: Engaging in qualitative research to understand community perspectives on drug abuse could enrich quantitative findings and support more effective intervention strategies.\n\nIn conclusion, this analysis underscores the importance of spatial considerations in understanding and addressing drug abuse in Thailand. By leveraging geospatial data and analytical methods, stakeholders can develop informed strategies that respond to the unique challenges faced by different provinces."
  },
  {
    "objectID": "Take-home_Ex02/takehome_2.html#takeaways",
    "href": "Take-home_Ex02/takehome_2.html#takeaways",
    "title": "Take-home Exercise 2",
    "section": "Takeaways",
    "text": "Takeaways\nI think it is important to do some self-research on the country you are conducting your analysis. With the little details like having incorrect province names and not knowing about it can potentially draw you back in moments of frustration.\nAfter doing this take-home exercise, I believed that I am further equipped with more techniques under my belt to conduct more interesting analysis in the future."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html",
    "title": "Hands-On Exercise 8",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on how to delineate homogeneous region by using geographically referenced multivariate data. There are two major analysis, namely:\n\nhierarchical cluster analysis; and\nspatially constrained cluster analysis.\n\n\n\nBy the end of this hands-on exercise, you will able:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis output by using ggplot2 and tmap package.\n\n\n\n\n\n\nIn geobusiness and spatial policy, it is a common practice to delineate the market or planning area into homogeneous regions by using multivariate data. In this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home.\n\n\n\n\nTwo data sets will be used in this study. They are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\nBoth data sets are download from Myanmar Information Management Unit (MIMU)\n\n\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualisation and analysis\n\ncoorplot, ggpubr, and heatmaply\n\nCluster analysis\n\ncluster\nClustGeo\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally)\n\nWith tidyverse, we do not have to install readr, ggplot2 and dplyr packages separately. In fact, tidyverse also installs other very useful R packages such as tidyr.\n\n\n\n\n\n\nIn this section, you will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment.\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\nThe code chunks used are shown below:\n\nshan_sf &lt;- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\javilian98\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1  Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2  Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3  Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4  Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5  Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6  Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7  Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8  Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9  Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                         geometry\n1  MULTIPOLYGON (((96.96001 23...\n2  MULTIPOLYGON (((96.7731 21....\n3  MULTIPOLYGON (((96.78483 21...\n4  MULTIPOLYGON (((96.49518 20...\n5  MULTIPOLYGON (((96.66306 24...\n6  MULTIPOLYGON (((96.49518 20...\n7  MULTIPOLYGON (((97.14738 19...\n8  MULTIPOLYGON (((96.94981 22...\n9  MULTIPOLYGON (((96.75648 22...\n10 MULTIPOLYGON (((96.95498 22...\n\n\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework.\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (South)…\n$ ST_PCODE &lt;chr&gt; \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\", \"…\n$ DT       &lt;chr&gt; \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"Ta…\n$ DT_PCODE &lt;chr&gt; \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MMR0…\n$ TS       &lt;chr&gt; \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kalaw…\n$ TS_PCODE &lt;chr&gt; \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR01501…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (((…\n\n\n\n\n\nThe csv file will be import using read_csv function of readr package.\nThe code chunks used are shown below:\n\nict &lt;- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It is saved in R’s * tibble data.frame* format.\nThe code chunk below reveal the summary statistics of ict data.frame.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame.\n\n\n\nThe unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of households. In general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\nLet us review the summary statistics of the newly derived penetration rates using the code chunk below.\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nNotice that six new fields have been added into the data.frame. They are RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR.\n\n\n\n\n\n\nWe can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\nBoxplot is useful to detect if there are outliers.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nNext, we will also plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nWhat can you observed from the distributions reveal in the histogram and boxplot.\nThe code chunks below are used to create the data visualisation. They consist of two main parts. First, we will create the individual histograms using the code chunk below.\n\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n# In the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\n\nNext, the ggarrange() function of ggpubr package is used to group these histograms together.\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\nThe message above shows that TS_CODE field is the common field used to perform the left-join.\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\n\n\n\n\nTo have a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map will be prepared.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number ot households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the dsitribution of total number of households and Radio penetration rate by using the code chunk below.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\n\n\n\nCan you identify the differences?\n\n\n\n\n\nBefore we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nIn this section, you will learn how to use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both.\n\n\n\nIn this section, you will learn how to perform hierarchical cluster analysis. The analysis consists of four major steps:\n\n\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\nNext, we need to change the rows by township name instead of row number by using the code chunk below\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n# shan_ict &lt;- read_rds(\"data/rds/shan_ict.rds\")\n\n\n\n\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n\n\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice that the values range of the Min-max standardised clustering variables are 0-1 now.\n\n\n\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to stadardisation the clustering variables by using Z-score method.\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.\nWarning: Z-score standardisation method should only be used if we would assume all variables come from some normal distribution.\n\n\n\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\nWhat statistical conclusion can you draw from the histograms above?\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\n\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\n\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\n\n\n\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\n\n\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\n\n\n\n\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;% rename(CLUSTER=as.matrix.groups.)the groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used.\n\n\n\n\nIn this section, you will learn how to derive spatially constrained cluster by using skater() method of spdep package.\n\n\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\n\nshan_sp &lt;- as_Spatial(shan_sf)\n\n\n\n\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nWe can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\ncoords &lt;- st_coordinates(\n  st_centroid(st_geometry(shan_sf)))\n\n\nplot(st_geometry(shan_sf), \n     border=grey(.5))\nplot(shan.nb,\n     coords, \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\n\n\n\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\n\n\n\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\n\n\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nshan.mst &lt;- mstree(shan.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   54   48  47.79331\n[2,]   54   17 109.08506\n[3,]   54   45 127.42203\n[4,]   45   52 146.78891\n[5,]   52   13 110.55197\n[6,]   13   28  92.79567\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\nplot(st_geometry(shan_sf), \n                 border=gray(.5))\nplot.mst(shan.mst, \n         coords, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust6 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 52 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 25 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\nplot(st_geometry(shan_sf), \n     border=gray(.5))\nplot(clust6, \n     coords, \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat &lt;- as.matrix(clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section, you will gain hands-on experience on using functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\n\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\n\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\n\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.2 will be used as shown in the code chunk below.\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.2)\n\nNext, cutree() is used to derive the cluster object.\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chunk below.\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe can now plot the map of the newly delineated spatially constrained clusters.\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to reveal the distribution of a clustering variable (i.e RADIO_PR) by cluster\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe boxplot reveals Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6 and 5.\n\n\n\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThe parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\nThere is no one best scaling method to use. You should explore them and select the one that best meet your analysis need.\nLast but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.\nIn the code chunk below, group_by() and summarise() of dplyr are used to derive mean values of the clustering variables.\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               221.        521.            44.2           246.\n2 2               237.        402.            23.9           134.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5               124.        224.            38.0           132.\n6 6                98.6       499.            74.5           468.\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#learning-outcome",
    "title": "Hands-On Exercise 8",
    "section": "",
    "text": "By the end of this hands-on exercise, you will able:\n\nto convert GIS polygon data into R’s simple feature data.frame by using appropriate functions of sf package of R;\nto convert simple feature data.frame into R’s SpatialPolygonDataFrame object by using appropriate sf of package of R;\nto perform custer analysis by using hclust() of Base R;\nto perform spatially constrained cluster analysis using skater() of Base R; and\nto visualise the analysis output by using ggplot2 and tmap package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#getting-started",
    "title": "Hands-On Exercise 8",
    "section": "",
    "text": "In geobusiness and spatial policy, it is a common practice to delineate the market or planning area into homogeneous regions by using multivariate data. In this hands-on exercise, we are interested to delineate Shan State, Myanmar into homogeneous regions by using multiple Information and Communication technology (ICT) measures, namely: Radio, Television, Land line phone, Mobile phone, Computer, and Internet at home."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#the-data",
    "title": "Hands-On Exercise 8",
    "section": "",
    "text": "Two data sets will be used in this study. They are:\n\nMyanmar Township Boundary Data (i.e. myanmar_township_boundaries) : This is a GIS data in ESRI shapefile format. It consists of township boundary information of Myanmar. The spatial data are captured in polygon features.\nShan-ICT.csv: This is an extract of The 2014 Myanmar Population and Housing Census Myanmar at the township level.\n\nBoth data sets are download from Myanmar Information Management Unit (MIMU)\n\n\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nSpatial data handling\n\nsf, rgdal and spdep\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\nMultivariate data visualisation and analysis\n\ncoorplot, ggpubr, and heatmaply\n\nCluster analysis\n\ncluster\nClustGeo\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(spdep, tmap, sf, ClustGeo, \n               ggpubr, cluster, factoextra, NbClust,\n               heatmaply, corrplot, psych, tidyverse, GGally)\n\nWith tidyverse, we do not have to install readr, ggplot2 and dplyr packages separately. In fact, tidyverse also installs other very useful R packages such as tidyr."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#data-import-and-prepatation",
    "href": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#data-import-and-prepatation",
    "title": "Hands-On Exercise 8",
    "section": "",
    "text": "In this section, you will import Myanmar Township Boundary GIS data and its associated attrbiute table into R environment.\nThe Myanmar Township Boundary GIS data is in ESRI shapefile format. It will be imported into R environment by using the st_read() function of sf.\nThe code chunks used are shown below:\n\nshan_sf &lt;- st_read(dsn = \"data/geospatial\", \n                   layer = \"myanmar_township_boundaries\") %&gt;%\n  filter(ST %in% c(\"Shan (East)\", \"Shan (North)\", \"Shan (South)\")) %&gt;%\n  select(c(2:7))\n\nReading layer `myanmar_township_boundaries' from data source \n  `C:\\javilian98\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 330 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.17275 ymin: 9.671252 xmax: 101.1699 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\n\nThe imported township boundary object is called shan_sf. It is saved in simple feature data.frame format. We can view the content of the newly created shan_sf simple features data.frame by using the code chunk below.\n\nshan_sf\n\nSimple feature collection with 55 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.15107 ymin: 19.29932 xmax: 101.1699 ymax: 24.15907\nGeodetic CRS:  WGS 84\nFirst 10 features:\n             ST ST_PCODE       DT   DT_PCODE        TS  TS_PCODE\n1  Shan (North)   MMR015  Mongmit MMR015D008   Mongmit MMR015017\n2  Shan (South)   MMR014 Taunggyi MMR014D001   Pindaya MMR014006\n3  Shan (South)   MMR014 Taunggyi MMR014D001   Ywangan MMR014007\n4  Shan (South)   MMR014 Taunggyi MMR014D001  Pinlaung MMR014009\n5  Shan (North)   MMR015  Mongmit MMR015D008    Mabein MMR015018\n6  Shan (South)   MMR014 Taunggyi MMR014D001     Kalaw MMR014005\n7  Shan (South)   MMR014 Taunggyi MMR014D001     Pekon MMR014010\n8  Shan (South)   MMR014 Taunggyi MMR014D001  Lawksawk MMR014008\n9  Shan (North)   MMR015  Kyaukme MMR015D003 Nawnghkio MMR015013\n10 Shan (North)   MMR015  Kyaukme MMR015D003   Kyaukme MMR015012\n                         geometry\n1  MULTIPOLYGON (((96.96001 23...\n2  MULTIPOLYGON (((96.7731 21....\n3  MULTIPOLYGON (((96.78483 21...\n4  MULTIPOLYGON (((96.49518 20...\n5  MULTIPOLYGON (((96.66306 24...\n6  MULTIPOLYGON (((96.49518 20...\n7  MULTIPOLYGON (((97.14738 19...\n8  MULTIPOLYGON (((96.94981 22...\n9  MULTIPOLYGON (((96.75648 22...\n10 MULTIPOLYGON (((96.95498 22...\n\n\nNotice that sf.data.frame is conformed to Hardy Wickham’s tidy framework.\nSince shan_sf is conformed to tidy framework, we can also glimpse() to reveal the data type of it’s fields.\n\nglimpse(shan_sf)\n\nRows: 55\nColumns: 7\n$ ST       &lt;chr&gt; \"Shan (North)\", \"Shan (South)\", \"Shan (South)\", \"Shan (South)…\n$ ST_PCODE &lt;chr&gt; \"MMR015\", \"MMR014\", \"MMR014\", \"MMR014\", \"MMR015\", \"MMR014\", \"…\n$ DT       &lt;chr&gt; \"Mongmit\", \"Taunggyi\", \"Taunggyi\", \"Taunggyi\", \"Mongmit\", \"Ta…\n$ DT_PCODE &lt;chr&gt; \"MMR015D008\", \"MMR014D001\", \"MMR014D001\", \"MMR014D001\", \"MMR0…\n$ TS       &lt;chr&gt; \"Mongmit\", \"Pindaya\", \"Ywangan\", \"Pinlaung\", \"Mabein\", \"Kalaw…\n$ TS_PCODE &lt;chr&gt; \"MMR015017\", \"MMR014006\", \"MMR014007\", \"MMR014009\", \"MMR01501…\n$ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((96.96001 23..., MULTIPOLYGON (((…\n\n\n\n\n\nThe csv file will be import using read_csv function of readr package.\nThe code chunks used are shown below:\n\nict &lt;- read_csv (\"data/aspatial/Shan-ICT.csv\")\n\nRows: 55 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): District Pcode, District Name, Township Pcode, Township Name\ndbl (7): Total households, Radio, Television, Land line phone, Mobile phone,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe imported InfoComm variables are extracted from The 2014 Myanmar Population and Housing Census Myanmar. The attribute data set is called ict. It is saved in R’s * tibble data.frame* format.\nThe code chunk below reveal the summary statistics of ict data.frame.\n\nsummary(ict)\n\n District Pcode     District Name      Township Pcode     Township Name     \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n Total households     Radio         Television    Land line phone \n Min.   : 3318    Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711    1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685    Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369    Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471    3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604    Max.   :30176   Max.   :62388   Max.   :6736.0  \n  Mobile phone      Computer      Internet at home\n Min.   :  150   Min.   :  20.0   Min.   :   8.0  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0  \n Median : 3559   Median : 244.0   Median : 316.0  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0  \n\n\nThere are a total of eleven fields and 55 observation in the tibble data.frame.\n\n\n\nThe unit of measurement of the values are number of household. Using these values directly will be bias by the underlying total number of households. In general, the townships with relatively higher total number of households will also have higher number of households owning radio, TV, etc.\nIn order to overcome this problem, we will derive the penetration rate of each ICT variable by using the code chunk below.\n\nict_derived &lt;- ict %&gt;%\n  mutate(`RADIO_PR` = `Radio`/`Total households`*1000) %&gt;%\n  mutate(`TV_PR` = `Television`/`Total households`*1000) %&gt;%\n  mutate(`LLPHONE_PR` = `Land line phone`/`Total households`*1000) %&gt;%\n  mutate(`MPHONE_PR` = `Mobile phone`/`Total households`*1000) %&gt;%\n  mutate(`COMPUTER_PR` = `Computer`/`Total households`*1000) %&gt;%\n  mutate(`INTERNET_PR` = `Internet at home`/`Total households`*1000) %&gt;%\n  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,\n         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,\n         `TT_HOUSEHOLDS`=`Total households`,\n         `RADIO`=`Radio`, `TV`=`Television`, \n         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,\n         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) \n\nLet us review the summary statistics of the newly derived penetration rates using the code chunk below.\n\nsummary(ict_derived)\n\n   DT_PCODE              DT              TS_PCODE              TS           \n Length:55          Length:55          Length:55          Length:55         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n TT_HOUSEHOLDS       RADIO             TV           LLPHONE      \n Min.   : 3318   Min.   :  115   Min.   :  728   Min.   :  20.0  \n 1st Qu.: 8711   1st Qu.: 1260   1st Qu.: 3744   1st Qu.: 266.5  \n Median :13685   Median : 2497   Median : 6117   Median : 695.0  \n Mean   :18369   Mean   : 4487   Mean   :10183   Mean   : 929.9  \n 3rd Qu.:23471   3rd Qu.: 6192   3rd Qu.:13906   3rd Qu.:1082.5  \n Max.   :82604   Max.   :30176   Max.   :62388   Max.   :6736.0  \n     MPHONE         COMPUTER         INTERNET         RADIO_PR     \n Min.   :  150   Min.   :  20.0   Min.   :   8.0   Min.   : 21.05  \n 1st Qu.: 2037   1st Qu.: 121.0   1st Qu.:  88.0   1st Qu.:138.95  \n Median : 3559   Median : 244.0   Median : 316.0   Median :210.95  \n Mean   : 6470   Mean   : 575.5   Mean   : 760.2   Mean   :215.68  \n 3rd Qu.: 7177   3rd Qu.: 507.0   3rd Qu.: 630.5   3rd Qu.:268.07  \n Max.   :48461   Max.   :6705.0   Max.   :9746.0   Max.   :484.52  \n     TV_PR         LLPHONE_PR       MPHONE_PR       COMPUTER_PR    \n Min.   :116.0   Min.   :  2.78   Min.   : 36.42   Min.   : 3.278  \n 1st Qu.:450.2   1st Qu.: 22.84   1st Qu.:190.14   1st Qu.:11.832  \n Median :517.2   Median : 37.59   Median :305.27   Median :18.970  \n Mean   :509.5   Mean   : 51.09   Mean   :314.05   Mean   :24.393  \n 3rd Qu.:606.4   3rd Qu.: 69.72   3rd Qu.:428.43   3rd Qu.:29.897  \n Max.   :842.5   Max.   :181.49   Max.   :735.43   Max.   :92.402  \n  INTERNET_PR     \n Min.   :  1.041  \n 1st Qu.:  8.617  \n Median : 22.829  \n Mean   : 30.644  \n 3rd Qu.: 41.281  \n Max.   :117.985  \n\n\nNotice that six new fields have been added into the data.frame. They are RADIO_PR, TV_PR, LLPHONE_PR, MPHONE_PR, COMPUTER_PR, and INTERNET_PR."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#exploratory-data-analysis-eda",
    "title": "Hands-On Exercise 8",
    "section": "",
    "text": "We can plot the distribution of the variables (i.e. Number of households with radio) by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\nHistogram is useful to identify the overall distribution of the data values (i.e. left skew, right skew or normal distribution)\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\nBoxplot is useful to detect if there are outliers.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nNext, we will also plotting the distribution of the newly derived variables (i.e. Radio penetration rate) by using the code chunk below.\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\n\nggplot(data=ict_derived, \n       aes(x=`RADIO_PR`)) +\n  geom_boxplot(color=\"black\", \n               fill=\"light blue\")\n\n\n\n\n\n\n\n\nWhat can you observed from the distributions reveal in the histogram and boxplot.\nThe code chunks below are used to create the data visualisation. They consist of two main parts. First, we will create the individual histograms using the code chunk below.\n\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n# In the figure below, multiple histograms are plotted to reveal the distribution of the selected variables in the ict_derived data.frame.\n\nNext, the ggarrange() function of ggpubr package is used to group these histograms together.\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can prepare the choropleth map, we need to combine both the geospatial data object (i.e. shan_sf) and aspatial data.frame object (i.e. ict_derived) into one. This will be performed by using the left_join function of dplyr package. The shan_sf simple feature data.frame will be used as the base data object and the ict_derived data.frame will be used as the join table.\nThe code chunks below is used to perform the task. The unique identifier used to join both data objects is TS_PCODE.\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\nThe message above shows that TS_CODE field is the common field used to perform the left-join.\nIt is important to note that there is no new output data been created. Instead, the data fields from ict_derived data frame are now updated into the data frame of shan_sf.\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\n\n\n\n\nTo have a quick look at the distribution of Radio penetration rate of Shan State at township level, a choropleth map will be prepared.\nThe code chunks below are used to prepare the choroplethby using the qtm() function of tmap package.\n\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\n\n\n\n\nIn order to reveal the distribution shown in the choropleth map above are bias to the underlying total number of households at the townships, we will create two choropleth maps, one for the total number of households (i.e. TT_HOUSEHOLDS.map) and one for the total number of household with Radio (RADIO.map) by using the code chunk below.\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\n\n\n\nNotice that the choropleth maps above clearly show that townships with relatively larger number ot households are also showing relatively higher number of radio ownership.\nNow let us plot the choropleth maps showing the dsitribution of total number of households and Radio penetration rate by using the code chunk below.\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)\n\n\n\n\n\n\n\n\nCan you identify the differences?"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#correlation-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#correlation-analysis",
    "title": "Hands-On Exercise 8",
    "section": "",
    "text": "Before we perform cluster analysis, it is important for us to ensure that the cluster variables are not highly correlated.\nIn this section, you will learn how to use corrplot.mixed() function of corrplot package to visualise and analyse the correlation of the input variables.\n\ncluster_vars.cor = cor(ict_derived[,12:17])\ncorrplot.mixed(cluster_vars.cor,\n         lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe correlation plot above shows that COMPUTER_PR and INTERNET_PR are highly correlated. This suggest that only one of them should be used in the cluster analysis instead of both."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#hierarchy-cluster-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#hierarchy-cluster-analysis",
    "title": "Hands-On Exercise 8",
    "section": "",
    "text": "In this section, you will learn how to perform hierarchical cluster analysis. The analysis consists of four major steps:\n\n\nThe code chunk below will be used to extract the clustering variables from the shan_sf simple feature object into data.frame.\n\ncluster_vars &lt;- shan_sf %&gt;%\n  st_set_geometry(NULL) %&gt;%\n  select(\"TS.x\", \"RADIO_PR\", \"TV_PR\", \"LLPHONE_PR\", \"MPHONE_PR\", \"COMPUTER_PR\")\nhead(cluster_vars,10)\n\n        TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\n1    Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\n2    Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\n3    Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\n4   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\n5     Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\n6      Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\n7      Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\n8   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\n9  Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\n10   Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the final clustering variables list does not include variable INTERNET_PR because it is highly correlated with variable COMPUTER_PR.\nNext, we need to change the rows by township name instead of row number by using the code chunk below\n\nrow.names(cluster_vars) &lt;- cluster_vars$\"TS.x\"\nhead(cluster_vars,10)\n\n               TS.x RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit     Mongmit 286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya     Pindaya 417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan     Ywangan 484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung   Pinlaung 231.6499 541.7189   28.54454  249.4903    13.76255\nMabein       Mabein 449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw         Kalaw 280.7624 611.6204   42.06478  408.7951    29.63160\nPekon         Pekon 318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk   Lawksawk 387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio Nawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme     Kyaukme 210.9548 601.1773   39.58267  372.4930    30.94709\n\n\nNotice that the row number has been replaced into the township name.\nNow, we will delete the TS.x field by using the code chunk below.\n\nshan_ict &lt;- select(cluster_vars, c(2:6))\nhead(shan_ict, 10)\n\n          RADIO_PR    TV_PR LLPHONE_PR MPHONE_PR COMPUTER_PR\nMongmit   286.1852 554.1313   35.30618  260.6944    12.15939\nPindaya   417.4647 505.1300   19.83584  162.3917    12.88190\nYwangan   484.5215 260.5734   11.93591  120.2856     4.41465\nPinlaung  231.6499 541.7189   28.54454  249.4903    13.76255\nMabein    449.4903 708.6423   72.75255  392.6089    16.45042\nKalaw     280.7624 611.6204   42.06478  408.7951    29.63160\nPekon     318.6118 535.8494   39.83270  214.8476    18.97032\nLawksawk  387.1017 630.0035   31.51366  320.5686    21.76677\nNawnghkio 349.3359 547.9456   38.44960  323.0201    15.76465\nKyaukme   210.9548 601.1773   39.58267  372.4930    30.94709\n\n\n\n# shan_ict &lt;- read_rds(\"data/rds/shan_ict.rds\")\n\n\n\n\nIn general, multiple variables will be used in cluster analysis. It is not unusual their values range are different. In order to avoid the cluster analysis result is baised to clustering variables with large values, it is useful to standardise the input variables before performing cluster analysis.\n\n\n\nIn the code chunk below, normalize() of heatmaply package is used to stadardisation the clustering variables by using Min-Max method. The summary() is then used to display the summary statistics of the standardised clustering variables.\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2544   1st Qu.:0.4600   1st Qu.:0.1123   1st Qu.:0.2199  \n Median :0.4097   Median :0.5523   Median :0.1948   Median :0.3846  \n Mean   :0.4199   Mean   :0.5416   Mean   :0.2703   Mean   :0.3972  \n 3rd Qu.:0.5330   3rd Qu.:0.6750   3rd Qu.:0.3746   3rd Qu.:0.5608  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR     \n Min.   :0.00000  \n 1st Qu.:0.09598  \n Median :0.17607  \n Mean   :0.23692  \n 3rd Qu.:0.29868  \n Max.   :1.00000  \n\n\nNotice that the values range of the Min-max standardised clustering variables are 0-1 now.\n\n\n\nZ-score standardisation can be performed easily by using scale() of Base R. The code chunk below will be used to stadardisation the clustering variables by using Z-score method.\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.04   -0.06 0.94 -1.85 2.55  4.40  0.48    -0.27\nTV_PR          2 55    0  1   0.05    0.04 0.78 -2.47 2.09  4.56 -0.38    -0.23\nLLPHONE_PR     3 55    0  1  -0.33   -0.15 0.68 -1.19 3.20  4.39  1.37     1.49\nMPHONE_PR      4 55    0  1  -0.05   -0.06 1.01 -1.58 2.40  3.98  0.48    -0.34\nCOMPUTER_PR    5 55    0  1  -0.26   -0.18 0.64 -1.03 3.31  4.34  1.80     2.96\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13\n\n\nNotice the mean and standard deviation of the Z-score standardised clustering variables are 0 and 1 respectively.\nNote: describe() of psych package is used here instead of summary() of Base R because the earlier provides standard deviation.\nWarning: Z-score standardisation method should only be used if we would assume all variables come from some normal distribution.\n\n\n\nBeside reviewing the summary statistics of the standardised clustering variables, it is also a good practice to visualise their distribution graphical.\nThe code chunk below plot the scaled Radio_PR field.\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\nWhat statistical conclusion can you draw from the histograms above?\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\n\n\n\n\n\n\n\n\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using dist() of R.\ndist() supports six distance proximity calculations, they are: euclidean, maximum, manhattan, canberra, binary and minkowski. The default is euclidean proximity matrix.\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\n\nThe code chunk below can then be used to list the content of proxmat for visual inspection.\n\nproxmat\n\n             Mongmit   Pindaya   Ywangan  Pinlaung    Mabein     Kalaw\nPindaya    171.86828                                                  \nYwangan    381.88259 257.31610                                        \nPinlaung    57.46286 208.63519 400.05492                              \nMabein     263.37099 313.45776 529.14689 312.66966                    \nKalaw      160.05997 302.51785 499.53297 181.96406 198.14085          \nPekon       59.61977 117.91580 336.50410  94.61225 282.26877 211.91531\nLawksawk   140.11550 204.32952 432.16535 192.57320 130.36525 140.01101\nNawnghkio   89.07103 180.64047 377.87702 139.27495 204.63154 127.74787\nKyaukme    144.02475 311.01487 505.89191 139.67966 264.88283  79.42225\nMuse       563.01629 704.11252 899.44137 571.58335 453.27410 412.46033\nLaihka     141.87227 298.61288 491.83321 101.10150 345.00222 197.34633\nMongnai    115.86190 258.49346 422.71934  64.52387 358.86053 200.34668\nMawkmai    434.92968 437.99577 397.03752 398.11227 693.24602 562.59200\nKutkai      97.61092 212.81775 360.11861  78.07733 340.55064 204.93018\nMongton    192.67961 283.35574 361.23257 163.42143 425.16902 267.87522\nMongyai    256.72744 287.41816 333.12853 220.56339 516.40426 386.74701\nMongkaing  503.61965 481.71125 364.98429 476.29056 747.17454 625.24500\nLashio     251.29457 398.98167 602.17475 262.51735 231.28227 106.69059\nMongpan    193.32063 335.72896 483.68125 192.78316 301.52942 114.69105\nMatman     401.25041 354.39039 255.22031 382.40610 637.53975 537.63884\nTachileik  529.63213 635.51774 807.44220 555.01039 365.32538 373.64459\nNarphan    406.15714 474.50209 452.95769 371.26895 630.34312 463.53759\nMongkhet   349.45980 391.74783 408.97731 305.86058 610.30557 465.52013\nHsipaw     118.18050 245.98884 388.63147  76.55260 366.42787 212.36711\nMonghsat   214.20854 314.71506 432.98028 160.44703 470.48135 317.96188\nMongmao    242.54541 402.21719 542.85957 217.58854 384.91867 195.18913\nNansang    104.91839 275.44246 472.77637  85.49572 287.92364 124.30500\nLaukkaing  568.27732 726.85355 908.82520 563.81750 520.67373 427.77791\nPangsang   272.67383 428.24958 556.82263 244.47146 418.54016 224.03998\nNamtu      179.62251 225.40822 444.66868 170.04533 366.16094 307.27427\nMonghpyak  177.76325 221.30579 367.44835 222.20020 212.69450 167.08436\nKonkyan    403.39082 500.86933 528.12533 365.44693 613.51206 444.75859\nMongping   265.12574 310.64850 337.94020 229.75261 518.16310 375.64739\nHopong     136.93111 223.06050 352.85844  98.14855 398.00917 264.16294\nNyaungshwe  99.38590 216.52463 407.11649 138.12050 210.21337  95.66782\nHsihseng   131.49728 172.00796 342.91035 111.61846 381.20187 287.11074\nMongla     384.30076 549.42389 728.16301 372.59678 406.09124 260.26411\nHseni      189.37188 337.98982 534.44679 204.47572 213.61240  38.52842\nKunlong    224.12169 355.47066 531.63089 194.76257 396.61508 273.01375\nHopang     281.05362 443.26362 596.19312 265.96924 368.55167 185.14704\nNamhkan    386.02794 543.81859 714.43173 382.78835 379.56035 246.39577\nKengtung   246.45691 385.68322 573.23173 263.48638 219.47071  88.29335\nLangkho    164.26299 323.28133 507.78892 168.44228 253.84371  67.19580\nMonghsu    109.15790 198.35391 340.42789  80.86834 367.19820 237.34578\nTaunggyi   399.84278 503.75471 697.98323 429.54386 226.24011 252.26066\nPangwaun   381.51246 512.13162 580.13146 356.37963 523.44632 338.35194\nKyethi     202.92551 175.54012 287.29358 189.47065 442.07679 360.17247\nLoilen     145.48666 293.61143 469.51621  91.56527 375.06406 217.19877\nManton     430.64070 402.42888 306.16379 405.83081 674.01120 560.16577\nMongyang   309.51302 475.93982 630.71590 286.03834 411.88352 233.56349\nKunhing    173.50424 318.23811 449.67218 141.58836 375.82140 197.63683\nMongyawng  214.21738 332.92193 570.56521 235.55497 193.49994 173.43078\nTangyan    195.92520 208.43740 324.77002 169.50567 448.59948 348.06617\nNamhsan    237.78494 228.41073 286.16305 214.33352 488.33873 385.88676\n               Pekon  Lawksawk Nawnghkio   Kyaukme      Muse    Laihka\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk   157.51129                                                  \nNawnghkio  113.15370  90.82891                                        \nKyaukme    202.12206 186.29066 157.04230                              \nMuse       614.56144 510.13288 533.68806 434.75768                    \nLaihka     182.23667 246.74469 211.88187 128.24979 526.65211          \nMongnai    151.60031 241.71260 182.21245 142.45669 571.97975 100.53457\nMawkmai    416.00669 567.52693 495.15047 512.02846 926.93007 429.96554\nKutkai     114.98048 224.64646 147.44053 170.93318 592.90743 144.67198\nMongton    208.14888 311.07742 225.81118 229.28509 634.71074 212.07320\nMongyai    242.52301 391.26989 319.57938 339.27780 763.91399 264.13364\nMongkaing  480.23965 625.18712 546.69447 586.05094 995.66496 522.96309\nLashio     303.80011 220.75270 230.55346 129.95255 313.15288 238.64533\nMongpan    243.30037 228.54223 172.84425 110.37831 447.49969 210.76951\nMatman     368.25761 515.39711 444.05061 505.52285 929.11283 443.25453\nTachileik  573.39528 441.82621 470.45533 429.15493 221.19950 549.08985\nNarphan    416.84901 523.69580 435.59661 420.30003 770.40234 392.32592\nMongkhet   342.08722 487.41102 414.10280 409.03553 816.44931 324.97428\nHsipaw     145.37542 249.35081 176.09570 163.95741 591.03355 128.42987\nMonghsat   225.64279 352.31496 289.83220 253.25370 663.76026 158.93517\nMongmao    293.70625 314.64777 257.76465 146.09228 451.82530 185.99082\nNansang    160.37607 188.78869 151.13185  60.32773 489.35308  78.78999\nLaukkaing  624.82399 548.83928 552.65554 428.74978 149.26996 507.39700\nPangsang   321.81214 345.91486 287.10769 175.35273 460.24292 214.19291\nNamtu      165.02707 260.95300 257.52713 270.87277 659.16927 185.86794\nMonghpyak  190.93173 142.31691  93.03711 217.64419 539.43485 293.22640\nKonkyan    421.48797 520.31264 439.34272 393.79911 704.86973 351.75354\nMongping   259.68288 396.47081 316.14719 330.28984 744.44948 272.82761\nHopong     138.86577 274.91604 204.88286 218.84211 648.68011 157.48857\nNyaungshwe 139.31874 104.17830  43.26545 126.50414 505.88581 201.71653\nHsihseng   105.30573 257.11202 209.88026 250.27059 677.66886 175.89761\nMongla     441.20998 393.18472 381.40808 241.58966 256.80556 315.93218\nHseni      243.98001 171.50398 164.05304  81.20593 381.30567 204.49010\nKunlong    249.36301 318.30406 285.04608 215.63037 547.24297 122.68682\nHopang     336.38582 321.16462 279.84188 154.91633 377.44407 230.78652\nNamhkan    442.77120 379.41126 367.33575 247.81990 238.67060 342.43665\nKengtung   297.67761 209.38215 208.29647 136.23356 330.08211 258.23950\nLangkho    219.21623 190.30257 156.51662  51.67279 413.64173 160.94435\nMonghsu    113.84636 242.04063 170.09168 200.77712 633.21624 163.28926\nTaunggyi   440.66133 304.96838 344.79200 312.60547 250.81471 425.36916\nPangwaun   423.81347 453.02765 381.67478 308.31407 541.97887 351.78203\nKyethi     162.43575 317.74604 267.21607 328.14177 757.16745 255.83275\nLoilen     181.94596 265.29318 219.26405 146.92675 560.43400  59.69478\nManton     403.82131 551.13000 475.77296 522.86003 941.49778 458.30232\nMongyang   363.58788 363.37684 323.32123 188.59489 389.59919 229.71502\nKunhing    213.46379 278.68953 206.15773 145.00266 533.00162 142.03682\nMongyawng  248.43910 179.07229 220.61209 181.55295 422.37358 211.99976\nTangyan    167.79937 323.14701 269.07880 306.78359 736.93741 224.29176\nNamhsan    207.16559 362.84062 299.74967 347.85944 778.52971 273.79672\n             Mongnai   Mawkmai    Kutkai   Mongton   Mongyai Mongkaing\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai    374.50873                                                  \nKutkai      91.15307 364.95519                                        \nMongton    131.67061 313.35220 107.06341                              \nMongyai    203.23607 178.70499 188.94166 159.79790                    \nMongkaing  456.00842 133.29995 428.96133 365.50032 262.84016          \nLashio     270.86983 638.60773 289.82513 347.11584 466.36472 708.65819\nMongpan    178.09554 509.99632 185.18173 200.31803 346.39710 563.56780\nMatman     376.33870 147.83545 340.86349 303.04574 186.95158 135.51424\nTachileik  563.95232 919.38755 568.99109 608.76740 750.29555 967.14087\nNarphan    329.31700 273.75350 314.27683 215.97925 248.82845 285.65085\nMongkhet   275.76855 115.58388 273.91673 223.22828 104.98924 222.60577\nHsipaw      52.68195 351.34601  51.46282  90.69766 177.33790 423.77868\nMonghsat   125.25968 275.09705 154.32012 150.98053 127.35225 375.60376\nMongmao    188.29603 485.52853 204.69232 206.57001 335.61300 552.31959\nNansang     92.79567 462.41938 130.04549 199.58124 288.55962 542.16609\nLaukkaing  551.56800 882.51110 580.38112 604.66190 732.68347 954.11795\nPangsang   204.25746 484.14757 228.33583 210.77938 343.30638 548.40662\nNamtu      209.35473 427.95451 225.28268 308.71751 278.02761 525.04057\nMonghpyak  253.26470 536.71695 206.61627 258.04282 370.01575 568.21089\nKonkyan    328.82831 339.01411 310.60810 248.25265 287.87384 380.92091\nMongping   202.99615 194.31049 182.75266 119.86993  65.38727 257.18572\nHopong      91.53795 302.84362  73.45899 106.21031 124.62791 379.37916\nNyaungshwe 169.63695 502.99026 152.15482 219.72196 327.13541 557.32112\nHsihseng   142.36728 329.29477 128.21054 194.64317 162.27126 411.59788\nMongla     354.10985 686.88950 388.40984 411.06668 535.28615 761.48327\nHseni      216.81639 582.53670 229.37894 286.75945 408.23212 648.04408\nKunlong    202.92529 446.53763 204.54010 270.02165 299.36066 539.91284\nHopang     243.00945 561.24281 263.31986 273.50305 408.73288 626.17673\nNamhkan    370.05669 706.47792 392.48568 414.53594 550.62819 771.39688\nKengtung   272.28711 632.54638 279.19573 329.38387 460.39706 692.74693\nLangkho    174.67678 531.08019 180.51419 236.70878 358.95672 597.42714\nMonghsu     84.11238 332.07962  62.60859 107.04894 154.86049 400.71816\nTaunggyi   448.55282 810.74692 450.33382 508.40925 635.94105 866.21117\nPangwaun   312.13429 500.68857 321.80465 257.50434 394.07696 536.95736\nKyethi     210.50453 278.85535 184.23422 222.52947 137.79420 352.06533\nLoilen      58.41263 388.73386 131.56529 176.16001 224.79239 482.18190\nManton     391.54062 109.08779 361.82684 310.20581 195.59882  81.75337\nMongyang   260.39387 558.83162 285.33223 295.60023 414.31237 631.91325\nKunhing    110.55197 398.43973 108.84990 114.03609 238.99570 465.03971\nMongyawng  275.77546 620.04321 281.03383 375.22688 445.78964 700.98284\nTangyan    180.37471 262.66006 166.61820 198.88460 109.08506 348.56123\nNamhsan    218.10003 215.19289 191.32762 196.76188  77.35900 288.66231\n              Lashio   Mongpan    Matman Tachileik   Narphan  Mongkhet\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan    172.33279                                                  \nMatman     628.11049 494.81014                                        \nTachileik  311.95286 411.03849 890.12935                              \nNarphan    525.63854 371.13393 312.05193 760.29566                    \nMongkhet   534.44463 412.17123 203.02855 820.50164 217.28718          \nHsipaw     290.86435 179.52054 344.45451 576.18780 295.40170 253.80950\nMonghsat   377.86793 283.30992 313.59911 677.09508 278.21548 167.98445\nMongmao    214.23677 131.59966 501.59903 472.95568 331.42618 375.35820\nNansang    184.47950 144.77393 458.06573 486.77266 398.13308 360.99219\nLaukkaing  334.65738 435.58047 903.72094 325.06329 708.82887 769.06406\nPangsang   236.72516 140.23910 506.29940 481.31907 316.30314 375.58139\nNamtu      365.88437 352.91394 416.65397 659.56458 494.36143 355.99713\nMonghpyak  262.09281 187.85699 470.46845 444.04411 448.40651 462.63265\nKonkyan    485.51312 365.87588 392.40306 730.92980 158.82353 254.24424\nMongping   454.52548 318.47482 201.65224 727.08969 188.64567 113.80917\nHopong     345.31042 239.43845 291.84351 632.45718 294.40441 212.99485\nNyaungshwe 201.58191 137.29734 460.91883 445.81335 427.94086 417.08639\nHsihseng   369.00833 295.87811 304.02806 658.87060 377.52977 256.70338\nMongla     179.95877 253.20001 708.17595 347.33155 531.46949 574.40292\nHseni       79.41836 120.66550 564.64051 354.90063 474.12297 481.88406\nKunlong    295.23103 288.03320 468.27436 595.70536 413.07823 341.68641\nHopang     170.63913 135.62913 573.55355 403.82035 397.85908 451.51070\nNamhkan    173.27153 240.34131 715.42102 295.91660 536.85519 596.19944\nKengtung    59.85893 142.21554 613.01033 295.90429 505.40025 531.35998\nLangkho    115.18145  94.98486 518.86151 402.33622 420.65204 428.08061\nMonghsu    325.71557 216.25326 308.13805 605.02113 311.92379 247.73318\nTaunggyi   195.14541 319.81385 778.45810 150.84117 684.20905 712.80752\nPangwaun   362.45608 232.52209 523.43600 540.60474 264.64997 407.02947\nKyethi     447.10266 358.89620 233.83079 728.87329 374.90376 233.25039\nLoilen     268.92310 207.25000 406.56282 573.75476 354.79137 284.76895\nManton     646.66493 507.96808  59.52318 910.23039 280.26395 181.33894\nMongyang   209.33700 194.93467 585.61776 448.79027 401.39475 445.40621\nKunhing    255.10832 137.85278 403.66587 532.26397 281.62645 292.49814\nMongyawng  172.70139 275.15989 601.80824 432.10118 572.76394 522.91815\nTangyan    429.84475 340.39128 242.78233 719.84066 348.84991 201.49393\nNamhsan    472.04024 364.77086 180.09747 754.03913 316.54695 170.90848\n              Hsipaw  Monghsat   Mongmao   Nansang Laukkaing  Pangsang\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat   121.78922                                                  \nMongmao    185.99483 247.17708                                        \nNansang    120.24428 201.92690 164.99494                              \nLaukkaing  569.06099 626.44910 404.00848 480.60074                    \nPangsang   205.04337 256.37933  57.60801 193.36162 408.04016          \nNamtu      229.44658 231.78673 365.03882 217.61884 664.06286 392.97391\nMonghpyak  237.67919 356.84917 291.88846 227.52638 565.84279 315.11651\nKonkyan    296.74316 268.25060 281.87425 374.70456 635.92043 274.81900\nMongping   168.92101 140.95392 305.57166 287.36626 708.13447 308.33123\nHopong      62.86179 100.45714 244.16253 167.66291 628.48557 261.51075\nNyaungshwe 169.92664 286.37238 230.45003 131.18943 520.24345 257.77823\nHsihseng   136.54610 153.49551 311.98001 193.53779 670.74564 335.52974\nMongla     373.47509 429.00536 216.24705 289.45119 202.55831 217.88123\nHseni      231.48538 331.22632 184.67099 136.45492 391.74585 214.66375\nKunlong    205.10051 202.31862 224.43391 183.01388 521.88657 258.49342\nHopang     248.72536 317.64824  78.29342 196.47091 331.67199  92.57672\nNamhkan    382.79302 455.10875 223.32205 302.89487 196.46063 231.38484\nKengtung   284.08582 383.72138 207.58055 193.67980 351.48520 229.85484\nLangkho    183.05109 279.52329 134.50170  99.39859 410.41270 167.65920\nMonghsu     58.55724 137.24737 242.43599 153.59962 619.01766 260.52971\nTaunggyi   462.31183 562.88102 387.33906 365.04897 345.98041 405.59730\nPangwaun   298.12447 343.53898 187.40057 326.12960 470.63605 157.48757\nKyethi     195.17677 190.50609 377.89657 273.02385 749.99415 396.89963\nLoilen      98.04789 118.65144 190.26490  94.23028 535.57527 207.94433\nManton     359.60008 317.15603 503.79786 476.55544 907.38406 504.75214\nMongyang   267.10497 312.64797  91.06281 218.49285 326.19219 108.37735\nKunhing     90.77517 165.38834 103.91040 128.20940 500.41640 123.18870\nMongyawng  294.70967 364.40429 296.40789 191.11990 454.80044 336.16703\nTangyan    167.69794 144.59626 347.14183 249.70235 722.40954 364.76893\nNamhsan    194.47928 169.56962 371.71448 294.16284 760.45960 385.65526\n               Namtu Monghpyak   Konkyan  Mongping    Hopong Nyaungshwe\nPindaya                                                                \nYwangan                                                                \nPinlaung                                                               \nMabein                                                                 \nKalaw                                                                  \nPekon                                                                  \nLawksawk                                                               \nNawnghkio                                                              \nKyaukme                                                                \nMuse                                                                   \nLaihka                                                                 \nMongnai                                                                \nMawkmai                                                                \nKutkai                                                                 \nMongton                                                                \nMongyai                                                                \nMongkaing                                                              \nLashio                                                                 \nMongpan                                                                \nMatman                                                                 \nTachileik                                                              \nNarphan                                                                \nMongkhet                                                               \nHsipaw                                                                 \nMonghsat                                                               \nMongmao                                                                \nNansang                                                                \nLaukkaing                                                              \nPangsang                                                               \nNamtu                                                                  \nMonghpyak  346.57799                                                   \nKonkyan    478.37690 463.39594                                         \nMongping   321.66441 354.76537 242.02901                               \nHopong     206.82668 267.95563 304.49287 134.00139                     \nNyaungshwe 271.41464 103.97300 432.35040 319.32583 209.32532           \nHsihseng   131.89940 285.37627 383.49700 199.64389  91.65458  225.80242\nMongla     483.49434 408.03397 468.09747 512.61580 432.31105  347.60273\nHseni      327.41448 200.26876 448.84563 395.58453 286.41193  130.86310\nKunlong    233.60474 357.44661 329.11433 309.05385 219.06817  285.13095\nHopang     408.24516 304.26577 348.18522 379.27212 309.77356  247.19891\nNamhkan    506.32466 379.50202 481.59596 523.74815 444.13246  333.32428\nKengtung   385.33554 221.47613 474.82621 442.80821 340.47382  177.75714\nLangkho    305.03473 200.27496 386.95022 343.96455 239.63685  128.26577\nMonghsu    209.64684 232.17823 331.72187 158.90478  43.40665  173.82799\nTaunggyi   518.72748 334.17439 650.56905 621.53039 513.76415  325.09619\nPangwaun   517.03554 381.95144 263.97576 340.37881 346.00673  352.92324\nKyethi     186.90932 328.16234 400.10989 187.43974 136.49038  288.06872\nLoilen     194.24075 296.99681 334.19820 231.99959 124.74445  206.40432\nManton     448.58230 502.20840 366.66876 200.48082 310.58885  488.79874\nMongyang   413.26052 358.17599 329.39338 387.80686 323.35704  294.29500\nKunhing    296.43996 250.74435 253.74202 212.59619 145.15617  189.97131\nMongyawng  262.24331 285.56475 522.38580 455.59190 326.59925  218.12104\nTangyan    178.69483 335.26416 367.46064 161.67411 106.82328  284.14692\nNamhsan    240.95555 352.70492 352.20115 130.23777 132.70541  315.91750\n            Hsihseng    Mongla     Hseni   Kunlong    Hopang   Namhkan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla     478.66210                                                  \nHseni      312.74375 226.82048                                        \nKunlong    231.85967 346.46200 276.19175                              \nHopang     370.01334 147.02444 162.80878 271.34451                    \nNamhkan    492.09476  77.21355 212.11323 375.73885 146.18632          \nKengtung   370.72441 202.45004  66.12817 317.14187 164.29921 175.63015\nLangkho    276.27441 229.01675  66.66133 224.52741 134.24847 224.40029\nMonghsu     97.82470 424.51868 262.28462 239.89665 301.84458 431.32637\nTaunggyi   528.14240 297.09863 238.19389 471.29032 329.95252 257.29147\nPangwaun   433.06326 319.18643 330.70182 392.45403 206.98364 310.44067\nKyethi      84.04049 556.02500 388.33498 298.55859 440.48114 567.86202\nLoilen     158.84853 338.67408 227.10984 166.53599 242.89326 364.90647\nManton     334.87758 712.51416 584.63341 479.76855 577.52046 721.86149\nMongyang   382.59743 146.66661 210.19929 247.22785  69.25859 167.72448\nKunhing    220.15490 306.47566 206.47448 193.77551 172.96164 314.92119\nMongyawng  309.51462 315.57550 173.86004 240.39800 290.51360 321.21112\nTangyan     70.27241 526.80849 373.07575 268.07983 412.22167 542.64078\nNamhsan    125.74240 564.02740 411.96125 310.40560 440.51555 576.42717\n            Kengtung   Langkho   Monghsu  Taunggyi  Pangwaun    Kyethi\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho    107.16213                                                  \nMonghsu    316.91914 221.84918                                        \nTaunggyi   186.28225 288.27478 486.91951                              \nPangwaun   337.48335 295.38434 343.38498 497.61245                    \nKyethi     444.26274 350.91512 146.61572 599.57407 476.62610          \nLoilen     282.22935 184.10672 131.55208 455.91617 331.69981 232.32965\nManton     631.99123 535.95620 330.76503 803.08034 510.79265 272.03299\nMongyang   217.08047 175.35413 323.95988 374.58247 225.25026 453.86726\nKunhing    245.95083 146.38284 146.78891 429.98509 229.09986 278.95182\nMongyawng  203.87199 186.11584 312.85089 287.73864 475.33116 387.71518\nTangyan    429.95076 332.02048 127.42203 592.65262 447.05580  47.79331\nNamhsan    466.20497 368.20978 153.22576 631.49232 448.58030  68.67929\n              Loilen    Manton  Mongyang   Kunhing Mongyawng   Tangyan\nPindaya                                                               \nYwangan                                                               \nPinlaung                                                              \nMabein                                                                \nKalaw                                                                 \nPekon                                                                 \nLawksawk                                                              \nNawnghkio                                                             \nKyaukme                                                               \nMuse                                                                  \nLaihka                                                                \nMongnai                                                               \nMawkmai                                                               \nKutkai                                                                \nMongton                                                               \nMongyai                                                               \nMongkaing                                                             \nLashio                                                                \nMongpan                                                               \nMatman                                                                \nTachileik                                                             \nNarphan                                                               \nMongkhet                                                              \nHsipaw                                                                \nMonghsat                                                              \nMongmao                                                               \nNansang                                                               \nLaukkaing                                                             \nPangsang                                                              \nNamtu                                                                 \nMonghpyak                                                             \nKonkyan                                                               \nMongping                                                              \nHopong                                                                \nNyaungshwe                                                            \nHsihseng                                                              \nMongla                                                                \nHseni                                                                 \nKunlong                                                               \nHopang                                                                \nNamhkan                                                               \nKengtung                                                              \nLangkho                                                               \nMonghsu                                                               \nTaunggyi                                                              \nPangwaun                                                              \nKyethi                                                                \nLoilen                                                                \nManton     419.06087                                                  \nMongyang   246.76592 585.70558                                        \nKunhing    130.39336 410.49230 188.89405                              \nMongyawng  261.75211 629.43339 304.21734 295.35984                    \nTangyan    196.60826 271.82672 421.06366 249.74161 377.52279          \nNamhsan    242.15271 210.48485 450.97869 270.79121 430.02019  63.67613\n\n\n\n\n\nIn R, there are several packages provide hierarchical clustering function. In this hands-on exercise, hclust() of R stats will be used.\nhclust() employed agglomeration method to compute the cluster. Eight clustering algorithms are supported, they are: ward.D, ward.D2, single, complete, average(UPGMA), mcquitty(WPGMA), median(WPGMC) and centroid(UPGMC).\nThe code chunk below performs hierarchical cluster analysis using ward.D method. The hierarchical clustering output is stored in an object of class hclust which describes the tree produced by the clustering process.\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\n\nWe can then plot the tree by using plot() of R Graphics as shown in the code chunk below.\n\nplot(hclust_ward, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\nOne of the challenge in performing hierarchical clustering is to identify stronger clustering structures. The issue can be solved by using use agnes() function of cluster package. It functions like hclus(), however, with the agnes() function you can also get the agglomerative coefficient, which measures the amount of clustering structure found (values closer to 1 suggest strong clustering structure).\nThe code chunk below will be used to compute the agglomerative coefficients of all hierarchical clustering algorithms.\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8131144 0.6628705 0.8950702 0.9427730 \n\n\nWith reference to the output above, we can see that Ward’s method provides the strongest clustering structure among the four methods assessed. Hence, in the subsequent analysis, only Ward’s method will be used.\n\n\n\nAnother technical challenge face by data analyst in performing clustering analysis is to determine the optimal clusters to retain.\nThere are three commonly used methods to determine the optimal clusters, they are:\n\nElbow Method\nAverage Silhouette Method\nGap Statistic Method\n\n\n\nThe gap statistic compares the total within intra-cluster variation for different values of k with their expected values under null reference distribution of the data. The estimate of the optimal clusters will be value that maximize the gap statistic (i.e., that yields the largest gap statistic). This means that the clustering structure is far away from the random uniform distribution of points.\nTo compute the gap statistic, clusGap() of cluster package will be used.\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.407129 8.680794 0.2736651 0.04460994\n [2,] 8.130029 8.350712 0.2206824 0.03880130\n [3,] 7.992265 8.202550 0.2102844 0.03362652\n [4,] 7.862224 8.080655 0.2184311 0.03784781\n [5,] 7.756461 7.978022 0.2215615 0.03897071\n [6,] 7.665594 7.887777 0.2221833 0.03973087\n [7,] 7.590919 7.806333 0.2154145 0.04054939\n [8,] 7.526680 7.731619 0.2049390 0.04198644\n [9,] 7.458024 7.660795 0.2027705 0.04421874\n[10,] 7.377412 7.593858 0.2164465 0.04540947\n\n\nAlso note that the hcut function used is from factoextra package.\nNext, we can visualise the plot by using fviz_gap_stat() of factoextra package.\n\nfviz_gap_stat(gap_stat)\n\n\n\n\n\n\n\n\nWith reference to the gap statistic graph above, the recommended number of cluster to retain is 1. However, it is not logical to retain only one cluster. By examine the gap statistic graph, the 6-cluster gives the largest gap statistic and should be the next best cluster to pick.\nNote: In addition to these commonly used approaches, the NbClust package, published by Charrad et al., 2014, provides 30 indices for determining the relevant number of clusters and proposes to users the best clustering scheme from the different results obtained by varying all combinations of number of clusters, distance measures, and clustering methods.\n\n\n\n\nIn the dendrogram displayed above, each leaf corresponds to one observation. As we move up the tree, observations that are similar to each other are combined into branches, which are themselves fused at a higher height.\nThe height of the fusion, provided on the vertical axis, indicates the (dis)similarity between two observations. The higher the height of the fusion, the less similar the observations are. Note that, conclusions about the proximity of two observations can be drawn only based on the height where branches containing those two observations first are fused. We cannot use the proximity of two observations along the horizontal axis as a criteria of their similarity.\nIt’s also possible to draw the dendrogram with a border around the selected clusters by using rect.hclust() of R stats. The argument border is used to specify the border colors for the rectangles.\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\n\n\n\nIn this section, we will learn how to perform visually-driven hiearchical clustering analysis by using heatmaply package.\nWith heatmaply, we are able to build both highly interactive cluster heatmap or static cluster heatmap.\n\n\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform shan_ict data frame into a data matrix.\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\n\n\n\n\nIn the code chunk below, the heatmaply() of heatmaply package is used to build an interactive cluster heatmap.\n\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )\n\n\n\n\n\n\n\n\n\nWith closed examination of the dendragram above, we have decided to retain six clusters.\ncutree() of R Base will be used in the code chunk below to derive a 6-cluster model.\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=6))\n\nThe output is called groups. It is a list object.\nIn order to visualise the clusters, the groups object need to be appended onto shan_sf simple feature object.\nThe code chunk below form the join in three steps:\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;% rename(CLUSTER=as.matrix.groups.)the groups list object will be converted into a matrix;\ncbind() is used to append groups matrix onto shan_sf to produce an output simple feature object called shan_sf_cluster; and\nrename of dplyr package is used to rename as.matrix.groups field as CLUSTER.\n\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nNext, qtm() of tmap package is used to plot the choropleth map showing the cluster formed.\n\nqtm(shan_sf_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\nThe choropleth map above reveals the clusters are very fragmented. The is one of the major limitation when non-spatial clustering algorithm such as hierarchical cluster analysis method is used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#spatially-constrained-clustering-skater-approach",
    "href": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#spatially-constrained-clustering-skater-approach",
    "title": "Hands-On Exercise 8",
    "section": "",
    "text": "In this section, you will learn how to derive spatially constrained cluster by using skater() method of spdep package.\n\n\nFirst, we need to convert shan_sf into SpatialPolygonsDataFrame. This is because SKATER function only support sp objects such as SpatialPolygonDataFrame.\nThe code chunk below uses as_Spatial() of sf package to convert shan_sf into a SpatialPolygonDataFrame called shan_sp.\n\nshan_sp &lt;- as_Spatial(shan_sf)\n\n\n\n\nNext, poly2nd() of spdep package will be used to compute the neighbours list from polygon list.\n\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\nWe can plot the neighbours list on shan_sp by using the code chunk below. Since we now can plot the community area boundaries as well, we plot this graph on top of the map. The first plot command gives the boundaries. This is followed by the plot of the neighbor list object, with coordinates applied to the original SpatialPolygonDataFrame (Shan state township boundaries) to extract the centroids of the polygons. These are used as the nodes for the graph representation. We also set the color to blue and specify add=TRUE to plot the network on top of the boundaries.\n\ncoords &lt;- st_coordinates(\n  st_centroid(st_geometry(shan_sf)))\n\n\nplot(st_geometry(shan_sf), \n     border=grey(.5))\nplot(shan.nb,\n     coords, \n     col=\"blue\", \n     add=TRUE)\n\n\n\n\n\n\n\n\nNote that if you plot the network first and then the boundaries, some of the areas will be clipped. This is because the plotting area is determined by the characteristics of the first plot. In this example, because the boundary map extends further than the graph, we plot it first.\n\n\n\n\n\nNext, nbcosts() of spdep package is used to compute the cost of each edge. It is the distance between it nodes. This function compute this distance using a data.frame with observations vector in each node.\nThe code chunk below is used to compute the cost of each edge.\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\nFor each observation, this gives the pairwise dissimilarity between its values on the five variables and the values for the neighbouring observation (from the neighbour list). Basically, this is the notion of a generalised weight for a spatial weights matrix.\nNext, We will incorporate these costs into a weights object in the same way as we did in the calculation of inverse of distance weights. In other words, we convert the neighbour list to a list weights object by specifying the just computed lcosts as the weights.\nIn order to achieve this, nb2listw() of spdep package is used as shown in the code chunk below.\nNote that we specify the style as B to make sure the cost values are not row-standardised.\n\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\n\n\nThe minimum spanning tree is computed by mean of the mstree() of spdep package as shown in the code chunk below.\n\nshan.mst &lt;- mstree(shan.w)\n\nAfter computing the MST, we can check its class and dimension by using the code chunk below.\n\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\n\n\ndim(shan.mst)\n\n[1] 54  3\n\n\nNote that the dimension is 54 and not 55. This is because the minimum spanning tree consists on n-1 edges (links) in order to traverse all the nodes.\nWe can display the content of shan.mst by using head() as shown in the code chunk below.\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   54   48  47.79331\n[2,]   54   17 109.08506\n[3,]   54   45 127.42203\n[4,]   45   52 146.78891\n[5,]   52   13 110.55197\n[6,]   13   28  92.79567\n\n\nThe plot method for the MST include a way to show the observation numbers of the nodes in addition to the edge. As before, we plot this together with the township boundaries. We can see how the initial neighbour list is simplified to just one edge connecting each of the nodes, while passing through all the nodes.\n\nplot(st_geometry(shan_sf), \n                 border=gray(.5))\nplot.mst(shan.mst, \n         coords, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below compute the spatially constrained cluster using skater() of spdep package.\n\nclust6 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 5)\n\nThe skater() takes three mandatory arguments: - the first two columns of the MST matrix (i.e. not the cost), - the data matrix (to update the costs as units are being grouped), and - the number of cuts. Note: It is set to one less than the number of clusters. So, the value specified is not the number of clusters, but the number of cuts in the graph, one less than the number of clusters.\nThe result of the skater() is an object of class skater. We can examine its contents by using the code chunk below.\n\nstr(clust6)\n\nList of 8\n $ groups      : num [1:55] 3 3 6 3 3 3 3 3 3 3 ...\n $ edges.groups:List of 6\n  ..$ :List of 3\n  .. ..$ node: num [1:22] 13 48 54 55 45 37 34 16 25 52 ...\n  .. ..$ edge: num [1:21, 1:3] 48 55 54 37 34 16 45 25 13 13 ...\n  .. ..$ ssw : num 3423\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 47 27 53 38 42 15 41 51 43 32 ...\n  .. ..$ edge: num [1:17, 1:3] 53 15 42 38 41 51 15 27 15 43 ...\n  .. ..$ ssw : num 3759\n  ..$ :List of 3\n  .. ..$ node: num [1:11] 2 6 8 1 36 4 10 9 46 5 ...\n  .. ..$ edge: num [1:10, 1:3] 6 1 8 36 4 6 8 10 10 9 ...\n  .. ..$ ssw : num 1458\n  ..$ :List of 3\n  .. ..$ node: num [1:2] 44 20\n  .. ..$ edge: num [1, 1:3] 44 20 95\n  .. ..$ ssw : num 95\n  ..$ :List of 3\n  .. ..$ node: num 23\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n  ..$ :List of 3\n  .. ..$ node: num 3\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:6] 1 2 3 4 5 6\n $ ssto        : num 12613\n $ ssw         : num [1:6] 12613 10977 9962 9540 9123 ...\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\n\nThe most interesting component of this list structure is the groups vector containing the labels of the cluster to which each observation belongs (as before, the label itself is arbitary). This is followed by a detailed summary for each of the clusters in the edges.groups list. Sum of squares measures are given as ssto for the total and ssw to show the effect of each of the cuts on the overall criterion.\nWe can check the cluster assignment by using the conde chunk below.\n\nccs6 &lt;- clust6$groups\nccs6\n\n [1] 3 3 6 3 3 3 3 3 3 3 2 1 1 1 2 1 1 1 2 4 1 2 5 1 1 1 2 1 2 2 1 2 2 1 1 3 1 2\n[39] 2 2 2 2 2 4 1 3 2 1 1 1 2 1 2 1 1\n\n\nWe can find out how many observations are in each cluster by means of the table command. Parenthetially, we can also find this as the dimension of each vector in the lists contained in edges.groups. For example, the first list has node with dimension 12, which is also the number of observations in the first cluster.\n\ntable(ccs6)\n\nccs6\n 1  2  3  4  5  6 \n22 18 11  2  1  1 \n\n\nLastly, we can also plot the pruned tree that shows the five clusters on top of the townshop area.\n\nplot(st_geometry(shan_sf), \n     border=gray(.5))\nplot(clust6, \n     coords, \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below is used to plot the newly derived clusters by using SKATER method.\n\ngroups_mat &lt;- as.matrix(clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\n\n\n\n\n\nFor easy comparison, it will be better to place both the hierarchical clustering and spatially constrained hierarchical clustering maps next to each other.\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#spatially-constrained-clustering-clustgeo-method",
    "href": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#spatially-constrained-clustering-clustgeo-method",
    "title": "Hands-On Exercise 8",
    "section": "",
    "text": "In this section, you will gain hands-on experience on using functions provided by ClustGeo package to perform non-spatially constrained hierarchical cluster analysis and spatially constrained cluster analysis.\n\n\nClustGeo package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called hclustgeo() including spatial/geographical constraints.\nIn the nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between [0, 1]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the attribute/clustering variable space. D1, on the other hand, gives the dissimilarities in the constraint space. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.\nThe idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called choicealpha().\n\n\n\nClustGeo package provides function called hclustgeo() to perform a typical Ward-like hierarchical clustering just like hclust() you learned in previous section.\nTo perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 6, \n            border = 2:5)\n\n\n\n\n\n\n\n\nNote that the dissimilarity matrix must be an object of class dist, i.e. an object obtained with the function dist(). For sample code chunk, please refer to 5.7.6 Computing proximity matrix\n\n\nSimilarly, we can plot the clusters on a categorical area shaded map by using the steps we learned in 5.7.12 Mapping the clusters formed.\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\n\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we can performed spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using st_distance() of sf package.\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\nNotice that as.dist() is used to convert the data frame into matrix.\nNext, choicealpha() will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith reference to the graphs above, alpha = 0.2 will be used as shown in the code chunk below.\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.2)\n\nNext, cutree() is used to derive the cluster object.\n\ngroups &lt;- as.factor(cutree(clustG, k=6))\n\nWe will then join back the group list with shan_sf polygon feature data frame by using the code chunk below.\n\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\n\nWe can now plot the map of the newly delineated spatially constrained clusters.\n\nqtm(shan_sf_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#visual-interpretation-of-clusters",
    "href": "Hands-on_Ex/Hands-on_Ex08/hands_on8.html#visual-interpretation-of-clusters",
    "title": "Hands-On Exercise 8",
    "section": "",
    "text": "Code chunk below is used to reveal the distribution of a clustering variable (i.e RADIO_PR) by cluster\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nThe boxplot reveals Cluster 3 displays the highest mean Radio Ownership Per Thousand Household. This is followed by Cluster 2, 1, 4, 6 and 5.\n\n\n\nPast studies shown that parallel coordinate plot can be used to reveal clustering variables by cluster very effectively. In the code chunk below, ggparcoord() of GGally package\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThe parallel coordinate plot above reveals that households in Cluster 4 townships tend to own the highest number of TV and mobile-phone. On the other hand, households in Cluster 5 tends to own the lowest of all the five ICT.\nNote that the scale argument of ggparcoor() provide several methods to scale the clustering variables. They are:\n\nstd: univariately, subtract mean and divide by standard deviation.\nrobust: univariately, subtract median and divide by median absolute deviation.\nuniminmax: univariately, scale so the minimum of the variable is zero, and the maximum is one.\nglobalminmax: no scaling is done; the range of the graphs is defined by the global minimum and the global maximum.\ncenter: use uniminmax to standardize vertical height, then center each variable at a value specified by the scaleSummary param.\ncenterObs: use uniminmax to standardize vertical height, then center each variable at the value of the observation specified by the centerObsID param\n\nThere is no one best scaling method to use. You should explore them and select the one that best meet your analysis need.\nLast but not least, we can also compute the summary statistics such as mean, median, sd, etc to complement the visual interpretation.\nIn the code chunk below, group_by() and summarise() of dplyr are used to derive mean values of the clustering variables.\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               221.        521.            44.2           246.\n2 2               237.        402.            23.9           134.\n3 3               300.        611.            52.2           392.\n4 4               196.        744.            99.0           651.\n5 5               124.        224.            38.0           132.\n6 6                98.6       499.            74.5           468.\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute spatial weights using R. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#overview",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute spatial weights using R. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#the-study-area-and-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#the-study-area-and-data",
    "title": "Hands-on Exercise 5",
    "section": "The Study Area and Data",
    "text": "The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\nGetting Started\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#getting-the-data-into-r-environment",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#getting-the-data-into-r-environment",
    "title": "Hands-on Exercise 5",
    "section": "Getting the Data Into R Environment",
    "text": "Getting the Data Into R Environment\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\nImport shapefile into r environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\javilian98\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nImport csv file into r environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R dataframe class.\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPerforming relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan,hunan2012)%&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#visualising-regional-development-indicator",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#visualising-regional-development-indicator",
    "title": "Hands-on Exercise 5",
    "section": "Visualising Regional Development Indicator",
    "text": "Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#computing-contiguity-spatial-weights",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#computing-contiguity-spatial-weights",
    "title": "Hands-on Exercise 5",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nIn this section, you will learn how to use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\nComputing (QUEEN) contiguity based neighbours\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nCreating (ROOK) contiguity based neighbours\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one neighbours.\n\n\nVisualising contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\nWe check the first few observations to see if things are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\nPlotting Queen contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\n\n\nPlotting Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\nPlotting both Queen and Rook contiguity based neighbours maps\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#computing-distance-based-neighbours",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#computing-distance-based-neighbours",
    "title": "Hands-on Exercise 5",
    "section": "Computing distance based neighbours",
    "text": "Computing distance based neighbours\nIn this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\nDetermine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nQuiz: What is the meaning of “Average number of links: 3.681818” shown above?\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\nPlotting fixed distance weight matrix\nNext, we will plot the distance weight matrix by using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNotice that each county has six neighbours, no less no more!\n\nPlotting distance based neighbours\nWe can plot the weight matrix using the code chunk below.\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#weights-based-on-idw",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#weights-based-on-idw",
    "title": "Hands-on Exercise 5",
    "section": "Weights based on IDW",
    "text": "Weights based on IDW\nIn this section, you will learn how to derive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep.\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#row-standardised-weights-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#row-standardised-weights-matrix",
    "title": "Hands-on Exercise 5",
    "section": "Row-standardised Weights Matrix",
    "text": "Row-standardised Weights Matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s eight neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\nEach neighbor is assigned a 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.125 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#application-of-spatial-weight-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/hands_on5.html#application-of-spatial-weight-matrix",
    "title": "Hands-on Exercise 5",
    "section": "Application of Spatial Weight Matrix",
    "text": "Application of Spatial Weight Matrix\nIn this section, you will learn how to create four different spatial lagged variables, they are:\n\nspatial lag with row-standardized weights,\nspatial lag as a sum of neighbouring values,\nspatial window average, and\nspatial window sum.\n\n\nSpatial lag with row-standardized weights\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nRecalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nQuestion: Can you see the meaning of Spatial lag with row-standardized weights now?\n\nMy answer: It displays the average impact of neighbouring values on a region, with each neighbour’s values adjusted to reflect the total influence relative to the number of neighbours.\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nSpatial lag as a sum of neighboring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\nFirst, let us examine the result by using the code chunk below.\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nQuestion: Can you understand the meaning of Spatial lag as a sum of neighboring values now?\n\nMy answer: It is to measure how a value of a location changes at neighbouring locations.\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nNow, We can plot both the GDPPC and Spatial Lag Sum GDPPC for comparison using the code chunk below.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nSpatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw()\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nNote: For more effective comparison, it is advisible to use the core tmap mapping functions.\n\n\nSpatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-class_Ex/ICE_08/ICE_08.html",
    "href": "In-class_Ex/ICE_08/ICE_08.html",
    "title": "In-class Exercise 8",
    "section": "",
    "text": "pacman::p_load(spdep, sp, tmap, sf, ClustGeo, Cluster, factoextra, NbClust, tidyverse, GGally)\n\nWarning: package 'Cluster' is not available for this version of R\n\nA version of this package for your version of R might be available elsewhere,\nsee the ideas at\nhttps://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Installing-packages\n\n\nWarning: Perhaps you meant 'cluster' ?\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\nWarning: 'BiocManager' not available.  Could not check Bioconductor.\n\nPlease use `install.packages('BiocManager')` and then retry.\n\n\nWarning in p_install(package, character.only = TRUE, ...):\n\n\nWarning in library(package, lib.loc = lib.loc, character.only = TRUE,\nlogical.return = TRUE, : there is no package called 'Cluster'\n\n\nWarning in pacman::p_load(spdep, sp, tmap, sf, ClustGeo, Cluster, factoextra, : Failed to install/load:\nCluster"
  },
  {
    "objectID": "In-class_Ex/ICE_08/ICE_08.html#importing-packages",
    "href": "In-class_Ex/ICE_08/ICE_08.html#importing-packages",
    "title": "In-class Exercise 8",
    "section": "",
    "text": "pacman::p_load(spdep, sp, tmap, sf, ClustGeo, Cluster, factoextra, NbClust, tidyverse, GGally)\n\nWarning: package 'Cluster' is not available for this version of R\n\nA version of this package for your version of R might be available elsewhere,\nsee the ideas at\nhttps://cran.r-project.org/doc/manuals/r-patched/R-admin.html#Installing-packages\n\n\nWarning: Perhaps you meant 'cluster' ?\n\n\nWarning: unable to access index for repository http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4:\n  cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/4.4/PACKAGES'\n\n\nWarning: 'BiocManager' not available.  Could not check Bioconductor.\n\nPlease use `install.packages('BiocManager')` and then retry.\n\n\nWarning in p_install(package, character.only = TRUE, ...):\n\n\nWarning in library(package, lib.loc = lib.loc, character.only = TRUE,\nlogical.return = TRUE, : there is no package called 'Cluster'\n\n\nWarning in pacman::p_load(spdep, sp, tmap, sf, ClustGeo, Cluster, factoextra, : Failed to install/load:\nCluster"
  },
  {
    "objectID": "In-class_Ex/ICE_08/ICE_08.html#importing-data",
    "href": "In-class_Ex/ICE_08/ICE_08.html#importing-data",
    "title": "In-class Exercise 8",
    "section": "Importing Data",
    "text": "Importing Data\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\nshan_ict &lt;- read_rds(\"data/rds/shan_ict.rds\")"
  },
  {
    "objectID": "In-class_Ex/ICE_08/ICE_08.html#conventional-hierarchical-clustering",
    "href": "In-class_Ex/ICE_08/ICE_08.html#conventional-hierarchical-clustering",
    "title": "In-class Exercise 8",
    "section": "Conventional Hierarchical Clustering",
    "text": "Conventional Hierarchical Clustering\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\ngroups &lt;- as.factor(cutree(hclust_ward, k = 6))\n\n\nAppend to the geospatial data\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`) %&gt;%\n  select(-c(3:4, 7:9)) %&gt;%\n  rename(TS = TS.x)\n\n\n\nThe dendrogram\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, k = 6, border = 2.5)\n\n\n\n\n\n\n\n\n\n\nCluster map\n\nqtm(shan_sf_cluster, \"CLUSTER\")"
  },
  {
    "objectID": "In-class_Ex/ICE_08/ICE_08.html#spatially-constrained-clustering-skater-method",
    "href": "In-class_Ex/ICE_08/ICE_08.html#spatially-constrained-clustering-skater-method",
    "title": "In-class Exercise 8",
    "section": "Spatially Constrained Clustering: SKATER method",
    "text": "Spatially Constrained Clustering: SKATER method\n\nStep 1: Computing nearest neighbours\n\nshan.nb &lt;- poly2nb(shan_sf)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\n\n\n\nStep 2: Visualising the neighbours\n\nplot(st_geometry(shan_sf),\n     border = grey(0.5))\n\npts &lt;- st_coordinates(st_centroid(shan_sf))\n\nWarning: st_centroid assumes attributes are constant over geometries\n\nplot(shan.nb,\n     pts,\n     col=\"blue\",\n     add=TRUE)\n\n\n\n\n\n\n\n\n\n\nStep 3: Computing minimum spanning tree\n\nCalculating edge costs\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\n\n\n\nIncorporating these costs into a weights object\n\nshan.w &lt;- nb2listw(shan.nb, lcosts, style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n\n\n\n\nComputing MST\n\nshan.mst &lt;- mstree(shan.w)\n\n\n\nVisualising MST\n\nplot(st_geometry(shan_sf),\n     border = grey(0.5))\n\npts &lt;- st_coordinates(st_centroid(shan_sf))\n\nWarning: st_centroid assumes attributes are constant over geometries\n\nplot.mst(shan.mst,\n     pts,\n     col=\"blue\",\n     cex.lab=0.7,\n     cex.circles=0.005,\n     add=TRUE)"
  },
  {
    "objectID": "In-class_Ex/ICE_08/ICE_08.html#computing-spatially-constrained-clusters-using-skater-method",
    "href": "In-class_Ex/ICE_08/ICE_08.html#computing-spatially-constrained-clusters-using-skater-method",
    "title": "In-class Exercise 8",
    "section": "Computing spatially constrained clusters using SKATER method",
    "text": "Computing spatially constrained clusters using SKATER method\n\nThe code\n\nskater.clust6 &lt;- skater(edges = shan.mst[,1:2],\n                        data = shan_ict,\n                        method = \"euclidean\",\n                        ncuts = 5\n                        )\n\n\n\nThe code to plot skater tree\n\nplot(st_geometry(shan_sf),\n     border = gray(0.5))\nplot(skater.clust6,\n     pts,\n     cex.lab=0.7,\n     groups.colors=c(\"red\", \"green\", 'blue', 'brown', 'pink'),\n     cex.circles=0.005,\n     add=TRUE)\n\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter\nWarning in segments(coords[id1, 1], coords[id1, 2], coords[id2, 1], coords[id2,\n: \"add\" is not a graphical parameter"
  },
  {
    "objectID": "In-class_Ex/ICE_08/ICE_08.html#visualising-the-choropleth-map",
    "href": "In-class_Ex/ICE_08/ICE_08.html#visualising-the-choropleth-map",
    "title": "In-class Exercise 8",
    "section": "Visualising the Choropleth map",
    "text": "Visualising the Choropleth map\n\ngroups_mat &lt;- as.matrix(skater.clust6$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`skater_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"skater_CLUSTER\")"
  },
  {
    "objectID": "In-class_Ex/ICE_08/ICE_08.html#spatially-constrained-clustering-clustgeo-method",
    "href": "In-class_Ex/ICE_08/ICE_08.html#spatially-constrained-clustering-clustgeo-method",
    "title": "In-class Exercise 8",
    "section": "Spatially Constrained Clustering: ClustGeo Method",
    "text": "Spatially Constrained Clustering: ClustGeo Method\n\nComputing spatial distance matrix\nIn the code chunk below, st_distance() of sf package is used to compute the distance matrix.\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\n\n\nThe code\n\ncr &lt;- choicealpha(proxmat, distmat,\n                  range.alpha = seq(0,1,0.1),\n                  K=6, graph = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSaving clustGeo output\n\nclust6 &lt;- hclustgeo(proxmat, distmat, alpha = 0.2)\ngroups &lt;- as.factor(cutree(clust6, k = 6))\nshan_sf_clustGeo &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`clustGeo` = `as.matrix.groups.`)\n\n\n\nVisualising the clustGeo map\n\nqtm(shan_sf_clustGeo, \"clustGeo\")\n\n\n\n\n\n\n\n\nCharacterising the clusters\n\nggparcoord(data = shan_sf_clustGeo,\n           columns = c(17:21),\n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE,\n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ clustGeo) +\n  theme(axis.text.x = element_text(angle = 30))"
  },
  {
    "objectID": "In-class_Ex/ICE_10/ice_10.html",
    "href": "In-class_Ex/ICE_10/ice_10.html",
    "title": "In-Class Exercise 10",
    "section": "",
    "text": "# gtsummary will not be needed for this exercise\npacman::p_load(olsrr, ggstatsplot, sf, tmap, tidyverse, gtsummary, performance, see, sfdep)"
  },
  {
    "objectID": "In-class_Ex/ICE_10/ice_10.html#install-and-load-packages",
    "href": "In-class_Ex/ICE_10/ice_10.html#install-and-load-packages",
    "title": "In-Class Exercise 10",
    "section": "",
    "text": "# gtsummary will not be needed for this exercise\npacman::p_load(olsrr, ggstatsplot, sf, tmap, tidyverse, gtsummary, performance, see, sfdep)"
  },
  {
    "objectID": "In-class_Ex/ICE_10/ice_10.html#import-data",
    "href": "In-class_Ex/ICE_10/ice_10.html#import-data",
    "title": "In-Class Exercise 10",
    "section": "Import Data",
    "text": "Import Data\n\nTaskCode Chunk\n\n\nUse appropriate tidyverse and sf functions to import the aspatial and geospatial files\n\n\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmpsz &lt;- read_rds(\"data/rds/mpsz.rds\")\ncondo_resale_sf &lt;- read_rds(\"data/rds/condo_sf.rds\")"
  },
  {
    "objectID": "In-class_Ex/ICE_10/ice_10.html#correlation-analysis---ggstatsplot-methods",
    "href": "In-class_Ex/ICE_10/ice_10.html#correlation-analysis---ggstatsplot-methods",
    "title": "In-Class Exercise 10",
    "section": "Correlation Analysis - ggstatsplot methods",
    "text": "Correlation Analysis - ggstatsplot methods\nCorrelation matric is an effective graphical method for checking if there are pair independent variables with high correlation. In the code chunk below, ggcorrmat() of ggstatsplot is used to plot the correlation matrix?\n\nggstatsplot::ggcorrmat(condo_resale[ ,5:23])"
  },
  {
    "objectID": "In-class_Ex/ICE_10/ice_10.html#building-a-hedonic-pricing-model-by-using-multiple-linear-regression-method",
    "href": "In-class_Ex/ICE_10/ice_10.html#building-a-hedonic-pricing-model-by-using-multiple-linear-regression-method",
    "title": "In-Class Exercise 10",
    "section": "Building a Hedonic Pricing Model by using Multiple Linear Regression Method",
    "text": "Building a Hedonic Pricing Model by using Multiple Linear Regression Method\n\ncondo_mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + \n                AGE + PROX_CBD + PROX_CHILDCARE + \n                PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + \n                PROX_HAWKER_MARKET + PROX_KINDERGARTEN + PROX_MRT + \n                PROX_PARK + PROX_PRIMARY_SCH + PROX_TOP_PRIMARY_SCH +\n                PROX_SHOPPING_MALL + PROX_SUPERMARKET + PROX_BUS_STOP + \n                NO_Of_UNITS + FAMILY_FRIENDLY + \n                FREEHOLD + LEASEHOLD_99YR, \n                data = condo_resale_sf)\n\nsummary(condo_mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD + \n    LEASEHOLD_99YR, data = condo_resale_sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3471036  -286903   -22426   239412 12254549 \n\nCoefficients:\n                      Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           543071.4   136210.9   3.987 7.03e-05 ***\nAREA_SQM               12688.7      370.1  34.283  &lt; 2e-16 ***\nAGE                   -24566.0     2766.0  -8.881  &lt; 2e-16 ***\nPROX_CBD              -78122.0     6791.4 -11.503  &lt; 2e-16 ***\nPROX_CHILDCARE       -333219.0   111020.3  -3.001 0.002734 ** \nPROX_ELDERLYCARE      170950.0    42110.8   4.060 5.19e-05 ***\nPROX_URA_GROWTH_AREA   38507.6    12523.7   3.075 0.002147 ** \nPROX_HAWKER_MARKET     23801.2    29299.9   0.812 0.416739    \nPROX_KINDERGARTEN     144098.0    82738.7   1.742 0.081795 .  \nPROX_MRT             -322775.9    58528.1  -5.515 4.14e-08 ***\nPROX_PARK             564487.9    66563.0   8.481  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      186170.5    65515.2   2.842 0.004553 ** \nPROX_TOP_PRIMARY_SCH    -477.1    20598.0  -0.023 0.981525    \nPROX_SHOPPING_MALL   -207721.5    42855.5  -4.847 1.39e-06 ***\nPROX_SUPERMARKET      -48074.7    77145.3  -0.623 0.533273    \nPROX_BUS_STOP         675755.0   138552.0   4.877 1.20e-06 ***\nNO_Of_UNITS             -216.2       90.3  -2.394 0.016797 *  \nFAMILY_FRIENDLY       142128.3    47055.1   3.020 0.002569 ** \nFREEHOLD              300646.5    77296.5   3.890 0.000105 ***\nLEASEHOLD_99YR        -77137.4    77570.9  -0.994 0.320192    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1416 degrees of freedom\nMultiple R-squared:  0.652, Adjusted R-squared:  0.6474 \nF-statistic: 139.6 on 19 and 1416 DF,  p-value: &lt; 2.2e-16"
  },
  {
    "objectID": "In-class_Ex/ICE_10/ice_10.html#generating-tidy-linear-regression-report",
    "href": "In-class_Ex/ICE_10/ice_10.html#generating-tidy-linear-regression-report",
    "title": "In-Class Exercise 10",
    "section": "Generating Tidy Linear Regression Report",
    "text": "Generating Tidy Linear Regression Report\n\nolsrr_condo &lt;- ols_regress(condo_mlr)"
  },
  {
    "objectID": "In-class_Ex/ICE_10/ice_10.html#variable-selection",
    "href": "In-class_Ex/ICE_10/ice_10.html#variable-selection",
    "title": "In-Class Exercise 10",
    "section": "Variable Selection",
    "text": "Variable Selection\n\nThe MethodsCode ChunkThe plot\n\n\n\nols_step_forward_p\nols_step_backwards_p\nols_step_both_p\n\n\n\n\ncondo_fw_mlr &lt;- ols_step_forward_p(condo_mlr,\n                                   p_val = 0.05,\n                                   details = FALSE) #set details = TRUE if you want a comprehensive report\ncondo_fw_mlr\n\n\n                                     Stepwise Summary                                      \n-----------------------------------------------------------------------------------------\nStep    Variable                   AIC          SBC         SBIC         R2       Adj. R2 \n-----------------------------------------------------------------------------------------\n 0      Base Model              44449.068    44459.608    40371.745    0.00000    0.00000 \n 1      AREA_SQM                43587.753    43603.562    39510.883    0.45184    0.45146 \n 2      PROX_CBD                43243.523    43264.602    39167.182    0.56928    0.56868 \n 3      PROX_PARK               43177.691    43204.039    39101.331    0.58915    0.58829 \n 4      FREEHOLD                43125.474    43157.092    39049.179    0.60438    0.60327 \n 5      AGE                     43069.222    43106.109    38993.167    0.62010    0.61878 \n 6      PROX_ELDERLYCARE        43046.515    43088.672    38970.548    0.62659    0.62502 \n 7      PROX_SHOPPING_MALL      43020.990    43068.417    38945.209    0.63367    0.63188 \n 8      PROX_URA_GROWTH_AREA    43009.092    43061.788    38933.407    0.63720    0.63517 \n 9      PROX_MRT                42999.058    43057.024    38923.483    0.64023    0.63796 \n 10     PROX_BUS_STOP           42984.951    43048.186    38909.582    0.64424    0.64175 \n 11     FAMILY_FRIENDLY         42981.085    43049.590    38905.797    0.64569    0.64296 \n 12     NO_Of_UNITS             42975.246    43049.021    38900.092    0.64762    0.64465 \n 13     PROX_CHILDCARE          42971.858    43050.902    38896.812    0.64894    0.64573 \n 14     PROX_PRIMARY_SCH        42966.758    43051.072    38891.872    0.65067    0.64723 \n-----------------------------------------------------------------------------------------\n\nFinal Model Output \n------------------\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.591 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\n\nplot(condo_fw_mlr)\n\n\n\n\n\n\n\n\n\n\n\nNow i will repeat the step to calibrate:\n\nA backward stepwise multiple linear regression, and\na stepwise multiple linear regression\n\n\nStep BackwardsCode ChunkThe plot\n\n\n\n\n\n\ncondo_bw_mlr &lt;- ols_step_backward_p(condo_mlr,\n                                   p_val = 0.05,\n                                   details = FALSE) #set details = TRUE if you want a comprehensive report\ncondo_bw_mlr\n\n\n                                     Stepwise Summary                                      \n-----------------------------------------------------------------------------------------\nStep    Variable                   AIC          SBC         SBIC         R2       Adj. R2 \n-----------------------------------------------------------------------------------------\n 0      Full Model              42971.173    43081.835    38896.546    0.65203    0.64736 \n 1      PROX_TOP_PRIMARY_SCH    42969.173    43074.565    38894.518    0.65203    0.64761 \n 2      PROX_SUPERMARKET        42967.567    43067.689    38892.873    0.65193    0.64776 \n 3      PROX_HAWKER_MARKET      42966.461    43061.315    38891.719    0.65172    0.64779 \n 4      LEASEHOLD_99YR          42965.558    43055.141    38890.764    0.65145    0.64777 \n 5      PROX_KINDERGARTEN       42966.758    43051.072    38891.872    0.65067    0.64723 \n-----------------------------------------------------------------------------------------\n\nFinal Model Output \n------------------\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.591 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\n\nplot(condo_fw_mlr)"
  },
  {
    "objectID": "In-class_Ex/ICE_10/ice_10.html#step-both-forwards-and-backwards",
    "href": "In-class_Ex/ICE_10/ice_10.html#step-both-forwards-and-backwards",
    "title": "In-Class Exercise 10",
    "section": "Step Both (Forwards and Backwards)",
    "text": "Step Both (Forwards and Backwards)\n\nCode ChunkThe plot\n\n\n\ncondo_sb_mlr &lt;- ols_step_both_p(condo_mlr,\n                                   p_val = 0.05,\n                                   details = FALSE) #set details = TRUE if you want a comprehensive report\ncondo_sb_mlr\n\n\n                                       Stepwise Summary                                        \n---------------------------------------------------------------------------------------------\nStep    Variable                       AIC          SBC         SBIC         R2       Adj. R2 \n---------------------------------------------------------------------------------------------\n 0      Base Model                  44449.068    44459.608    40371.745    0.00000    0.00000 \n 1      AREA_SQM (+)                43587.753    43603.562    39510.883    0.45184    0.45146 \n 2      PROX_CBD (+)                43243.523    43264.602    39167.182    0.56928    0.56868 \n 3      PROX_PARK (+)               43177.691    43204.039    39101.331    0.58915    0.58829 \n 4      FREEHOLD (+)                43125.474    43157.092    39049.179    0.60438    0.60327 \n 5      AGE (+)                     43069.222    43106.109    38993.167    0.62010    0.61878 \n 6      PROX_ELDERLYCARE (+)        43046.515    43088.672    38970.548    0.62659    0.62502 \n 7      PROX_SHOPPING_MALL (+)      43020.990    43068.417    38945.209    0.63367    0.63188 \n 8      PROX_URA_GROWTH_AREA (+)    43009.092    43061.788    38933.407    0.63720    0.63517 \n 9      PROX_MRT (+)                42999.058    43057.024    38923.483    0.64023    0.63796 \n 10     PROX_BUS_STOP (+)           42984.951    43048.186    38909.582    0.64424    0.64175 \n 11     FAMILY_FRIENDLY (+)         42981.085    43049.590    38905.797    0.64569    0.64296 \n 12     NO_Of_UNITS (+)             42975.246    43049.021    38900.092    0.64762    0.64465 \n 13     PROX_CHILDCARE (+)          42971.858    43050.902    38896.812    0.64894    0.64573 \n 14     PROX_PRIMARY_SCH (+)        42966.758    43051.072    38891.872    0.65067    0.64723 \n 15     PROX_KINDERGARTEN (+)       42965.558    43055.141    38890.764    0.65145    0.64777 \n---------------------------------------------------------------------------------------------\n\nFinal Model Output \n------------------\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751161.087 \nR-Squared                    0.651       MSE                570600646491.086 \nAdj. R-Squared               0.648       Coef. Var                    43.135 \nPred R-Squared               0.638       AIC                       42965.558 \nMAE                     413583.799       SBC                       43055.141 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.514394e+15          15        1.009596e+14    176.936    0.0000 \nResidual      8.102529e+14        1420    570600646491.086                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     459826.675    114616.014                   4.012    0.000     234991.777     684661.574 \n            AREA_SQM      12720.174       368.610        0.581     34.509    0.000      11997.096      13443.252 \n            PROX_CBD     -75676.065      5816.474       -0.258    -13.011    0.000     -87085.870     -64266.259 \n           PROX_PARK     575749.528     65523.382        0.151      8.787    0.000     447216.504     704282.552 \n            FREEHOLD     360203.286     48768.851        0.140      7.386    0.000     264536.552     455870.021 \n                 AGE     -24697.719      2752.751       -0.167     -8.972    0.000     -30097.615     -19297.824 \n    PROX_ELDERLYCARE     182435.081     39910.469        0.088      4.571    0.000     104145.268     260724.893 \n  PROX_SHOPPING_MALL    -224513.955     36588.872       -0.117     -6.136    0.000    -296288.004    -152739.906 \nPROX_URA_GROWTH_AREA      40145.474     11758.824        0.062      3.414    0.001      17078.942      63212.007 \n            PROX_MRT    -311753.202     57670.032       -0.119     -5.406    0.000    -424880.814    -198625.590 \n       PROX_BUS_STOP     711858.014    135420.040        0.140      5.257    0.000     446213.188     977502.840 \n     FAMILY_FRIENDLY     144034.218     46874.683        0.057      3.073    0.002      52083.153     235985.283 \n         NO_Of_UNITS       -236.270        88.032       -0.051     -2.684    0.007       -408.956        -63.583 \n      PROX_CHILDCARE    -336118.857    108331.761       -0.088     -3.103    0.002    -548626.339    -123611.374 \n    PROX_PRIMARY_SCH     162183.897     60202.895        0.063      2.694    0.007      44087.730     280280.063 \n   PROX_KINDERGARTEN     141915.768     79726.155        0.029      1.780    0.075     -14477.927     298309.464 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\n\nplot(condo_sb_mlr)"
  },
  {
    "objectID": "In-class_Ex/ICE_10/ice_10.html#model-selection",
    "href": "In-class_Ex/ICE_10/ice_10.html#model-selection",
    "title": "In-Class Exercise 10",
    "section": "Model Selection",
    "text": "Model Selection\n\nComparing PerformanceVisual Comparison\n\n\n\nmetric &lt;-  compare_performance(condo_mlr,\n                               condo_fw_mlr$model,\n                               condo_bw_mlr$model,\n                               condo_sb_mlr$model)\n\n# This code gsub() is used to tidy the test values in the \"Name\" field\nmetric$Name &lt;- gsub(\".*\\\\\\\\([a-zA-Z0-9_]+)\\\\\\\\,\\\\\\\\model\\\\\\\\.*\", \"\\\\1\", metric$Name)\n\n\n\nUse plot() of the “see” package is used to plot a radar chart to compare the performance measures of the models.\n\nplot(metric)\n\n\n\n\n\n\n\n\nNote: The different indices are normalized and larger values indicate better model performance. hence, points closer to the center indicate worse fit indices.\n\n\n\n\nVisualising Model Parameters\n\nggcoefstats(condo_sb_mlr$model,\n            sort = \"ascending\")\n\nNumber of labels is greater than default palette color count.\n• Select another color `palette` (and/or `package`)."
  },
  {
    "objectID": "In-class_Ex/ICE_10/ice_10.html#checking-for-multicollinearity",
    "href": "In-class_Ex/ICE_10/ice_10.html#checking-for-multicollinearity",
    "title": "In-Class Exercise 10",
    "section": "Checking for multicollinearity",
    "text": "Checking for multicollinearity\n\nThe ConceptVIFVisualising VIF\n\n\n\n\n\n\ncheck_collinearity(condo_sb_mlr$model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n                 Term  VIF   VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n             AREA_SQM 1.15 [1.10, 1.24]         1.07      0.87     [0.81, 0.91]\n             PROX_CBD 1.60 [1.50, 1.73]         1.27      0.62     [0.58, 0.67]\n            PROX_PARK 1.21 [1.15, 1.30]         1.10      0.83     [0.77, 0.87]\n             FREEHOLD 1.46 [1.37, 1.57]         1.21      0.68     [0.64, 0.73]\n                  AGE 1.41 [1.33, 1.52]         1.19      0.71     [0.66, 0.75]\n     PROX_ELDERLYCARE 1.52 [1.42, 1.63]         1.23      0.66     [0.61, 0.70]\n   PROX_SHOPPING_MALL 1.49 [1.40, 1.60]         1.22      0.67     [0.62, 0.72]\n PROX_URA_GROWTH_AREA 1.33 [1.26, 1.43]         1.16      0.75     [0.70, 0.79]\n             PROX_MRT 1.96 [1.83, 2.13]         1.40      0.51     [0.47, 0.55]\n        PROX_BUS_STOP 2.89 [2.66, 3.15]         1.70      0.35     [0.32, 0.38]\n      FAMILY_FRIENDLY 1.38 [1.30, 1.48]         1.18      0.72     [0.67, 0.77]\n          NO_Of_UNITS 1.45 [1.37, 1.56]         1.21      0.69     [0.64, 0.73]\n       PROX_CHILDCARE 3.29 [3.02, 3.59]         1.81      0.30     [0.28, 0.33]\n     PROX_PRIMARY_SCH 2.21 [2.05, 2.40]         1.49      0.45     [0.42, 0.49]\n    PROX_KINDERGARTEN 1.11 [1.06, 1.20]         1.05      0.90     [0.84, 0.94]\n\n\n\n\n\nplot(check_collinearity(condo_sb_mlr$model)) + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nVariable `Component` is not in your data frame :/\n\n\n\n\n\n\n\n\n\nnote: pink is high (bad), blue is moderate, green is low (ideal)"
  },
  {
    "objectID": "In-class_Ex/ICE_10/ice_10.html#linearity-assumption-test",
    "href": "In-class_Ex/ICE_10/ice_10.html#linearity-assumption-test",
    "title": "In-Class Exercise 10",
    "section": "Linearity Assumption test",
    "text": "Linearity Assumption test\nStatistical interpertation\n\nout &lt;- plot(check_model(condo_sb_mlr$model,\n                        panel = FALSE))\n\nFor confidence bands, please install `qqplotr`.\n\nout[[2]]\n\n\n\n\n\n\n\n\nNormality Assumption test\nCode chunk below uses check_morality of the performance package to perform normality assumption test.\n\nplot(check_normality(condo_sb_mlr$model))\n\nFor confidence bands, please install `qqplotr`.\n\n\n\n\n\n\n\n\n\nFigure above reveals that the residual of the MLR model (i.e. condo.mlr1) is resemble normal distribution"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html",
    "href": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html",
    "title": "Hands-on Exercise 10",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#overview",
    "title": "Hands-on Exercise 10",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a spatial statistical technique that takes non-stationary variables into consideration (e.g., climate; demographic factors; physical environment characteristics) and models the local relationships between these independent variables and an outcome of interest (also known as dependent variable). In this hands-on exercise, you will learn how to build hedonic pricing models by using GWR methods. The dependent variable is the resale prices of condominium in 2015. The independent variables are divided into either structural and locational."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#the-data",
    "title": "Hands-on Exercise 10",
    "section": "The Data",
    "text": "The Data\nTwo data sets will be used in this model building exercise, they are:\n\nURA Master Plan subzone boundary in shapefile format (i.e. MP14_SUBZONE_WEB_PL)\ncondo_resale_2015 in csv format (i.e. condo_resale_2015.csv)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#getting-started",
    "title": "Hands-on Exercise 10",
    "section": "Getting Started",
    "text": "Getting Started\nBefore we get started, it is important for us to install the necessary R packages into R and launch these R packages into R environment.\nThe R packages needed for this exercise are as follows:\n\nR package for building OLS and performing diagnostics tests\n\nolsrr\n\nR package for calibrating geographical weighted family of models\n\nGWmodel\n\nR package for multivariate data visualisation and analysis\n\ncorrplot\n\nSpatial data handling\n\nsf\n\nAttribute data handling\n\ntidyverse, especially readr, ggplot2 and dplyr\n\nChoropleth mapping\n\ntmap\n\n\nThe code chunks below installs and launches these R packages into R environment.\n\npacman::p_load(olsrr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, tidyverse, gtsummary)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#a-short-note-about-gwmodel",
    "href": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#a-short-note-about-gwmodel",
    "title": "Hands-on Exercise 10",
    "section": "A short note about GWmodel",
    "text": "A short note about GWmodel\nGWmodel package provides a collection of localised spatial statistical methods, namely: GW summary statistics, GW principal components analysis, GW discriminant analysis and various forms of GW regression; some of which are provided in basic and robust (outlier resistant) forms. Commonly, outputs or parameters of the GWmodel are mapped to provide a useful exploratory tool, which can often precede (and direct) a more traditional or sophisticated statistical analysis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 10",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\n\nImporting geospatial data\nThe geospatial data used in this hands-on exercise is called MP14_SUBZONE_WEB_PL. It is in ESRI shapefile format. The shapefile consists of URA Master Plan 2014’s planning subzone boundaries. Polygon features are used to represent these geographic boundaries. The GIS data is in svy21 projected coordinates systems.\nThe code chunk below is used to import MP_SUBZONE_WEB_PL shapefile by using st_read() of sf packages.\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\javilian98\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex10\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe report above shows that the R object used to contain the imported MP14_SUBZONE_WEB_PL shapefile is called mpsz and it is a simple feature object. The geometry type is multipolygon. it is also important to note that mpsz simple feature object does not have EPSG information.\n\n\nUpdating CRS information\nThe code chunk below updates the newly imported mpsz with the correct ESPG code (i.e. 3414)\n\nmpsz_svy21 &lt;- st_transform(mpsz, 3414)\n\nAfter transforming the projection metadata, you can varify the projection of the newly transformed mpsz_svy21 by using st_crs() of sf package.\nThe code chunk below will be used to varify the newly transformed mpsz_svy21.\n\nst_crs(mpsz_svy21)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG: is indicated as 3414 now.\nNext, you will reveal the extent of mpsz_svy21 by using st_bbox() of sf package.\n\nst_bbox(mpsz_svy21) #view extent\n\n     xmin      ymin      xmax      ymax \n 2667.538 15748.721 56396.440 50256.334"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#aspatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#aspatial-data-wrangling",
    "title": "Hands-on Exercise 10",
    "section": "Aspatial Data Wrangling",
    "text": "Aspatial Data Wrangling\n\nImporting the aspatial data\nThe condo_resale_2015 is in csv file format. The codes chunk below uses read_csv() function of readr package to import condo_resale_2015 into R as a tibble data frame called condo_resale.\n\ncondo_resale = read_csv(\"data/aspatial/Condo_resale_2015.csv\")\n\nRows: 1436 Columns: 23\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (23): LATITUDE, LONGITUDE, POSTCODE, SELLING_PRICE, AREA_SQM, AGE, PROX_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe codes chunks below uses glimpse() to display the data structure of will do the job./r\n\nglimpse(condo_resale)\n\nRows: 1,436\nColumns: 23\n$ LATITUDE             &lt;dbl&gt; 1.287145, 1.328698, 1.313727, 1.308563, 1.321437,…\n$ LONGITUDE            &lt;dbl&gt; 103.7802, 103.8123, 103.7971, 103.8247, 103.9505,…\n$ POSTCODE             &lt;dbl&gt; 118635, 288420, 267833, 258380, 467169, 466472, 3…\n$ SELLING_PRICE        &lt;dbl&gt; 3000000, 3880000, 3325000, 4250000, 1400000, 1320…\n$ AREA_SQM             &lt;dbl&gt; 309, 290, 248, 127, 145, 139, 218, 141, 165, 168,…\n$ AGE                  &lt;dbl&gt; 30, 32, 33, 7, 28, 22, 24, 24, 27, 31, 17, 22, 6,…\n$ PROX_CBD             &lt;dbl&gt; 7.941259, 6.609797, 6.898000, 4.038861, 11.783402…\n$ PROX_CHILDCARE       &lt;dbl&gt; 0.16597932, 0.28027246, 0.42922669, 0.39473543, 0…\n$ PROX_ELDERLYCARE     &lt;dbl&gt; 2.5198118, 1.9333338, 0.5021395, 1.9910316, 1.121…\n$ PROX_URA_GROWTH_AREA &lt;dbl&gt; 6.618741, 7.505109, 6.463887, 4.906512, 6.410632,…\n$ PROX_HAWKER_MARKET   &lt;dbl&gt; 1.76542207, 0.54507614, 0.37789301, 1.68259969, 0…\n$ PROX_KINDERGARTEN    &lt;dbl&gt; 0.05835552, 0.61592412, 0.14120309, 0.38200076, 0…\n$ PROX_MRT             &lt;dbl&gt; 0.5607188, 0.6584461, 0.3053433, 0.6910183, 0.528…\n$ PROX_PARK            &lt;dbl&gt; 1.1710446, 0.1992269, 0.2779886, 0.9832843, 0.116…\n$ PROX_PRIMARY_SCH     &lt;dbl&gt; 1.6340256, 0.9747834, 1.4715016, 1.4546324, 0.709…\n$ PROX_TOP_PRIMARY_SCH &lt;dbl&gt; 3.3273195, 0.9747834, 1.4715016, 2.3006394, 0.709…\n$ PROX_SHOPPING_MALL   &lt;dbl&gt; 2.2102717, 2.9374279, 1.2256850, 0.3525671, 1.307…\n$ PROX_SUPERMARKET     &lt;dbl&gt; 0.9103958, 0.5900617, 0.4135583, 0.4162219, 0.581…\n$ PROX_BUS_STOP        &lt;dbl&gt; 0.10336166, 0.28673408, 0.28504777, 0.29872340, 0…\n$ NO_Of_UNITS          &lt;dbl&gt; 18, 20, 27, 30, 30, 31, 32, 32, 32, 32, 34, 34, 3…\n$ FAMILY_FRIENDLY      &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0…\n$ FREEHOLD             &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1…\n$ LEASEHOLD_99YR       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n\n\n\nhead(condo_resale$LONGITUDE) #see the data in XCOORD column\n\n[1] 103.7802 103.8123 103.7971 103.8247 103.9505 103.9386\n\n\n\nhead(condo_resale$LATITUDE) #see the data in YCOORD column\n\n[1] 1.287145 1.328698 1.313727 1.308563 1.321437 1.314198\n\n\nNext, summary() of base R is used to display the summary statistics of cond_resale tibble data frame.\n\nsummary(condo_resale)\n\n    LATITUDE       LONGITUDE        POSTCODE      SELLING_PRICE     \n Min.   :1.240   Min.   :103.7   Min.   : 18965   Min.   :  540000  \n 1st Qu.:1.309   1st Qu.:103.8   1st Qu.:259849   1st Qu.: 1100000  \n Median :1.328   Median :103.8   Median :469298   Median : 1383222  \n Mean   :1.334   Mean   :103.8   Mean   :440439   Mean   : 1751211  \n 3rd Qu.:1.357   3rd Qu.:103.9   3rd Qu.:589486   3rd Qu.: 1950000  \n Max.   :1.454   Max.   :104.0   Max.   :828833   Max.   :18000000  \n    AREA_SQM          AGE           PROX_CBD       PROX_CHILDCARE    \n Min.   : 34.0   Min.   : 0.00   Min.   : 0.3869   Min.   :0.004927  \n 1st Qu.:103.0   1st Qu.: 5.00   1st Qu.: 5.5574   1st Qu.:0.174481  \n Median :121.0   Median :11.00   Median : 9.3567   Median :0.258135  \n Mean   :136.5   Mean   :12.14   Mean   : 9.3254   Mean   :0.326313  \n 3rd Qu.:156.0   3rd Qu.:18.00   3rd Qu.:12.6661   3rd Qu.:0.368293  \n Max.   :619.0   Max.   :37.00   Max.   :19.1804   Max.   :3.465726  \n PROX_ELDERLYCARE  PROX_URA_GROWTH_AREA PROX_HAWKER_MARKET PROX_KINDERGARTEN \n Min.   :0.05451   Min.   :0.2145       Min.   :0.05182    Min.   :0.004927  \n 1st Qu.:0.61254   1st Qu.:3.1643       1st Qu.:0.55245    1st Qu.:0.276345  \n Median :0.94179   Median :4.6186       Median :0.90842    Median :0.413385  \n Mean   :1.05351   Mean   :4.5981       Mean   :1.27987    Mean   :0.458903  \n 3rd Qu.:1.35122   3rd Qu.:5.7550       3rd Qu.:1.68578    3rd Qu.:0.578474  \n Max.   :3.94916   Max.   :9.1554       Max.   :5.37435    Max.   :2.229045  \n    PROX_MRT         PROX_PARK       PROX_PRIMARY_SCH  PROX_TOP_PRIMARY_SCH\n Min.   :0.05278   Min.   :0.02906   Min.   :0.07711   Min.   :0.07711     \n 1st Qu.:0.34646   1st Qu.:0.26211   1st Qu.:0.44024   1st Qu.:1.34451     \n Median :0.57430   Median :0.39926   Median :0.63505   Median :1.88213     \n Mean   :0.67316   Mean   :0.49802   Mean   :0.75471   Mean   :2.27347     \n 3rd Qu.:0.84844   3rd Qu.:0.65592   3rd Qu.:0.95104   3rd Qu.:2.90954     \n Max.   :3.48037   Max.   :2.16105   Max.   :3.92899   Max.   :6.74819     \n PROX_SHOPPING_MALL PROX_SUPERMARKET PROX_BUS_STOP       NO_Of_UNITS    \n Min.   :0.0000     Min.   :0.0000   Min.   :0.001595   Min.   :  18.0  \n 1st Qu.:0.5258     1st Qu.:0.3695   1st Qu.:0.098356   1st Qu.: 188.8  \n Median :0.9357     Median :0.5687   Median :0.151710   Median : 360.0  \n Mean   :1.0455     Mean   :0.6141   Mean   :0.193974   Mean   : 409.2  \n 3rd Qu.:1.3994     3rd Qu.:0.7862   3rd Qu.:0.220466   3rd Qu.: 590.0  \n Max.   :3.4774     Max.   :2.2441   Max.   :2.476639   Max.   :1703.0  \n FAMILY_FRIENDLY     FREEHOLD      LEASEHOLD_99YR  \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.0000   1st Qu.:0.0000   1st Qu.:0.0000  \n Median :0.0000   Median :0.0000   Median :0.0000  \n Mean   :0.4868   Mean   :0.4227   Mean   :0.4882  \n 3rd Qu.:1.0000   3rd Qu.:1.0000   3rd Qu.:1.0000  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n\n\n\n\nConverting aspatial data frame into a sf object\nCurrently, the condo_resale tibble data frame is aspatial. We will convert it to a sf object. The code chunk below converts condo_resale data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\ncondo_resale.sf &lt;- st_as_sf(condo_resale,\n                            coords = c(\"LONGITUDE\", \"LATITUDE\"),\n                            crs=4326) %&gt;%\n  st_transform(crs=3414)\n\nNotice that st_transform() of sf package is used to convert the coordinates from wgs84 (i.e. crs:4326) to svy21 (i.e. crs=3414).\nNext, head() is used to list the content of condo_resale.sf object.\n\nhead(condo_resale.sf)\n\nSimple feature collection with 6 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 22085.12 ymin: 29951.54 xmax: 41042.56 ymax: 34546.2\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 22\n  POSTCODE SELLING_PRICE AREA_SQM   AGE PROX_CBD PROX_CHILDCARE PROX_ELDERLYCARE\n     &lt;dbl&gt;         &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;            &lt;dbl&gt;\n1   118635       3000000      309    30     7.94          0.166            2.52 \n2   288420       3880000      290    32     6.61          0.280            1.93 \n3   267833       3325000      248    33     6.90          0.429            0.502\n4   258380       4250000      127     7     4.04          0.395            1.99 \n5   467169       1400000      145    28    11.8           0.119            1.12 \n6   466472       1320000      139    22    10.3           0.125            0.789\n# ℹ 15 more variables: PROX_URA_GROWTH_AREA &lt;dbl&gt;, PROX_HAWKER_MARKET &lt;dbl&gt;,\n#   PROX_KINDERGARTEN &lt;dbl&gt;, PROX_MRT &lt;dbl&gt;, PROX_PARK &lt;dbl&gt;,\n#   PROX_PRIMARY_SCH &lt;dbl&gt;, PROX_TOP_PRIMARY_SCH &lt;dbl&gt;,\n#   PROX_SHOPPING_MALL &lt;dbl&gt;, PROX_SUPERMARKET &lt;dbl&gt;, PROX_BUS_STOP &lt;dbl&gt;,\n#   NO_Of_UNITS &lt;dbl&gt;, FAMILY_FRIENDLY &lt;dbl&gt;, FREEHOLD &lt;dbl&gt;,\n#   LEASEHOLD_99YR &lt;dbl&gt;, geometry &lt;POINT [m]&gt;\n\n\nNotice that the output is in point feature data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 10",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nIn the section, you will learn how to use statistical graphics functions of ggplot2 package to perform EDA.\n\nEDA using statistical graphics\nWe can plot the distribution of SELLING_PRICE by using appropriate Exploratory Data Analysis (EDA) as shown in the code chunk below.\n\nggplot(data=condo_resale.sf, aes(x=`SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\n\n\n\nThe figure above reveals a right skewed distribution. This means that more condominium units were transacted at relative lower prices.\nStatistically, the skewed dsitribution can be normalised by using log transformation. The code chunk below is used to derive a new variable called LOG_SELLING_PRICE by using a log transformation on the variable SELLING_PRICE. It is performed using mutate() of dplyr package.\n\ncondo_resale.sf &lt;- condo_resale.sf %&gt;%\n  mutate(`LOG_SELLING_PRICE` = log(SELLING_PRICE))\n\nNow, you can plot the LOG_SELLING_PRICE using the code chunk below.\n\nggplot(data=condo_resale.sf, aes(x=`LOG_SELLING_PRICE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\n\n\n\n\n\n\n\nNotice that the distribution is relatively less skewed after the transformation.\n\n\nMultiple Histogram Plots distribution of variables\nIn this section, you will learn how to draw a small multiple histograms (also known as trellis plot) by using ggarrange() of ggpubr package.\nThe code chunk below is used to create 12 histograms. Then, ggarrange() is used to organised these histogram into a 3 columns by 4 rows small multiple plot.\n\nAREA_SQM &lt;- ggplot(data=condo_resale.sf, aes(x= `AREA_SQM`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nAGE &lt;- ggplot(data=condo_resale.sf, aes(x= `AGE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CBD &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CBD`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_CHILDCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_CHILDCARE`)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_ELDERLYCARE &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_ELDERLYCARE`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_URA_GROWTH_AREA &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_URA_GROWTH_AREA`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_HAWKER_MARKET &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_HAWKER_MARKET`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_KINDERGARTEN &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_KINDERGARTEN`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_MRT &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_MRT`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PARK &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PARK`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, aes(x= `PROX_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nPROX_TOP_PRIMARY_SCH &lt;- ggplot(data=condo_resale.sf, \n                               aes(x= `PROX_TOP_PRIMARY_SCH`)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\")\n\nggarrange(AREA_SQM, AGE, PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, \n          PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN, PROX_MRT,\n          PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH,  \n          ncol = 3, nrow = 4)\n\n\n\n\n\n\n\n\n\n\nDrawing Statistical Point Map\nLastly, we want to reveal the geospatial distribution condominium resale prices in Singapore. The map will be prepared by using tmap package.\nFirst, we will turn on the interactive mode of tmap by using the code chunk below.\n\n# tmap_mode(\"view\")\n\nNext, the code chunks below is used to create an interactive point symbol map.\n\ntm_shape(mpsz_svy21)+\n  tm_polygons() +\ntm_shape(condo_resale.sf) +  \n  tm_dots(col = \"SELLING_PRICE\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\n\nNotice that tm_dots() is used instead of tm_bubbles().\nset.zoom.limits argument of tm_view() sets the minimum and maximum zoom level to 11 and 14 respectively.\nBefore moving on to the next section, the code below will be used to turn R display into plot mode.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#hedonic-pricing-modelling-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex10/hands_on10.html#hedonic-pricing-modelling-in-r",
    "title": "Hands-on Exercise 10",
    "section": "Hedonic Pricing Modelling in R",
    "text": "Hedonic Pricing Modelling in R\nIn this section, you will learn how to building hedonic pricing models for condominium resale units using lm() of R base.\n\nSimple Linear Regression Method\nFirst, we will build a simple linear regression model by using SELLING_PRICE as the dependent variable and AREA_SQM as the independent variable.\n\ncondo.slr &lt;- lm(formula=SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nlm() returns an object of class “lm” or for multiple responses of class c(“mlm”, “lm”).\nThe functions summary() and anova() can be used to obtain and print a summary and analysis of variance table of the results. The generic accessor functions coefficients, effects, fitted.values and residuals extract various useful features of the value returned by lm.\n\nsummary(condo.slr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM, data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3695815  -391764   -87517   258900 13503875 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -258121.1    63517.2  -4.064 5.09e-05 ***\nAREA_SQM      14719.0      428.1  34.381  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 942700 on 1434 degrees of freedom\nMultiple R-squared:  0.4518,    Adjusted R-squared:  0.4515 \nF-statistic:  1182 on 1 and 1434 DF,  p-value: &lt; 2.2e-16\n\n\nThe output report reveals that the SELLING_PRICE can be explained by using the formula:\n      *y = -258121.1 + 14719x1*\nThe R-squared of 0.4518 reveals that the simple regression model built is able to explain about 45% of the resale prices.\nSince p-value is much smaller than 0.0001, we will reject the null hypothesis that mean is a good estimator of SELLING_PRICE. This will allow us to infer that simple linear regression model above is a good estimator of SELLING_PRICE.\nThe Coefficients: section of the report reveals that the p-values of both the estimates of the Intercept and ARA_SQM are smaller than 0.001. In view of this, the null hypothesis of the B0 and B1 are equal to 0 will be rejected. As a results, we will be able to infer that the B0 and B1 are good parameter estimates.\nTo visualise the best fit curve on a scatterplot, we can incorporate lm() as a method function in ggplot’s geometry as shown in the code chunk below.\n\nggplot(data=condo_resale.sf,  \n       aes(x=`AREA_SQM`, y=`SELLING_PRICE`)) +\n  geom_point() +\n  geom_smooth(method = lm)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nFigure above reveals that there are a few statistical outliers with relatively high selling prices.\n\n\nMultiple Linear Regression Method\n\nVisualising the relationships of the independent variables\nBefore building a multiple regression model, it is important to ensure that the indepdent variables used are not highly correlated to each other. If these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised. This phenomenon is known as multicollinearity in statistics.\nCorrelation matrix is commonly used to visualise the relationships between the independent variables. Beside the pairs() of R, there are many packages support the display of a correlation matrix. In this section, the corrplot package will be used.\nThe code chunk below is used to plot a scatterplot matrix of the relationship between the independent variables in condo_resale data.frame.\n\ncorrplot(cor(condo_resale[, 5:23]), diag = FALSE, order = \"AOE\",\n         tl.pos = \"td\", tl.cex = 0.5, method = \"number\", type = \"upper\")\n\n\n\n\n\n\n\n\nMatrix reorder is very important for mining the hiden structure and patter in the matrix. There are four methods in corrplot (parameter order), named “AOE”, “FPC”, “hclust”, “alphabet”. In the code chunk above, AOE order is used. It orders the variables by using the angular order of the eigenvectors method suggested by Michael Friendly.\nFrom the scatterplot matrix, it is clear that Freehold is highly correlated to LEASE_99YEAR. In view of this, it is wiser to only include either one of them in the subsequent model building. As a result, LEASE_99YEAR is excluded in the subsequent model building.\n\n\n\nBuilding a hedonic pricing model using multiple linear regression method\nThe code chunk below using lm() to calibrate the multiple linear regression model.\n\ncondo.mlr &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE    + \n                  PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                  PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + PROX_KINDERGARTEN + \n                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + \n                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n                  PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n                data=condo_resale.sf)\nsummary(condo.mlr)\n\n\nCall:\nlm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + PROX_CHILDCARE + \n    PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_HAWKER_MARKET + \n    PROX_KINDERGARTEN + PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH + \n    PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_SUPERMARKET + \n    PROX_BUS_STOP + NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, \n    data = condo_resale.sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3475964  -293923   -23069   241043 12260381 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           481728.40  121441.01   3.967 7.65e-05 ***\nAREA_SQM               12708.32     369.59  34.385  &lt; 2e-16 ***\nAGE                   -24440.82    2763.16  -8.845  &lt; 2e-16 ***\nPROX_CBD              -78669.78    6768.97 -11.622  &lt; 2e-16 ***\nPROX_CHILDCARE       -351617.91  109467.25  -3.212  0.00135 ** \nPROX_ELDERLYCARE      171029.42   42110.51   4.061 5.14e-05 ***\nPROX_URA_GROWTH_AREA   38474.53   12523.57   3.072  0.00217 ** \nPROX_HAWKER_MARKET     23746.10   29299.76   0.810  0.41782    \nPROX_KINDERGARTEN     147468.99   82668.87   1.784  0.07466 .  \nPROX_MRT             -314599.68   57947.44  -5.429 6.66e-08 ***\nPROX_PARK             563280.50   66551.68   8.464  &lt; 2e-16 ***\nPROX_PRIMARY_SCH      180186.08   65237.95   2.762  0.00582 ** \nPROX_TOP_PRIMARY_SCH    2280.04   20410.43   0.112  0.91107    \nPROX_SHOPPING_MALL   -206604.06   42840.60  -4.823 1.57e-06 ***\nPROX_SUPERMARKET      -44991.80   77082.64  -0.584  0.55953    \nPROX_BUS_STOP         683121.35  138353.28   4.938 8.85e-07 ***\nNO_Of_UNITS             -231.18      89.03  -2.597  0.00951 ** \nFAMILY_FRIENDLY       140340.77   47020.55   2.985  0.00289 ** \nFREEHOLD              359913.01   49220.22   7.312 4.38e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 755800 on 1417 degrees of freedom\nMultiple R-squared:  0.6518,    Adjusted R-squared:  0.6474 \nF-statistic: 147.4 on 18 and 1417 DF,  p-value: &lt; 2.2e-16\n\n\n\n\nPreparing Publication Quality Table: olsrr method\nWith reference to the report above, it is clear that not all the independent variables are statistically significant. We will revised the model by removing those variables which are not statistically significant.\nNow, we are ready to calibrate the revised model by using the code chunk below.\n\ncondo.mlr1 &lt;- lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + \n                   PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE +\n                   PROX_URA_GROWTH_AREA + PROX_MRT  + PROX_PARK + \n                   PROX_PRIMARY_SCH + PROX_SHOPPING_MALL    + PROX_BUS_STOP + \n                   NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD,\n                 data=condo_resale.sf)\nols_regress(condo.mlr1)\n\n                                Model Summary                                 \n-----------------------------------------------------------------------------\nR                            0.807       RMSE                     751998.679 \nR-Squared                    0.651       MSE                571471422208.591 \nAdj. R-Squared               0.647       Coef. Var                    43.168 \nPred R-Squared               0.638       AIC                       42966.758 \nMAE                     414819.628       SBC                       43051.072 \n-----------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares          DF         Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    1.512586e+15          14        1.080418e+14    189.059    0.0000 \nResidual      8.120609e+14        1421    571471422208.591                      \nTotal         2.324647e+15        1435                                          \n--------------------------------------------------------------------------------\n\n                                               Parameter Estimates                                                \n-----------------------------------------------------------------------------------------------------------------\n               model           Beta    Std. Error    Std. Beta       t        Sig           lower          upper \n-----------------------------------------------------------------------------------------------------------------\n         (Intercept)     527633.222    108183.223                   4.877    0.000     315417.244     739849.200 \n            AREA_SQM      12777.523       367.479        0.584     34.771    0.000      12056.663      13498.382 \n                 AGE     -24687.739      2754.845       -0.167     -8.962    0.000     -30091.739     -19283.740 \n            PROX_CBD     -77131.323      5763.125       -0.263    -13.384    0.000     -88436.469     -65826.176 \n      PROX_CHILDCARE    -318472.751    107959.512       -0.084     -2.950    0.003    -530249.889    -106695.613 \n    PROX_ELDERLYCARE     185575.623     39901.864        0.090      4.651    0.000     107302.737     263848.510 \nPROX_URA_GROWTH_AREA      39163.254     11754.829        0.060      3.332    0.001      16104.571      62221.936 \n            PROX_MRT    -294745.107     56916.367       -0.112     -5.179    0.000    -406394.234    -183095.980 \n           PROX_PARK     570504.807     65507.029        0.150      8.709    0.000     442003.938     699005.677 \n    PROX_PRIMARY_SCH     159856.136     60234.599        0.062      2.654    0.008      41697.849     278014.424 \n  PROX_SHOPPING_MALL    -220947.251     36561.832       -0.115     -6.043    0.000    -292668.213    -149226.288 \n       PROX_BUS_STOP     682482.221    134513.243        0.134      5.074    0.000     418616.359     946348.082 \n         NO_Of_UNITS       -245.480        87.947       -0.053     -2.791    0.005       -418.000        -72.961 \n     FAMILY_FRIENDLY     146307.576     46893.021        0.057      3.120    0.002      54320.593     238294.560 \n            FREEHOLD     350599.812     48506.485        0.136      7.228    0.000     255447.802     445751.821 \n-----------------------------------------------------------------------------------------------------------------\n\n\n\n\nPreparing Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\ntbl_regression(condo.mlr1, intercept = TRUE)\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI1\np-value\n\n\n\n\n(Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n\n\nAREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n\n\nAGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n\n\nPROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n\n\nPROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n\n\nPROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n\n\nPROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n\n\nPROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n\n\nPROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n\n\nPROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n\n\nPROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n\n\nPROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n\n\nNO_Of_UNITS\n-245\n-418, -73\n0.005\n\n\nFAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n\n\nFREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n\n\n\n1 CI = Confidence Interval\n\n\n\n\n\n\n\n\nWith gtsummary package, model statistics can be included in the report by either appending them to the report table by using add_glance_table() or adding as a table source note by using add_glance_source_note() as shown in the code chunk below.\n\ntbl_regression(condo.mlr1, \n               intercept = TRUE) %&gt;% \n  add_glance_source_note(\n    label = list(sigma ~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared, \n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n527,633\n315,417, 739,849\n&lt;0.001\n    AREA_SQM\n12,778\n12,057, 13,498\n&lt;0.001\n    AGE\n-24,688\n-30,092, -19,284\n&lt;0.001\n    PROX_CBD\n-77,131\n-88,436, -65,826\n&lt;0.001\n    PROX_CHILDCARE\n-318,473\n-530,250, -106,696\n0.003\n    PROX_ELDERLYCARE\n185,576\n107,303, 263,849\n&lt;0.001\n    PROX_URA_GROWTH_AREA\n39,163\n16,105, 62,222\n&lt;0.001\n    PROX_MRT\n-294,745\n-406,394, -183,096\n&lt;0.001\n    PROX_PARK\n570,505\n442,004, 699,006\n&lt;0.001\n    PROX_PRIMARY_SCH\n159,856\n41,698, 278,014\n0.008\n    PROX_SHOPPING_MALL\n-220,947\n-292,668, -149,226\n&lt;0.001\n    PROX_BUS_STOP\n682,482\n418,616, 946,348\n&lt;0.001\n    NO_Of_UNITS\n-245\n-418, -73\n0.005\n    FAMILY_FRIENDLY\n146,308\n54,321, 238,295\n0.002\n    FREEHOLD\n350,600\n255,448, 445,752\n&lt;0.001\n  \n  \n    \n      R² = 0.651; Adjusted R² = 0.647; AIC = 42,967; Statistic = 189; p-value = &lt;0.001; σ = 755,957\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\nFor more customisation options, refer to Tutorial: tbl_regression\n\nChecking for multicolinearity\nIn this section, we would like to introduce you a fantastic R package specially programmed for performing OLS regression. It is called olsrr. It provides a collection of very useful methods for building better multiple linear regression models:\n\ncomprehensive regression output\nresidual diagnostics\nmeasures of influence\nheteroskedasticity tests\ncollinearity diagnostics\nmodel fit assessment\nvariable contribution assessment\nvariable selection procedures\n\nIn the code chunk below, the ols_vif_tol() of olsrr package is used to test if there are sign of multicollinearity.\n\nols_vif_tol(condo.mlr1)\n\n              Variables Tolerance      VIF\n1              AREA_SQM 0.8728554 1.145665\n2                   AGE 0.7071275 1.414172\n3              PROX_CBD 0.6356147 1.573280\n4        PROX_CHILDCARE 0.3066019 3.261559\n5      PROX_ELDERLYCARE 0.6598479 1.515501\n6  PROX_URA_GROWTH_AREA 0.7510311 1.331503\n7              PROX_MRT 0.5236090 1.909822\n8             PROX_PARK 0.8279261 1.207837\n9      PROX_PRIMARY_SCH 0.4524628 2.210126\n10   PROX_SHOPPING_MALL 0.6738795 1.483945\n11        PROX_BUS_STOP 0.3514118 2.845664\n12          NO_Of_UNITS 0.6901036 1.449058\n13      FAMILY_FRIENDLY 0.7244157 1.380423\n14             FREEHOLD 0.6931163 1.442759\n\n\nSince the VIF of the independent variables are less than 10. We can safely conclude that there are no sign of multicollinearity among the independent variables.\n\n\nTest for Non-Linearity\nIn multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.\nIn the code chunk below, the ols_plot_resid_fit() of olsrr package is used to perform linearity assumption test.\n\nols_plot_resid_fit(condo.mlr1)\n\n\n\n\n\n\n\n\nThe figure above reveals that most of the data poitns are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.\n\n\nTest for Normality Assumption\nLastly, the code chunk below uses ols_plot_resid_hist() of olsrr package to perform normality assumption test.\n\nols_plot_resid_hist(condo.mlr1)\n\n\n\n\n\n\n\n\nThe figure reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.\nIf you prefer formal statistical test methods, the ols_test_normality() of olsrr package can be used as shown in the code chun below.\n\nols_test_normality(condo.mlr1)\n\nWarning in ks.test.default(y, \"pnorm\", mean(y), sd(y)): ties should not be\npresent for the one-sample Kolmogorov-Smirnov test\n\n\n-----------------------------------------------\n       Test             Statistic       pvalue  \n-----------------------------------------------\nShapiro-Wilk              0.6856         0.0000 \nKolmogorov-Smirnov        0.1366         0.0000 \nCramer-von Mises         121.0768        0.0000 \nAnderson-Darling         67.9551         0.0000 \n-----------------------------------------------\n\n\nThe summary table above reveals that the p-values of the four tests are way smaller than the alpha value of 0.05. Hence we will reject the null hypothesis and infer that there is statistical evidence that the residual are not normally distributed.\n\n\nTesting for Spatial Autocorrelation\nThe hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.\nIn order to perform spatial autocorrelation test, we need to convert condo_resale.sf from sf data frame into a SpatialPointsDataFrame.\nFirst, we will export the residual of the hedonic pricing model and save it as a data frame.\n\nmlr.output &lt;- as.data.frame(condo.mlr1$residuals)\n\nNext, we will join the newly created data frame with condo_resale.sf object.\n\ncondo_resale.res.sf &lt;- cbind(condo_resale.sf, \n                        condo.mlr1$residuals) %&gt;%\nrename(`MLR_RES` = `condo.mlr1.residuals`)\n\nNext, we will convert condo_resale.res.sf from simple feature object into a SpatialPointsDataFrame because spdep package can only process sp conformed spatial data objects.\nThe code chunk below will be used to perform the data conversion process.\n\ncondo_resale.sp &lt;- as_Spatial(condo_resale.res.sf)\ncondo_resale.sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1436 \nextent      : 14940.85, 43352.45, 24765.67, 48382.81  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 23\nnames       : POSTCODE, SELLING_PRICE, AREA_SQM, AGE,    PROX_CBD, PROX_CHILDCARE, PROX_ELDERLYCARE, PROX_URA_GROWTH_AREA, PROX_HAWKER_MARKET, PROX_KINDERGARTEN,    PROX_MRT,   PROX_PARK, PROX_PRIMARY_SCH, PROX_TOP_PRIMARY_SCH, PROX_SHOPPING_MALL, ... \nmin values  :    18965,        540000,       34,   0, 0.386916393,    0.004927023,      0.054508623,          0.214539508,        0.051817113,       0.004927023, 0.052779424, 0.029064164,      0.077106132,          0.077106132,                  0, ... \nmax values  :   828833,       1.8e+07,      619,  37, 19.18042832,     3.46572633,      3.949157205,           9.15540001,        5.374348075,       2.229045366,  3.48037319,  2.16104919,      3.928989144,          6.748192062,        3.477433767, ... \n\n\nNext, we will use tmap package to display the distribution of the residuals on an interactive map.\nThe code churn below will turn on the interactive mode of tmap.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\n\nThe code chunks below is used to create an interactive point symbol map.\n\ntm_shape(mpsz_svy21)+\n  tmap_options(check.and.fix = TRUE) +\n  tm_polygons(alpha = 0.4) +\ntm_shape(condo_resale.res.sf) +  \n  tm_dots(col = \"MLR_RES\",\n          alpha = 0.6,\n          style=\"quantile\") +\n  tm_view(set.zoom.limits = c(11,14))\n\nWarning: The shape mpsz_svy21 is invalid (after reprojection). See\nsf::st_is_valid\n\n\nVariable(s) \"MLR_RES\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\nRemember to switch back to “plot” mode before continue.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\n\nThe figure above reveal that there is sign of spatial autocorrelation.\nTo proof that our observation is indeed true, the Moran’s I test will be performed\nFirst, we will compute the distance-based weight matrix by using dnearneigh() function of spdep.\n\nnb &lt;- dnearneigh(coordinates(condo_resale.sp), 0, 1500, longlat = FALSE)\nsummary(nb)\n\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\n\nNext, nb2listw() of spdep packge will be used to convert the output neighbours lists (i.e. nb) into a spatial weights.\n\nnb_lw &lt;- nb2listw(nb, style = 'W')\nsummary(nb_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1436 \nNumber of nonzero links: 66266 \nPercentage nonzero weights: 3.213526 \nAverage number of links: 46.14624 \n10 disjoint connected subgraphs\nLink number distribution:\n\n  1   3   5   7   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24 \n  3   3   9   4   3  15  10  19  17  45  19   5  14  29  19   6  35  45  18  47 \n 25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44 \n 16  43  22  26  21  11   9  23  22  13  16  25  21  37  16  18   8  21   4  12 \n 45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64 \n  8  36  18  14  14  43  11  12   8  13  12  13   4   5   6  12  11  20  29  33 \n 65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84 \n 15  20  10  14  15  15  11  16  12  10   8  19  12  14   9   8   4  13  11   6 \n 85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 \n  4   9   4   4   4   6   2  16   9   4   5   9   3   9   4   2   1   2   1   1 \n105 106 107 108 109 110 112 116 125 \n  1   5   9   2   1   3   1   1   1 \n3 least connected regions:\n193 194 277 with 1 link\n1 most connected region:\n285 with 125 links\n\nWeights style: W \nWeights constants summary:\n     n      nn   S0       S1       S2\nW 1436 2062096 1436 94.81916 5798.341\n\n\nNext, lm.morantest() of spdep package will be used to perform Moran’s I test for residual spatial autocorrelation\n\nlm.morantest(condo.mlr1, nb_lw)\n\n\n    Global Moran I for regression residuals\n\ndata:  \nmodel: lm(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +\nPROX_CHILDCARE + PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + PROX_MRT +\nPROX_PARK + PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP +\nNO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, data = condo_resale.sf)\nweights: nb_lw\n\nMoran I statistic standard deviate = 24.366, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nObserved Moran I      Expectation         Variance \n    1.438876e-01    -5.487594e-03     3.758259e-05 \n\n\nThe Global Moran’s I test for residual spatial autocorrelation shows that it’s p-value is less than 0.00000000000000022 which is less than the alpha value of 0.05. Hence, we will reject the null hypothesis that the residuals are randomly distributed.\nSince the Observed Global Moran I = 0.1424418 which is greater than 0, we can infer than the residuals resemble cluster distribution."
  },
  {
    "objectID": "Take-home_Ex03/takehome_3.html",
    "href": "Take-home_Ex03/takehome_3.html",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "Prototyping is essential in the application development process, acting as a bridge between design concepts and user interactions. By creating a prototype, teams can test and evaluate UX elements with stakeholders, which helps confirm design choices. This iterative process allows for adjustments and refinements before investing further resources, leading to a more efficient and effective final product.\n\n\n\n\nEvaluating R Packages: The initial step in Shiny prototyping involves identifying and validating R packages from CRAN that support the app’s functionality. This ensures the application’s foundation is reliable and compatible with the required analyses and visualizations.\nTesting R Code: Prototyping also involves running and validating specific R code snippets to confirm they produce expected outputs. This testing process helps ensure a smooth experience for end-users by troubleshooting issues early.\n\nSetting Parameters and Outputs: Deciding on the parameters and outputs to expose in the application is a key step. These will guide user interaction and determine the dynamic nature of the app.\n\nDesigning the UI with Shiny Components: The final prototyping phase involves selecting Shiny UI components that allow users to interact with the chosen parameters intuitively.\n\nThis structured approach facilitates a seamless transition from conceptual design to a fully functional application, prioritizing both technical robustness and user experience.\n\n\n\nShiny is an open-source R package designed to simplify the creation of interactive web applications without requiring knowledge of web design languages like HTML, CSS, or JavaScript.\n\n\nA Shiny application typically consists of an app.R file that includes two main sections:\n\nUser Interface (UI) - Defines the front-end layout and elements that users interact with.\nServer - Contains the back-end logic, handling input-processing and output-rendering functions.\n\nThis modular structure keeps the UI and server functions distinct, ensuring a clean, organized codebase.\n\n\n\nThe Shiny UI includes components like:\n\nHeader Panel (headerPanel): Displays the app’s title or brief descriptions.\nSidebar Panel (sidebarPanel): A vertical panel for input controls, offering users a way to interact with the app.\nMain Panel (mainPanel): The primary area for output displays (e.g., maps, plots, tables).\n\n\n\n\n\nShiny employs a grid layout system through fluidRow() and column(), based on a 12-column structure, allowing flexible UI design. Each fluidRow can hold multiple column elements, enabling a variety of layouts by adjusting column widths.\n\n\n\nTo structure complex applications, navbarPage() is available, enabling multiple sub-components within the app, each with distinct sidebar, tabset, or layout configurations.\n\n\n\nShiny provides various functions for defining user inputs, including:\n\nsliderInput(): For range-based input using sliders.\nselectInput(): For dropdown lists.\ntextInput(): For text entry.\nnumericInput(): For numeric values.\ncheckboxInput() & checkboxGroupInput(): For binary or multiple-choice selections.\n\nAfter configuring inputs, submitButton() compiles and sends these inputs to the server, updating outputs accordingly.\n\n\n\nOutputs are defined in the main panel using placeholders like textOutput(), tableOutput(), and plotOutput(). These are rendered on the UI through corresponding functions (renderText, renderTable, renderPlot), and can be organized using fluidRow() and column().\n\n\n\nTo categorize content within the main panel, tabsetPanel() can create a series of tabs, effectively organizing multiple outputs in the application.\n\n\n\nThe server function processes inputs from the UI and specifies the outputs based on these inputs. It typically includes parameters for:\n\nInput: Accesses user-defined UI inputs.\nOutput: Determines how outputs are displayed in the UI.\nSession (optional): Manages session-specific settings.\n\nThe interaction between the UI and server functions as a two-way communication loop, where user inputs from the UI are processed by the server, and the corresponding outputs are displayed back in the UI.\n\n\n\n\n\npacman::p_load(sf, tmap, tidyverse, ggplot2, sfdep)\n\n\n\n\n\n# aspatial data\nfarms &lt;- read_rds(\"data/aspatial/farms.rds\")\n# geospatial data\nvietnam_geo &lt;- read_rds(\"data/geospatial/vietnam_geo.rds\")\n\n# left-joined farms with vietnam_geo\nvietnam_farms &lt;- read_rds(\"data/aspatial/vietnam_farm.rds\")\n\n\n\nIt is always a good practice to use set.seed() before performing simulation. This is to ensure that the computation is reproducible.\n\nset.seed(111)\n\n\n\n\n\n\nVIETNAM_FARMS_TYPES &lt;- c(\n  \"CULTIVATION\" = \"Cultivation farm\",\n  \"LIVESTOCK\" = \"Livestock farm\",\n  \"FISHING\" = \"Fishing farm\",\n  \"OTHERS\" = \"Others(*)\"\n)\n\nYEARS &lt;- 2012:2023\n\n# Helper Function\npopulate_col_names &lt;- function(new_data_list_name, years, columns) {\n  # Initialize an empty character vector to store the results\n  data_list &lt;- character()\n\n  for (year in years) {\n    for (col_name in columns) {\n\n      # Construct the variable name dynamically\n      var_name &lt;- paste0(year, \" \", col_name)\n      data_list &lt;- c(data_list, var_name)\n    }\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, data_list, envir = .GlobalEnv)\n}\n\npopulate_col_names(\"VIETNAM_COL_NAMES\", YEARS, VIETNAM_FARMS_TYPES)\n\n\n\n\n\n\n\n# Helper Function\npopulate_data_by_col &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  # Loop over the years and quarters to populate the list\n  for (col_name in columns) {\n    event_data_list[[col_name]] &lt;- data[, c(\"Cities, provincies\", col_name, \"geometry\")]\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\npopulate_data_by_col(\"vietnam_farms_data\", vietnam_farms, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_data\n\n$`2012 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2012 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    11 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  0 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   0 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                 4 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  3 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  1 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                   4 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  4 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     6 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   2 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2012 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2012 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                 919 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              460 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                                65 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                              44 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              419 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              347 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               345 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              265 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 176 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               116 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2012 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2012 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               188 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             36 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               2 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                            88 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             16 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             63 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               3 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            320 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                26 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             243 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2012 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2012 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                            115 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          12 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            7 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                          5 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          68 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                          10 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            1 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                          11 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             32 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            5 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2013 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2013 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    11 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  0 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   0 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                 4 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  2 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  3 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                   5 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  1 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     4 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   1 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2013 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2013 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                 944 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              532 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                                73 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                              84 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              451 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              458 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               404 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              279 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 371 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               138 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2013 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2013 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               180 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             33 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               4 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                           109 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             23 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             78 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               4 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            316 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                23 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             247 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2013 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2013 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                            156 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          24 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            1 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         15 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          49 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                          32 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            3 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                          54 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             20 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            5 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2014 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2014 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    11 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  0 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   0 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                 8 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  4 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  0 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                   8 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  2 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     2 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   1 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2014 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2014 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                1346 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              534 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                                91 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                             136 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              505 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              519 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               569 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              474 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 443 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               150 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2014 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2014 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               132 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             51 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               2 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                           139 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             26 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             89 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               5 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            204 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                13 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             254 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2014 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2014 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                            148 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          15 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            1 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         33 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          44 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           6 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            2 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                          41 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             10 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            7 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2015 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2015 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    16 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  0 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   0 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                 6 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  4 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  0 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                  12 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  0 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     2 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   1 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2015 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2015 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                1849 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              628 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                               105 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                             140 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              553 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              528 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               639 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              573 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 740 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               159 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2015 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2015 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               131 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             49 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               1 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                           152 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             24 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             90 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               5 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            199 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                17 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             257 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2015 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2015 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                            141 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          14 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            2 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         31 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          45 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           6 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            3 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           9 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             10 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            7 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2016 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2016 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    29 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  1 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   1 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                18 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  0 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                 10 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                   0 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  7 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     4 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   0 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2016 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2016 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                2904 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              944 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                               122 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                             148 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                             1104 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              886 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               576 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              696 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                1030 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               192 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2016 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2016 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               214 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             36 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               2 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                           138 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             13 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                              1 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                              68 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            261 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                20 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             227 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2016 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2016 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                             42 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          26 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            1 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         15 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          21 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           4 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            4 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           5 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             17 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            7 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2017 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2017 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    35 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  1 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   1 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                11 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  0 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  0 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                  11 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  6 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     3 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   1 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2017 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2017 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                2847 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                             1021 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                               134 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                             150 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                             1031 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              618 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               980 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              744 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 996 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               206 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2017 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2017 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               190 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             25 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               1 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                           157 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             17 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             53 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               3 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            263 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                16 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             222 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2017 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2017 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                             94 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          29 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            3 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         23 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          44 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           4 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            0 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           1 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             17 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            3 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2018 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2018 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    31 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  2 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   1 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                10 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  0 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  0 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                  11 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  5 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     3 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   1 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2018 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2018 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                2733 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              913 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                               140 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                             155 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              785 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              664 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               845 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              658 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 699 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               175 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2018 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2018 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               191 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             30 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               0 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                           160 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             14 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             53 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               0 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            263 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                16 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             225 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2018 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2018 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                            120 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          16 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            2 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         33 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          46 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           1 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            5 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           0 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             21 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            3 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2019 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2019 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                   131 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                 10 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   1 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                11 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  0 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  0 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                   8 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                 11 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     3 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   1 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2019 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2019 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                2782 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                             1081 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                               150 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                             156 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              772 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              675 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               848 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              710 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 699 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               192 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2019 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2019 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               200 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             26 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               0 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                           166 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             14 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             53 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               0 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            263 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                16 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             201 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2019 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2019 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                            114 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          19 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            3 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         37 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          46 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           3 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            5 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           0 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             21 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            3 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2020 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2020 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    48 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                 12 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   5 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                12 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                 24 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  3 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                  41 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  6 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     9 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   2 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2020 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2020 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                1741 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              690 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                                77 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                              57 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              510 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              453 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               704 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              429 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 582 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               158 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2020 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2020 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               144 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             12 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               0 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                            79 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             39 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             36 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               0 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            155 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                12 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             132 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2020 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2020 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                              9 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          12 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            9 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                          1 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          52 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           0 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            6 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           0 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             16 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            1 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2021 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2021 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    38 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  7 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                  19 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                11 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                 50 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  3 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                  46 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  6 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     9 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   3 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2021 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2021 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                1740 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              615 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                                69 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                              51 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              554 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              491 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               730 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              446 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 414 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               164 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2021 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2021 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               134 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             15 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               7 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                            76 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             37 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             33 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               1 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            154 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                13 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             127 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2021 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2021 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                             15 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          28 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            9 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                          3 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          54 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           0 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            5 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           0 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                              2 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            2 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2022 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2022 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    37 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  7 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                  19 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                13 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                 52 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  3 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                  46 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                 10 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     9 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   4 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2022 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2022 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                1752 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              691 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                                59 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                              56 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              563 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              572 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               724 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              444 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 411 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               178 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2022 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2022 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               159 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             14 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               7 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                            82 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             46 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             31 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               3 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            161 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                13 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             129 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2022 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2022 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                             24 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          23 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                           11 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         10 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          52 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           1 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            5 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           0 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                              2 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            1 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2023 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2023 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    35 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  8 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                  17 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                13 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                 62 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  2 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                  47 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                 10 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     8 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   5 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2023 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2023 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                1751 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              746 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                                62 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                              60 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              565 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              606 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               735 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              458 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 412 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               163 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2023 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2023 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               151 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             12 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               4 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                            87 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             48 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             37 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               3 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            143 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                13 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             125 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2023 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2023 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                             29 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          24 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                           11 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                          9 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          52 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           0 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            4 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           9 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                              2 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            2 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n\n\n\n\n\nWhen interacting with the Shiny app UI, I would like to provide options for user to view the data in either map mode or other plots (histograms, box plots, etc.).\n\nggplot(vietnam_farms_data[[\"2012 Cultivation farm\"]], aes(x = `2012 Cultivation farm`, y = reorder(`Cities, provincies`, `2012 Cultivation farm`))) +\n  geom_bar(stat = \"identity\", width = 0.7, fill = \"skyblue\") +  # Adjust width to increase bar height\n  geom_text(aes(label = `2012 Cultivation farm`), \n            hjust = 1.2,  # Position the text at the end of the bars\n            size = 4) +  # Adjust text size if needed\n  labs(title = \"Total Cultivation Farms by Province (2012)\",\n       x = \"Cultivation Farms (2012)\",\n       y = \"Cities\") +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_text(size = 12, margin = margin(t = 5, b = 5)),  # Increase font size and add margin\n    plot.title = element_text(hjust = 0.5),  # Center the title\n    panel.grid.major.y = element_line(size = 0.5, color = \"lightgrey\"),  # Optional: add grid lines for clarity\n    panel.spacing = unit(5, \"lines\")  # Increase spacing between bars\n  )\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\n\n\n\n\n\n\n\nqtm(st_as_sf(vietnam_farms), \"2012 Cultivation farm\")\n\n\n\n\n\n\n\n\n\n\n\nIn this section, we will be performing spatial complete randomness test for global spatial autocorrelation.\nBefore we can compute the global spatial autocorrelation statistics, we’ll need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. province) in the study area.\nWe will create a helper function compute_and_populate_queens() to compute queen for each column in the dataset. It takes in arguments:\n\nnew_data_list_name: assigning a variable name to hold the list of outputs\ndata: the input data to be used in computing the queens\nyears: years ranging from 2012 to 2013\ncolumns: data columns\n\n\n# Helper Function\ncompute_and_populate_queens &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in VIETNAM_COL_NAMES) {\n    event_data_list[[col_name]] &lt;- data[[col_name]] %&gt;%\n      mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\ncompute_and_populate_queens(\"vietnam_farms_q\", vietnam_farms_data, YEARS, VIETNAM_COL_NAMES)\n\nResults of queen for every data column\n\nvietnam_farms_q\n\n$`2012 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2012 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    11\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  0\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   0\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                 4\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  3\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  1\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                   4\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  4\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     6\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   2\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2012 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                 919\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              460\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                65\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                              44\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              419\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              347\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               345\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              265\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 176\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               116\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2012 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               188\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             36\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               2\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                            88\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             16\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             63\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               3\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            320\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                26\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             243\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2012 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                            115 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          12 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            7 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                          5 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          68 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                          10 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            1 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                          11 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             32 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            5 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2013 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2013 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    11\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  0\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   0\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                 4\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  2\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  3\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                   5\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  1\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     4\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   1\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2013 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                 944\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              532\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                73\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                              84\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              451\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              458\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               404\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              279\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 371\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               138\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2013 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               180\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             33\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               4\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                           109\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             23\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             78\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               4\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            316\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                23\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             247\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2013 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                            156 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          24 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            1 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         15 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          49 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                          32 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            3 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                          54 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             20 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            5 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2014 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2014 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    11\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  0\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   0\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                 8\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  4\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  0\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                   8\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  2\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     2\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   1\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2014 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                1346\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              534\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                91\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                             136\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              505\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              519\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               569\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              474\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 443\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               150\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2014 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               132\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             51\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               2\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                           139\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             26\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             89\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               5\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            204\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                13\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             254\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2014 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                            148 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          15 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            1 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         33 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          44 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           6 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            2 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                          41 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             10 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            7 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2015 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2015 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    16\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  0\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   0\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                 6\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  4\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  0\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                  12\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  0\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     2\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   1\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2015 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                1849\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              628\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               105\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                             140\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              553\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              528\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               639\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              573\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 740\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               159\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2015 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               131\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             49\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               1\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                           152\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             24\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             90\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               5\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            199\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                17\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             257\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2015 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                            141 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          14 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            2 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         31 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          45 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           6 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            3 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           9 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             10 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            7 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2016 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2016 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    29\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  1\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   1\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                18\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  0\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                 10\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                   0\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  7\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     4\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   0\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2016 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                2904\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              944\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               122\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                             148\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             1104\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              886\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               576\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              696\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                1030\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               192\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2016 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               214\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             36\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               2\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                           138\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             13\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              1\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                              68\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            261\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                20\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             227\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2016 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                             42 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          26 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            1 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         15 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          21 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           4 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            4 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           5 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             17 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            7 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2017 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2017 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    35\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  1\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   1\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                11\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  0\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  0\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                  11\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  6\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     3\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   1\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2017 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                2847\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             1021\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               134\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                             150\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             1031\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              618\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               980\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              744\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 996\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               206\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2017 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               190\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             25\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               1\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                           157\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             17\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             53\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               3\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            263\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                16\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             222\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2017 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                             94 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          29 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            3 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         23 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          44 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           4 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            0 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           1 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             17 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            3 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2018 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2018 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    31\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  2\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   1\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                10\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  0\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  0\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                  11\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  5\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     3\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   1\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2018 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                2733\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              913\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               140\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                             155\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              785\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              664\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               845\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              658\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 699\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               175\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2018 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               191\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             30\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               0\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                           160\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             14\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             53\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               0\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            263\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                16\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             225\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2018 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                            120 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          16 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            2 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         33 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          46 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           1 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            5 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           0 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             21 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            3 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2019 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2019 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                   131\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                 10\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   1\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                11\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  0\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  0\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                   8\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                 11\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     3\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   1\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2019 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                2782\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             1081\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               150\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                             156\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              772\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              675\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               848\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              710\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 699\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               192\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2019 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               200\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             26\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               0\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                           166\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             14\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             53\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               0\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            263\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                16\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             201\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2019 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                            114 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          19 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            3 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         37 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          46 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           3 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            5 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           0 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             21 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            3 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2020 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2020 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    48\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                 12\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   5\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                12\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                 24\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  3\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                  41\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  6\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     9\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   2\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2020 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                1741\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              690\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                77\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                              57\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              510\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              453\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               704\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              429\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 582\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               158\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2020 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               144\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             12\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               0\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                            79\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             39\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             36\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               0\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            155\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                12\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             132\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2020 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                              9 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          12 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            9 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                          1 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          52 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           0 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            6 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           0 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             16 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            1 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2021 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2021 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    38\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  7\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                  19\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                11\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                 50\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  3\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                  46\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  6\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     9\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   3\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2021 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                1740\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              615\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                69\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                              51\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              554\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              491\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               730\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              446\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 414\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               164\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2021 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               134\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             15\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               7\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                            76\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             37\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             33\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               1\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            154\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                13\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             127\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2021 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                             15 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          28 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            9 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                          3 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          54 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           0 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            5 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           0 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                              2 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            2 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2022 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2022 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    37\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  7\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                  19\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                13\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                 52\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  3\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                  46\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                 10\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     9\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   4\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2022 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                1752\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              691\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                59\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                              56\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              563\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              572\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               724\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              444\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 411\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               178\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2022 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               159\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             14\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               7\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                            82\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             46\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             31\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               3\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            161\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                13\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             129\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2022 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                             24 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          23 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                           11 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         10 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          52 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           1 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            5 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           0 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                              2 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            1 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2023 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2023 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    35\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  8\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                  17\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                13\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                 62\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  2\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                  47\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                 10\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     8\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   5\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2023 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                1751\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              746\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                62\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                              60\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              565\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              606\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               735\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              458\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 412\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               163\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2023 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               151\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             12\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               4\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                            87\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             48\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             37\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               3\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            143\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                13\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             125\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2023 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                             29 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          24 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                           11 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                          9 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          52 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           0 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            4 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           9 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                              2 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            2 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n\n\n\nGlobal Moran’s I is a statistical test used to assess spatial autocorrelation in a data set, which means it evaluates whether the presence of a particular phenomenon (like the number of cultivation farms) in a geographic area is influenced by nearby areas\n\ncompute_list_of_morans_i_test &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in VIETNAM_COL_NAMES) {\n    event_data_list[[col_name]]&lt;- global_moran_test(data[[col_name]][[col_name]],\n            vietnam_farms_q[[col_name]]$nb,\n            vietnam_farms_q[[col_name]]$wt)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\ncompute_list_of_morans_i_test(\"vietnam_farms_moran_i_test_res\", vietnam_farms_q, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_moran_i_test_res\n\n$`2012 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 6.2405, p-value = 2.181e-10\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.500821513      -0.016129032       0.006862191 \n\n\n$`2012 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.9777, p-value = 0.001452\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.218306168      -0.016129032       0.006198545 \n\n\n$`2012 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.15565, p-value = 0.4382\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n    -0.0130741077     -0.0161290323      0.0003852305 \n\n\n$`2012 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.073961, p-value = 0.4705\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      -0.01052430       -0.01612903        0.00574260 \n\n\n$`2013 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 6.0377, p-value = 7.815e-10\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.487208949      -0.016129032       0.006949792 \n\n\n$`2013 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.3934, p-value = 0.0003452\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.250181544      -0.016129032       0.006158994 \n\n\n$`2013 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.52008, p-value = 0.3015\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n    -0.0057725442     -0.0161290323      0.0003965323 \n\n\n$`2013 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.80171, p-value = 0.2114\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.04675681       -0.01612903        0.00615279 \n\n\n$`2014 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 5.3104, p-value = 5.469e-08\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.436346312      -0.016129032       0.007259987 \n\n\n$`2014 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.9327, p-value = 0.00168\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.20149207       -0.01612903        0.00550630 \n\n\n$`2014 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.87768, p-value = 0.1901\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n    -0.0008350456     -0.0161290323      0.0003036482 \n\n\n$`2014 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.43013, p-value = 0.3335\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.014863329      -0.016129032       0.005191644 \n\n\n$`2015 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 5.2014, p-value = 9.891e-08\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.425725069      -0.016129032       0.007216432 \n\n\n$`2015 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.7492, p-value = 0.002987\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.18625542       -0.01612903        0.00541944 \n\n\n$`2015 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.9634, p-value = 0.0248\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0267608746     -0.0161290323      0.0004771706 \n\n\n$`2015 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.16953, p-value = 0.4327\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.003980907      -0.016129032       0.005134697 \n\n\n$`2016 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.2488, p-value = 1.075e-05\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.338394867      -0.016129032       0.006962366 \n\n\n$`2016 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.2749, p-value = 0.01146\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.153894185      -0.016129032       0.005586112 \n\n\n$`2016 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.7416, p-value = 0.003057\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.207392788      -0.016129032       0.006647225 \n\n\n$`2016 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.05319, p-value = 0.4788\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.014189935      -0.016129032       0.001329045 \n\n\n$`2017 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.3328, p-value = 7.362e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.346900212      -0.016129032       0.007020184 \n\n\n$`2017 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.4231, p-value = 0.007694\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.166166348      -0.016129032       0.005659787 \n\n\n$`2017 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.8152, p-value = 0.03475\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.133312563      -0.016129032       0.006777747 \n\n\n$`2017 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.38662, p-value = 0.3495\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0005552447     -0.0161290323      0.0018622622 \n\n\n$`2018 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.357, p-value = 6.592e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.34673643       -0.01612903        0.00693604 \n\n\n$`2018 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.6182, p-value = 0.00442\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.181444087      -0.016129032       0.005694515 \n\n\n$`2018 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.8135, p-value = 0.002451\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.212272224      -0.016129032       0.006590442 \n\n\n$`2018 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = -0.024039, p-value = 0.5096\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.017361116      -0.016129032       0.002627013 \n\n\n$`2019 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.21, p-value = 1.277e-05\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.332599308      -0.016129032       0.006861432 \n\n\n$`2019 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.6463, p-value = 0.004069\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.183672271      -0.016129032       0.005700736 \n\n\n$`2019 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.6845, p-value = 0.003632\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.201801067      -0.016129032       0.006590175 \n\n\n$`2019 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.24871, p-value = 0.4018\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.002422843      -0.016129032       0.003037074 \n\n\n$`2020 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.2828, p-value = 0.000514\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.251398081      -0.016129032       0.006641362 \n\n\n$`2020 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.5174, p-value = 0.0002179\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.263277538      -0.016129032       0.006309896 \n\n\n$`2020 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.4387, p-value = 0.0002922\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.237890730      -0.016129032       0.005456835 \n\n\n$`2020 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.1871, p-value = 0.1176\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.079912300      -0.016129032       0.006545238 \n\n\n$`2021 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.4593, p-value = 0.0002708\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.265341747      -0.016129032       0.006620581 \n\n\n$`2021 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.0755, p-value = 0.001051\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.228489444      -0.016129032       0.006326466 \n\n\n$`2021 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.7528, p-value = 8.742e-05\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.250545852      -0.016129032       0.005049468 \n\n\n$`2021 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.3921, p-value = 0.08195\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.096175219      -0.016129032       0.006508028 \n\n\n$`2022 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.5432, p-value = 0.0001976\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.271214154      -0.016129032       0.006576651 \n\n\n$`2022 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.3717, p-value = 0.0003736\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.254790674      -0.016129032       0.006456406 \n\n\n$`2022 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.7422, p-value = 9.12e-05\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.248016293      -0.016129032       0.004982246 \n\n\n$`2022 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.0154, p-value = 0.02193\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.146897889      -0.016129032       0.006543517 \n\n\n$`2023 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.7103, p-value = 0.0001035\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.291260440      -0.016129032       0.006863614 \n\n\n$`2023 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.6853, p-value = 0.0001142\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.281128282      -0.016129032       0.006506104 \n\n\n$`2023 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.4162, p-value = 0.0003175\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.212036896      -0.016129032       0.004460735 \n\n\n$`2023 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.0885, p-value = 0.1382\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.07230876       -0.01612903        0.00660148 \n\n\n\n\n\nIn practice, Monte carlo simulation should be used to perform the statistical test. For sfdep, it is supported by global_moran_perm()\n\ncompute_list_of_morans_i_mc_test &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in VIETNAM_COL_NAMES) {\n    event_data_list[[col_name]]&lt;- global_moran_perm(data[[col_name]][[col_name]],\n            vietnam_farms_q[[col_name]]$nb,\n            vietnam_farms_q[[col_name]]$wt,\n            nsim = 999,\n            zero.policy = TRUE, \n            na.action=na.omit)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\ncompute_list_of_morans_i_mc_test(\"vietnam_farms_moran_i_mc_test_res\", vietnam_farms_q, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_moran_i_mc_test_res\n\n$`2012 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.50082, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n$`2012 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.21831, observed rank = 991, p-value = 0.018\nalternative hypothesis: two.sided\n\n\n$`2012 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.013074, observed rank = 703, p-value = 0.594\nalternative hypothesis: two.sided\n\n\n$`2012 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.010524, observed rank = 644, p-value = 0.712\nalternative hypothesis: two.sided\n\n\n$`2013 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.48721, observed rank = 999, p-value = 0.002\nalternative hypothesis: two.sided\n\n\n$`2013 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.25018, observed rank = 996, p-value = 0.008\nalternative hypothesis: two.sided\n\n\n$`2013 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.0057725, observed rank = 769, p-value = 0.462\nalternative hypothesis: two.sided\n\n\n$`2013 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.046757, observed rank = 818, p-value = 0.364\nalternative hypothesis: two.sided\n\n\n$`2014 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.43635, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n$`2014 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.20149, observed rank = 993, p-value = 0.014\nalternative hypothesis: two.sided\n\n\n$`2014 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.00083505, observed rank = 851, p-value = 0.298\nalternative hypothesis: two.sided\n\n\n$`2014 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.014863, observed rank = 764, p-value = 0.472\nalternative hypothesis: two.sided\n\n\n$`2015 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.42573, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n$`2015 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.18626, observed rank = 978, p-value = 0.044\nalternative hypothesis: two.sided\n\n\n$`2015 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.026761, observed rank = 948, p-value = 0.104\nalternative hypothesis: two.sided\n\n\n$`2015 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.0039809, observed rank = 661, p-value = 0.678\nalternative hypothesis: two.sided\n\n\n$`2016 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.33839, observed rank = 999, p-value = 0.002\nalternative hypothesis: two.sided\n\n\n$`2016 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.15389, observed rank = 972, p-value = 0.056\nalternative hypothesis: two.sided\n\n\n$`2016 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.20739, observed rank = 989, p-value = 0.022\nalternative hypothesis: two.sided\n\n\n$`2016 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.01419, observed rank = 592, p-value = 0.816\nalternative hypothesis: two.sided\n\n\n$`2017 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.3469, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n$`2017 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.16617, observed rank = 967, p-value = 0.066\nalternative hypothesis: two.sided\n\n\n$`2017 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.13331, observed rank = 944, p-value = 0.112\nalternative hypothesis: two.sided\n\n\n$`2017 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.00055524, observed rank = 715, p-value = 0.57\nalternative hypothesis: two.sided\n\n\n$`2018 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.34674, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n$`2018 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.18144, observed rank = 981, p-value = 0.038\nalternative hypothesis: two.sided\n\n\n$`2018 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.21227, observed rank = 995, p-value = 0.01\nalternative hypothesis: two.sided\n\n\n$`2018 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.017361, observed rank = 645, p-value = 0.71\nalternative hypothesis: two.sided\n\n\n$`2019 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.3326, observed rank = 999, p-value = 0.002\nalternative hypothesis: two.sided\n\n\n$`2019 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.18367, observed rank = 980, p-value = 0.04\nalternative hypothesis: two.sided\n\n\n$`2019 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.2018, observed rank = 989, p-value = 0.022\nalternative hypothesis: two.sided\n\n\n$`2019 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.0024228, observed rank = 713, p-value = 0.574\nalternative hypothesis: two.sided\n\n\n$`2020 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.2514, observed rank = 991, p-value = 0.018\nalternative hypothesis: two.sided\n\n\n$`2020 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.26328, observed rank = 995, p-value = 0.01\nalternative hypothesis: two.sided\n\n\n$`2020 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.23789, observed rank = 997, p-value = 0.006\nalternative hypothesis: two.sided\n\n\n$`2020 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.079912, observed rank = 871, p-value = 0.258\nalternative hypothesis: two.sided\n\n\n$`2021 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.26534, observed rank = 993, p-value = 0.014\nalternative hypothesis: two.sided\n\n\n$`2021 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.22849, observed rank = 988, p-value = 0.024\nalternative hypothesis: two.sided\n\n\n$`2021 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.25055, observed rank = 998, p-value = 0.004\nalternative hypothesis: two.sided\n\n\n$`2021 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.096175, observed rank = 904, p-value = 0.192\nalternative hypothesis: two.sided\n\n\n$`2022 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.27121, observed rank = 995, p-value = 0.01\nalternative hypothesis: two.sided\n\n\n$`2022 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.25479, observed rank = 998, p-value = 0.004\nalternative hypothesis: two.sided\n\n\n$`2022 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.24802, observed rank = 996, p-value = 0.008\nalternative hypothesis: two.sided\n\n\n$`2022 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.1469, observed rank = 953, p-value = 0.094\nalternative hypothesis: two.sided\n\n\n$`2023 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.29126, observed rank = 995, p-value = 0.01\nalternative hypothesis: two.sided\n\n\n$`2023 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.28113, observed rank = 998, p-value = 0.004\nalternative hypothesis: two.sided\n\n\n$`2023 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.21204, observed rank = 993, p-value = 0.014\nalternative hypothesis: two.sided\n\n\n$`2023 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.072309, observed rank = 860, p-value = 0.28\nalternative hypothesis: two.sided\n\n\n\n\n\n\nhist(vietnam_farms_moran_i_mc_test_res[[\"2012 Cultivation farm\"]]$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nLocal Indicators of Spatial Association (LISA) help us identify clusters among different regions. In simpler terms, LISA is a statistical method that shows how much a region is affected by its neighboring areas, with higher values indicating a stronger influence from the surroundings.\n\n\n\n\n\n\n#Helper function\ncompute_list_of_lisa &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    \n    event_data_list[[col_name]] &lt;- data[[col_name]] %&gt;% \n      mutate(local_moran = local_moran(\n        data[[col_name]][[col_name]], \n        vietnam_farms_q[[col_name]]$nb, \n        vietnam_farms_q[[col_name]]$wt, nsim = 99),\n             .before = 1) %&gt;%\n      unnest(local_moran)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\ncompute_list_of_lisa(\"vietnam_farms_list_lisa\", vietnam_farms_q, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_list_lisa\n\n$`2012 Cultivation farm`\n# A tibble: 63 × 17\n      ii       eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.240 -0.00366  0.0345 1.31  0.190     0.12         0.06   -0.953   0.603 \n 2 0.258  0.0229   0.0645 0.926 0.355     0.42         0.21   -1.14    1.14  \n 3 0.258 -0.0157   0.0732 1.01  0.312     0.34         0.17   -0.909  -0.0258\n 4 0.257 -0.0162   0.0597 1.12  0.264     0.1          0.05   -0.811  -0.205 \n 5 0.257  0.0474   0.0320 1.17  0.241     0.18         0.09   -0.985   0.735 \n 6 0.260  0.000680 0.0687 0.990 0.322     0.36         0.18   -0.897  -0.124 \n 7 0.252  0.00497  0.0477 1.13  0.257     0.14         0.07   -1.20    1.76  \n 8 0.255  0.0427   0.0447 1.01  0.315     0.16         0.08   -1.07    0.607 \n 9 0.247 -0.0102   0.0395 1.29  0.196     0.16         0.08   -0.933   1.07  \n10 0.259  0.0696   0.0651 0.742 0.458     0.46         0.23   -1.69    2.80  \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2012 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Livestock farm`\n# A tibble: 63 × 17\n         ii      eii  var_ii    z_ii    p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  1.74    -0.232   1.73     1.50   0.134       0.18         0.09    0.808\n 2  1.70     0.0352  0.548    2.25   0.0245      0.1          0.05    1.07 \n 3 -0.507   -0.0155  0.0271  -2.98   0.00286     0.04         0.02   -1.01 \n 4 -0.232    0.0116  0.0413  -1.20   0.230       0.26         0.13   -1.33 \n 5  0.571   -0.0248  0.365    0.986  0.324       0.26         0.13    1.63 \n 6  0.560    0.00104 0.368    0.921  0.357       0.3          0.15    1.38 \n 7  1.17    -0.00168 0.243    2.38   0.0174      0.06         0.03    1.54 \n 8  0.466   -0.0120  0.118    1.39   0.165       0.18         0.09    1.93 \n 9  0.164   -0.00629 0.00767  1.94   0.0520      0.12         0.06    1.44 \n10 -0.00708 -0.00432 0.00168 -0.0672 0.946       0.66         0.33   -1.15 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2012 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Fishing farm`\n# A tibble: 63 × 17\n         ii       eii   var_ii     z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.0517   0.00334  0.0135   -0.473   0.636     0.66         0.32     2.35\n 2  0.00671  0.000232 0.00272   0.124   0.901     0.54         0.27    -3.48\n 3  0.0106   0.0129   0.00460  -0.0345  0.972     0.46         0.23    -5.01\n 4 -0.00494 -0.000977 0.000237 -0.258   0.797     0.88         0.44     3.87\n 5 -0.00282 -0.0117   0.00862   0.0952  0.924     0.3          0.15    -2.84\n 6 -0.00576 -0.00219  0.000554 -0.152   0.879     0.18         0.09    -2.99\n 7 -0.0186  -0.00549  0.00841  -0.143   0.886     0.24         0.12    -2.70\n 8 -0.00842 -0.00948  0.0844    0.00365 0.997     0.2          0.1      2.98\n 9 -0.0181   0.000777 0.00255  -0.375   0.708     0.2          0.1     -2.70\n10  0.0499   0.00720  0.0709    0.160   0.873     0.22         0.11     3.83\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2012 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Others(*)`\n# A tibble: 63 × 17\n        ii      eii  var_ii    z_ii   p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.436  -0.169   0.692   -0.322  0.748      0.98         0.49     1.82\n 2 -0.0376  0.00427 0.00133 -1.15   0.251      0.32         0.16    -1.66\n 3 -0.186  -0.00534 0.0103  -1.78   0.0752     0.24         0.12    -1.72\n 4 -0.0433  0.00159 0.0183  -0.332  0.740      0.44         0.22    -1.62\n 5 -0.316  -0.0623  0.316   -0.451  0.652      0.98         0.49     1.76\n 6 -0.0464 -0.00469 0.00643 -0.520  0.603      0.36         0.18    -1.71\n 7 -0.317   0.00323 0.0309  -1.83   0.0679     0.16         0.08    -1.79\n 8 -0.0234 -0.00347 0.00246 -0.402  0.688      0.52         0.26    -1.51\n 9  0.119  -0.00982 0.0290   0.759  0.448      0.46         0.23     1.02\n10 -0.0219 -0.0307  0.0328   0.0485 0.961      0.64         0.32    -1.67\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2012 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Cultivation farm`\n# A tibble: 63 × 17\n      ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.243 -0.00197 0.0453 1.15  0.250     0.14         0.08   -0.962   1.04  \n 2 0.268  0.0191  0.0673 0.960 0.337     0.44         0.22   -1.02    1.08  \n 3 0.266 -0.00362 0.0621 1.08  0.279     0.28         0.14   -0.861   0.118 \n 4 0.265  0.0124  0.0569 1.06  0.290     0.24         0.13   -0.996   0.892 \n 5 0.268  0.0119  0.0344 1.38  0.168     0.1          0.05   -0.299  -0.952 \n 6 0.267  0.0614  0.0724 0.766 0.444     0.24         0.12   -1.91    4.18  \n 7 0.261 -0.0112  0.0484 1.24  0.216     0.26         0.13   -0.377  -0.901 \n 8 0.270 -0.0238  0.0675 1.13  0.258     0.16         0.09   -0.750   0.0788\n 9 0.252 -0.0345  0.0585 1.19  0.236     0.2          0.1    -0.979   0.533 \n10 0.273  0.0343  0.0883 0.802 0.422     0.32         0.16   -1.33    1.00  \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2013 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Livestock farm`\n# A tibble: 63 × 17\n        ii       eii   var_ii   z_ii     p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  1.96   -0.369    1.09      2.23  0.0257       0.08         0.04     2.14\n 2  1.58   -0.0781   0.571     2.20  0.0280       0.14         0.07     1.22\n 3 -0.510  -0.00721  0.0188   -3.67  0.000238     0.02         0.01    -1.01\n 4 -0.177   0.0186   0.0142   -1.64  0.101        0.16         0.08    -1.78\n 5  0.667  -0.000971 0.325     1.17  0.241        0.3          0.15     1.12\n 6  0.728  -0.119    0.442     1.27  0.203        0.22         0.11     1.28\n 7  1.33   -0.0634   0.197     3.15  0.00164      0.04         0.02     1.38\n 8  0.541  -0.0140   0.0714    2.08  0.0380       0.14         0.07     1.71\n 9  0.691  -0.0115   0.182     1.65  0.0999       0.2          0.1      1.61\n10 -0.0130  0.000528 0.000429 -0.651 0.515        0.36         0.18    -1.59\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2013 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Fishing farm`\n# A tibble: 63 × 17\n         ii       eii      var_ii    z_ii    p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.0491   0.00179  0.0105      -0.498  6.19e-1     0.38         0.19     1.98\n 2  0.00805  0.00326  0.00349      0.0812 9.35e-1     0.5          0.25    -5.41\n 3  0.00986 -0.0212   0.0187       0.227  8.20e-1     0.46         0.23    -2.85\n 4 -0.0117   0.000458 0.00246     -0.245  8.06e-1     0.66         0.33     3.20\n 5 -0.00516  0.00554  0.00239     -0.219  8.27e-1     0.18         0.09    -3.18\n 6  0.00199 -0.00133  0.000000732  3.88   1.04e-4     0.04         0.02     2.45\n 7 -0.0183  -0.00811  0.0113      -0.0960 9.24e-1     0.22         0.11    -3.11\n 8  0.00101 -0.0538   0.0427       0.265  7.91e-1     0.12         0.06     4.42\n 9 -0.0196   0.00183  0.00399     -0.339  7.35e-1     0.14         0.07    -4.36\n10  0.0498   0.0133   0.125        0.103  9.18e-1     0.16         0.08     4.79\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2013 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Others(*)`\n# A tibble: 63 × 17\n         ii       eii   var_ii    z_ii   p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.175   -0.191    1.19      0.0153 0.988      0.78         0.39     1.06\n 2  0.151   -0.0103   0.00479   2.33   0.0200     0.1          0.05     1.47\n 3 -0.408   -0.00389  0.0566   -1.70   0.0894     0.16         0.08    -1.98\n 4 -0.00714  0.00266  0.00129  -0.273  0.785      0.5          0.25    -1.47\n 5  0.00737 -0.0596   0.0778    0.240  0.810      0.56         0.28     1.27\n 6  0.204    0.0161   0.0519    0.824  0.410      0.36         0.18     1.80\n 7 -0.388   -0.0172   0.0368   -1.93   0.0534     0.14         0.07    -1.36\n 8  0.0936  -0.0588   0.141     0.405  0.685      0.44         0.22     1.36\n 9  0.0350   0.000965 0.000469  1.57   0.116      0.18         0.09     1.42\n10 -0.0915  -0.00839  0.0451   -0.391  0.696      0.36         0.18    -2.29\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2013 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Cultivation farm`\n# A tibble: 63 × 17\n      ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.281  0.00377 0.0316 1.56  0.119     0.14         0.07   -0.277  -0.630 \n 2 0.287 -0.0360  0.0622 1.29  0.196     0.28         0.14   -0.388  -0.543 \n 3 0.298  0.0179  0.0775 1.00  0.315     0.28         0.14   -1.12    0.881 \n 4 0.291 -0.0509  0.0829 1.19  0.235     0.16         0.08   -0.915   1.22  \n 5 0.301 -0.0154  0.0585 1.31  0.190     0.1          0.05   -0.909   0.662 \n 6 0.319 -0.0329  0.132  0.969 0.332     0.24         0.12   -1.37    2.88  \n 7 0.303 -0.00728 0.0552 1.32  0.187     0.14         0.07   -0.610  -0.0144\n 8 0.318 -0.0255  0.0629 1.37  0.171     0.04         0.02   -0.876   0.633 \n 9 0.301 -0.0277  0.0519 1.44  0.150     0.14         0.07   -0.161  -0.830 \n10 0.324 -0.0245  0.150  0.901 0.368     0.24         0.14   -1.33    2.00  \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2014 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Livestock farm`\n# A tibble: 63 × 17\n        ii       eii  var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  1.41    0.00232  1.42     1.18  0.237       0.34         0.17    1.00 \n 2  0.889  -0.0811   0.202    2.16  0.0307      0.16         0.08    1.54 \n 3 -0.487  -0.00439  0.0256  -3.02  0.00256     0.04         0.02   -2.28 \n 4 -0.0880  0.000509 0.0102  -0.874 0.382       0.26         0.13   -2.17 \n 5  0.437  -0.0297   0.117    1.37  0.172       0.26         0.13    1.11 \n 6  0.482   0.0779   0.422    0.622 0.534       0.32         0.16    1.85 \n 7  1.21   -0.0451   0.245    2.54  0.0112      0.12         0.06    1.35 \n 8  0.573  -0.0284   0.124    1.70  0.0882      0.22         0.11    0.993\n 9  0.526   0.00644  0.0907   1.73  0.0845      0.18         0.09    1.28 \n10 -0.0597 -0.00234  0.00518 -0.797 0.426       0.42         0.21   -1.62 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2014 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Fishing farm`\n# A tibble: 63 × 17\n          ii      eii   var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n       &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.0271   -0.00430 0.00281  -0.429  0.668     0.4          0.2      3.22\n 2  0.00649  -0.00434 0.00129   0.302  0.763     0.88         0.44    -2.73\n 3  0.0163   -0.00712 0.0114    0.220  0.826     0.58         0.29    -2.95\n 4 -0.0207   -0.00156 0.00995  -0.192  0.848     0.76         0.38     4.89\n 5 -0.000399  0.00361 0.00302  -0.0729 0.942     0.16         0.08    -4.07\n 6  0.00563  -0.00132 0.000362  0.365  0.715     0.08         0.04     5.13\n 7 -0.000866 -0.00556 0.00743   0.0545 0.957     0.3          0.15    -2.72\n 8  0.00359   0.00996 0.0296   -0.0370 0.970     0.22         0.11     2.56\n 9 -0.0123   -0.00535 0.00520  -0.0966 0.923     0.26         0.13    -2.25\n10  0.00128  -0.0283  0.0510    0.131  0.896     0.1          0.05     5.29\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2014 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Others(*)`\n# A tibble: 63 × 17\n         ii       eii   var_ii     z_ii    p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.287   -0.301    1.36      0.0124  0.990       0.7          0.35     1.37\n 2  0.0267   0.000213 0.000177  1.99    0.0464      0.16         0.08     1.85\n 3 -0.498   -0.000586 0.0356   -2.63    0.00842     0.08         0.04    -1.69\n 4  0.0431  -0.0132   0.0696    0.213   0.831       0.52         0.26     1.62\n 5  0.0684  -0.0353   0.125     0.293   0.769       0.46         0.23     1.44\n 6 -0.203    0.0158   0.0126   -1.95    0.0517      0.12         0.06    -2.29\n 7 -0.415   -0.0124   0.0362   -2.12    0.0342      0.06         0.03    -2.93\n 8 -0.00990 -0.00819  0.158    -0.00429 0.997       0.6          0.3      1.80\n 9 -0.104    0.00206  0.00246  -2.13    0.0333      0.12         0.06    -1.11\n10 -0.0600  -0.0172   0.0208   -0.297   0.766       0.4          0.2     -2.05\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2014 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Cultivation farm`\n# A tibble: 63 × 17\n      ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.263 -0.00255 0.0359 1.40  0.162     0.22         0.11   -0.620  -0.0883\n 2 0.288 -0.0269  0.0825 1.09  0.274     0.4          0.2    -0.430  -0.868 \n 3 0.286  0.0354  0.0734 0.927 0.354     0.58         0.29   -0.937   0.418 \n 4 0.290 -0.0385  0.0735 1.21  0.226     0.26         0.13   -0.572  -0.258 \n 5 0.296  0.00308 0.0553 1.25  0.213     0.2          0.1    -0.519  -0.344 \n 6 0.317  0.00326 0.0786 1.12  0.262     0.18         0.09   -0.879   0.949 \n 7 0.289 -0.00753 0.0557 1.26  0.209     0.12         0.06   -0.722  -0.0330\n 8 0.316 -0.00938 0.0684 1.25  0.213     0.12         0.06   -0.603  -0.624 \n 9 0.290 -0.00145 0.0580 1.21  0.226     0.26         0.13   -0.729   0.0944\n10 0.321 -0.0277  0.127  0.977 0.328     0.16         0.09   -0.779  -0.531 \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2015 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Livestock farm`\n# A tibble: 63 × 17\n        ii      eii var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  1.56   -0.203   1.19    1.62  0.106       0.2          0.1      1.09\n 2  0.894   0.0397  0.337   1.47  0.141       0.32         0.16     1.76\n 3 -0.482  -0.0232  0.0298 -2.66  0.00778     0.08         0.04    -1.66\n 4 -0.0789  0.0128  0.0132 -0.798 0.425       0.34         0.17    -1.82\n 5  0.293  -0.0131  0.0854  1.05  0.295       0.28         0.14     1.25\n 6  0.302  -0.0255  0.103   1.02  0.308       0.18         0.09     2.24\n 7  1.20    0.104   0.276   2.09  0.0368      0.1          0.05     1.30\n 8  0.544  -0.0846  0.0767  2.27  0.0233      0.14         0.07     1.30\n 9  0.918  -0.00349 0.291   1.71  0.0876      0.12         0.06     1.73\n10 -0.104   0.0110  0.0103 -1.13  0.256       0.16         0.08    -2.32\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2015 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Fishing farm`\n# A tibble: 63 × 17\n         ii      eii   var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.0381  -0.00206 0.00599  -0.465  0.642     0.6          0.3      2.78\n 2  0.00590  0.00376 0.000430  0.103  0.918     0.64         0.32    -4.90\n 3  0.0159  -0.00684 0.0138    0.193  0.847     0.6          0.3     -2.90\n 4 -0.0316  -0.0114  0.0156   -0.162  0.871     0.56         0.28     3.87\n 5 -0.00503  0.00235 0.00295  -0.136  0.892     0.2          0.1     -2.71\n 6  0.0152   0.00140 0.00209   0.302  0.763     0.14         0.07     3.86\n 7 -0.00544 -0.0117  0.0101    0.0626 0.950     0.3          0.15    -2.36\n 8  0.0179   0.00290 0.0411    0.0739 0.941     0.24         0.12     2.70\n 9 -0.0182  -0.00311 0.00459  -0.223  0.823     0.24         0.12    -2.31\n10  0.0168   0.0650  0.230    -0.100  0.920     0.26         0.13     2.75\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2015 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Others(*)`\n# A tibble: 63 × 17\n         ii       eii   var_ii    z_ii   p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.568   -0.227    1.28     -0.300  0.764      0.96         0.48     1.72\n 2 -0.0414  -0.00285  0.000542 -1.65   0.0982     0.22         0.11    -1.85\n 3 -0.411    0.000394 0.0495   -1.85   0.0644     0.16         0.08    -2.63\n 4 -0.0198  -0.0130   0.0437   -0.0325 0.974      0.68         0.34     1.50\n 5 -0.166   -0.00810  0.173    -0.380  0.704      1            0.5      2.05\n 6 -0.113    0.0384   0.0187   -1.10   0.269      0.18         0.09    -3.62\n 7 -0.299    0.00691  0.0321   -1.71   0.0877     0.22         0.11    -2.03\n 8  0.00689 -0.00476  0.00722   0.137  0.891      0.78         0.39    -1.42\n 9 -0.0887   0.00396  0.00383  -1.50   0.134      0.28         0.14    -1.33\n10  0.0210   0.0152   0.0106    0.0556 0.956      0.8          0.39    -2.22\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2015 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Cultivation farm`\n# A tibble: 63 × 17\n      ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness  kurtosis\n   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 0.201 -0.0184  0.0249 1.39  0.164     0.1          0.05   -0.709  0.351   \n 2 0.208  0.0213  0.0612 0.754 0.451     0.74         0.37   -0.856 -0.222   \n 3 0.249  0.0168  0.0608 0.943 0.346     0.36         0.18   -0.883 -0.0749  \n 4 0.228 -0.0302  0.0687 0.985 0.325     0.42         0.21   -0.899 -0.148   \n 5 0.260 -0.00923 0.0371 1.40  0.162     0.1          0.05   -0.647 -0.000635\n 6 0.250  0.00596 0.0811 0.856 0.392     0.32         0.16   -1.47   2.34    \n 7 0.268  0.0411  0.0499 1.02  0.309     0.26         0.13   -0.992  0.348   \n 8 0.265 -0.0259  0.0633 1.16  0.247     0.1          0.05   -1.06   0.772   \n 9 0.237 -0.0154  0.0465 1.17  0.242     0.16         0.08   -0.754 -0.149   \n10 0.276  0.0252  0.0847 0.863 0.388     0.22         0.11   -1.19   0.302   \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2016 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Livestock farm`\n# A tibble: 63 × 17\n       ii      eii var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness kurtosis\n    &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  1.61  -0.592   1.29    1.94  5.22e-2     0.12         0.06     2.21    6.56 \n 2  1.21  -0.0305  0.203   2.76  5.82e-3     0.1          0.05     1.64    2.32 \n 3 -0.589  0.0119  0.0347 -3.23  1.25e-3     0.04         0.02    -2.31    6.24 \n 4 -0.169 -0.00112 0.0221 -1.13  2.59e-1     0.3          0.15    -1.36    1.10 \n 5  0.389 -0.0608  0.218   0.964 3.35e-1     0.4          0.2      1.31    0.580\n 6  0.516 -0.0842  0.241   1.22  2.21e-1     0.2          0.1      1.89    3.25 \n 7  0.601  0.00492 0.0320  3.33  8.67e-4     0.02         0.01     1.18    0.335\n 8  0.455 -0.0351  0.0501  2.19  2.86e-2     0.1          0.05     1.36    1.60 \n 9  0.880 -0.0203  0.229   1.88  6.00e-2     0.16         0.08     1.50    1.89 \n10 -0.116 -0.0162  0.0239 -0.647 5.17e-1     0.3          0.15    -1.66    1.71 \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2016 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Fishing farm`\n# A tibble: 63 × 17\n         ii        eii   var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.670   -0.0573    0.879    -0.654 0.513       0.62         0.31    1.15 \n 2 -0.00536  0.0000433 0.000107 -0.523 0.601       0.46         0.23   -1.70 \n 3 -0.314    0.0000464 0.0761   -1.14  0.255       0.26         0.13   -1.49 \n 4 -0.622   -0.0887    0.516    -0.743 0.458       0.44         0.22    1.58 \n 5 -0.231    0.0129    0.0181   -1.82  0.0695      0.14         0.07   -0.875\n 6 -0.779    0.0375    0.0750   -2.98  0.00287     0.06         0.03   -1.75 \n 7  0.426   -0.00679   0.0388    2.20  0.0280      0.12         0.06    1.43 \n 8  1.37    -0.236     1.47      1.32  0.186       0.3          0.15    0.898\n 9 -0.350    0.000282  0.0115   -3.26  0.00112     0.02         0.01   -0.959\n10  2.55    -0.0442    2.39      1.68  0.0934      0.22         0.11    1.43 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2016 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Others(*)`\n# A tibble: 63 × 17\n          ii       eii     var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n       &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.0145    0.0145   0.0337     -0.158  0.875     0.54         0.27     1.88\n 2  0.0584   -0.000281 0.00704     0.699  0.484     0.16         0.08     2.86\n 3 -0.0133   -0.0230   0.0303      0.0557 0.956     0.42         0.21    -2.36\n 4  0.00457  -0.00268  0.000354    0.385  0.700     0.96         0.49    -2.33\n 5 -0.0146    0.00179  0.00136    -0.447  0.655     0.72         0.36     2.71\n 6  0.0130   -0.0106   0.0258      0.146  0.884     0.68         0.34    -3.09\n 7 -0.00207   0.00788  0.00692    -0.120  0.905     0.5          0.25    -3.15\n 8  0.0240    0.0116   0.00557     0.166  0.868     0.9          0.45    -3.63\n 9 -0.000323 -0.000244 0.00000299 -0.0461 0.963     0.68         0.34     2.80\n10  0.0218   -0.0109   0.0185      0.240  0.810     0.8          0.4     -4.07\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2016 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Cultivation farm`\n# A tibble: 63 × 17\n      ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.190 -0.00751 0.0223 1.33  0.185     0.18         0.09   -0.519   -0.297\n 2 0.206  0.0312  0.0575 0.731 0.465     0.56         0.28   -1.06     0.399\n 3 0.247  0.0179  0.0631 0.913 0.361     0.52         0.26   -0.908    0.259\n 4 0.251 -0.0390  0.0750 1.06  0.290     0.42         0.21   -0.693   -0.240\n 5 0.269  0.0123  0.0449 1.21  0.225     0.12         0.06   -0.671   -0.421\n 6 0.281 -0.0557  0.115  0.995 0.320     0.22         0.11   -0.877   -0.333\n 7 0.253  0.0197  0.0486 1.06  0.289     0.16         0.08   -1.22     1.63 \n 8 0.274 -0.00907 0.0563 1.19  0.232     0.12         0.06   -0.663   -0.275\n 9 0.235  0.0308  0.0407 1.01  0.312     0.36         0.18   -0.779   -0.104\n10 0.284 -0.0230  0.115  0.907 0.364     0.16         0.08   -0.928   -0.338\n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2017 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Livestock farm`\n# A tibble: 63 × 17\n       ii     eii var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness kurtosis\n    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  1.96  -0.326  1.61    1.80  0.0718      0.16         0.08     2.01     5.59\n 2  1.32  -0.0526 0.247   2.75  0.00590     0.08         0.04     1.43     1.52\n 3 -0.612 -0.0267 0.0448 -2.77  0.00566     0.06         0.03    -1.91     4.09\n 4 -0.126  0.0142 0.0251 -0.883 0.377       0.26         0.13    -2.39     7.54\n 5  0.416  0.0566 0.353   0.605 0.545       0.44         0.22     1.84     3.58\n 6  0.254 -0.0289 0.0543  1.21  0.225       0.16         0.08     2.00     5.12\n 7  1.54   0.0377 0.281   2.84  0.00451     0.06         0.03     1.33     1.78\n 8  0.517  0.0288 0.150   1.26  0.208       0.26         0.13     1.85     4.41\n 9  0.956 -0.0220 0.226   2.06  0.0394      0.08         0.04     1.77     3.89\n10 -0.108  0.0250 0.0106 -1.29  0.198       0.16         0.08    -2.39     7.15\n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2017 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Fishing farm`\n# A tibble: 63 × 17\n        ii       eii  var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.782  -0.0396   0.519   -1.03  0.302       0.2          0.1     1.02 \n 2 -0.0301 -0.00683  0.0148  -0.192 0.848       0.6          0.3    -1.23 \n 3 -0.102  -0.0167   0.0667  -0.332 0.740       0.64         0.32   -1.18 \n 4 -0.384  -0.0800   0.569   -0.403 0.687       1            0.5     1.63 \n 5 -0.168  -0.00442  0.0188  -1.19  0.234       0.22         0.11   -1.37 \n 6  0.196  -0.00760  0.00512  2.85  0.00435     0.02         0.01    1.05 \n 7 -0.360  -0.00417  0.0425  -1.73  0.0843      0.16         0.08   -1.03 \n 8  0.758  -0.0559   1.46     0.675 0.500       0.5          0.25    1.03 \n 9 -0.317  -0.000507 0.0206  -2.21  0.0274      0.1          0.05   -0.929\n10  1.70   -0.362    1.59     1.63  0.103       0.2          0.1     2.29 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2017 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Others(*)`\n# A tibble: 63 × 17\n         ii       eii   var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.174   -0.0379   0.259    -0.267  0.789     0.86         0.43     2.70\n 2  0.0729   0.00163  0.00663   0.875  0.381     0.16         0.08     3.07\n 3 -0.0816  -0.0207   0.0243   -0.390  0.696     0.24         0.12    -2.29\n 4 -0.00551  0.00555  0.00217  -0.238  0.812     0.7          0.35     2.25\n 5 -0.0869   0.00808  0.0328   -0.525  0.600     0.68         0.33     2.17\n 6 -0.0175  -0.00207  0.0168   -0.119  0.905     0.52         0.26    -3.27\n 7 -0.0710   0.0101   0.0114   -0.759  0.448     0.2          0.1     -2.99\n 8  0.0246   0.00343  0.0152    0.172  0.864     0.72         0.36    -2.65\n 9 -0.00186 -0.00114  0.000146 -0.0593 0.953     0.44         0.22    -2.45\n10  0.0111   0.000683 0.0225    0.0692 0.945     0.56         0.28    -3.48\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2017 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Cultivation farm`\n# A tibble: 63 × 17\n      ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.192 -0.00743 0.0197 1.42  0.155     0.16         0.08   -0.842   0.663 \n 2 0.188 -0.0640  0.0767 0.908 0.364     0.58         0.29   -0.761   0.0146\n 3 0.246 -0.00524 0.0691 0.955 0.340     0.4          0.2    -1.06    0.828 \n 4 0.251 -0.0243  0.0668 1.06  0.287     0.26         0.13   -0.968   0.613 \n 5 0.270 -0.0261  0.0564 1.25  0.213     0.2          0.1    -0.615  -0.306 \n 6 0.286  0.0353  0.0938 0.819 0.413     0.28         0.14   -1.79    4.21  \n 7 0.257  0.00798 0.0529 1.08  0.279     0.24         0.12   -1.19    1.42  \n 8 0.280  0.0117  0.0569 1.12  0.261     0.08         0.04   -1.05    0.645 \n 9 0.237  0.0130  0.0391 1.13  0.257     0.38         0.19   -0.455  -0.595 \n10 0.289  0.0442  0.0700 0.926 0.354     0.22         0.11   -0.968  -0.153 \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2018 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Livestock farm`\n# A tibble: 63 × 17\n        ii      eii var_ii   z_ii      p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  2.04   -0.322   1.97    1.68  0.0925        0.18         0.09     1.05\n 2  1.49    0.0750  0.411   2.21  0.0269        0.08         0.04     1.40\n 3 -0.601   0.0249  0.0225 -4.17  0.0000309     0.02         0.01    -1.83\n 4 -0.117   0.00685 0.0209 -0.855 0.392         0.3          0.15    -1.41\n 5  0.350  -0.00141 0.149   0.908 0.364         0.46         0.23     1.16\n 6  0.295  -0.00659 0.160   0.753 0.451         0.26         0.13     1.87\n 7  1.40    0.0851  0.295   2.41  0.0159        0.08         0.04     1.35\n 8  0.422  -0.0503  0.0541  2.03  0.0423        0.16         0.08     1.28\n 9  0.669  -0.0227  0.101   2.17  0.0299        0.1          0.05     1.63\n10 -0.0926 -0.00194 0.0244 -0.581 0.561         0.36         0.18    -1.67\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2018 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Fishing farm`\n# A tibble: 63 × 17\n        ii      eii  var_ii   z_ii      p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.784  -0.154   0.689   -0.759 0.448         0.48         0.23    1.56 \n 2 -0.0311 -0.00502 0.00261 -0.509 0.611         0.56         0.28   -1.13 \n 3 -0.146   0.00426 0.0595  -0.617 0.537         0.44         0.22   -1.36 \n 4 -0.409  -0.118   0.554   -0.391 0.696         1            0.5     1.02 \n 5 -0.220  -0.0124  0.0201  -1.47  0.143         0.18         0.09   -1.09 \n 6  0.366  -0.0330  0.00886  4.24  0.0000220     0.02         0.01    1.37 \n 7 -0.467  -0.0257  0.0584  -1.83  0.0679        0.12         0.06   -0.795\n 8  1.17   -0.133   1.87     0.955 0.340         0.38         0.19    1.10 \n 9 -0.349  -0.0220  0.0185  -2.41  0.0161        0.06         0.03   -0.838\n10  2.43    0.118   2.48     1.47  0.142         0.26         0.13    1.25 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2018 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Others(*)`\n# A tibble: 63 × 17\n         ii       eii   var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.271   -0.0162   0.462    -0.374  0.708     0.82         0.41     1.88\n 2 -0.0312  -0.00491  0.00112  -0.786  0.432     0.22         0.11    -2.67\n 3 -0.126   -0.00482  0.0216   -0.823  0.410     0.22         0.11    -2.28\n 4 -0.0236   0.00850  0.0156   -0.257  0.797     0.76         0.38     2.18\n 5 -0.0885  -0.0359   0.0182   -0.391  0.696     0.98         0.49     2.67\n 6 -0.0387   0.0120   0.0245   -0.324  0.746     0.34         0.17    -3.43\n 7 -0.0772   0.00425  0.00814  -0.903  0.367     0.18         0.09    -2.65\n 8  0.0213  -0.0174   0.0274    0.234  0.815     0.86         0.43    -2.16\n 9  0.00484  0.000240 0.000179  0.344  0.731     0.34         0.17     1.96\n10  0.00790  0.00540  0.0257    0.0156 0.988     0.38         0.19    -3.32\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2018 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Cultivation farm`\n# A tibble: 63 × 17\n        ii       eii  var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.00500  0.000804 1.45e-5 1.10  0.271     0.28         0.14   -1.14    1.72  \n 2 0.106   -0.0299   6.36e-2 0.539 0.590     0.66         0.33   -0.789  -0.315 \n 3 0.196    0.0422   6.83e-2 0.588 0.557     0.78         0.39   -1.59    3.13  \n 4 0.254    0.0123   6.08e-2 0.979 0.328     0.34         0.17   -0.910  -0.0380\n 5 0.274    0.00146  4.60e-2 1.27  0.205     0.1          0.05   -0.906   0.608 \n 6 0.287    0.0538   7.95e-2 0.827 0.408     0.28         0.14   -1.71    2.60  \n 7 0.223   -0.0138   4.98e-2 1.06  0.289     0.34         0.17   -0.755  -0.111 \n 8 0.274   -0.0194   5.61e-2 1.24  0.216     0.04         0.02   -1.03    0.698 \n 9 0.203    0.000211 4.74e-2 0.934 0.350     0.32         0.16   -1.29    1.90  \n10 0.291   -0.0420   9.87e-2 1.06  0.290     0.2          0.1    -0.872  -0.166 \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2019 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Livestock farm`\n# A tibble: 63 × 17\n        ii      eii var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  2.08   -0.348   1.58    1.93  0.0540      0.12         0.06    0.808\n 2  1.78   -0.0297  0.529   2.49  0.0128      0.08         0.04    1.41 \n 3 -0.563  -0.0271  0.0330 -2.95  0.00315     0.04         0.02   -1.61 \n 4 -0.110  -0.00303 0.0231 -0.701 0.483       0.32         0.16   -1.55 \n 5  0.314  -0.0115  0.146   0.853 0.394       0.42         0.21    1.69 \n 6  0.279  -0.0382  0.152   0.813 0.416       0.28         0.14    1.93 \n 7  1.30   -0.0158  0.182   3.09  0.00197     0.02         0.01    1.10 \n 8  0.432  -0.00393 0.141   1.16  0.246       0.24         0.12    2.10 \n 9  0.623   0.0362  0.0948  1.91  0.0567      0.08         0.04    1.02 \n10 -0.0857  0.00118 0.0138 -0.738 0.460       0.26         0.13   -1.88 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2019 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Fishing farm`\n# A tibble: 63 × 17\n        ii      eii  var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.841  -0.0630  0.845   -0.846 0.397       0.44         0.22    1.25 \n 2 -0.0555 -0.00681 0.00796 -0.546 0.585       0.52         0.26   -1.12 \n 3 -0.166  -0.0185  0.0921  -0.485 0.628       0.46         0.23   -1.78 \n 4 -0.432  -0.0242  1.03    -0.402 0.688       0.98         0.49    1.30 \n 5 -0.227   0.0122  0.0142  -2.01  0.0449      0.1          0.05   -0.899\n 6  0.379  -0.00327 0.0187   2.79  0.00529     0.06         0.03    1.44 \n 7 -0.485   0.0262  0.0427  -2.48  0.0133      0.02         0.01   -0.592\n 8  0.956  -0.489   1.56     1.16  0.248       0.26         0.13    1.68 \n 9 -0.341  -0.00273 0.0193  -2.44  0.0149      0.04         0.02   -1.23 \n10  2.15   -0.0693  1.48     1.82  0.0692      0.12         0.06    1.28 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2019 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Others(*)`\n# A tibble: 63 × 17\n         ii       eii    var_ii   z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.247   -0.0897   0.235     -0.324 0.746     0.94         0.47     2.02\n 2 -0.00982 -0.000254 0.0000510 -1.34  0.180     0.2          0.1     -2.06\n 3 -0.109    0.00585  0.0171    -0.877 0.380     0.24         0.12    -2.43\n 4 -0.0297   0.00909  0.0363    -0.204 0.839     0.64         0.32     3.17\n 5 -0.0803   0.0195   0.0393    -0.503 0.615     0.9          0.45     1.75\n 6 -0.0370   0.00520  0.0253    -0.265 0.791     0.42         0.21    -3.06\n 7 -0.0710   0.0180   0.00920   -0.928 0.353     0.2          0.1     -4.30\n 8  0.0243  -0.00790  0.0215     0.219 0.827     0.84         0.42    -1.94\n 9  0.00190 -0.00109  0.0000376  0.488 0.626     0.36         0.18     2.16\n10  0.0123  -0.0383   0.0507     0.225 0.822     0.7          0.35    -2.99\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2019 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Cultivation farm`\n# A tibble: 63 × 17\n       ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n    &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.110  -0.0127  0.0116 1.14  0.254     0.18         0.09   -0.658   -0.467\n 2 0.0776 -0.0211  0.0634 0.392 0.695     0.88         0.44   -1.40     2.11 \n 3 0.158  -0.00480 0.0581 0.675 0.499     0.74         0.37   -0.894   -0.167\n 4 0.200  -0.0194  0.0677 0.844 0.399     0.52         0.26   -1.12     0.763\n 5 0.177  -0.0116  0.0269 1.15  0.250     0.18         0.09   -0.905    0.535\n 6 0.247  -0.0105  0.0990 0.817 0.414     0.36         0.18   -1.32     0.840\n 7 0.147  -0.0168  0.0244 1.05  0.294     0.22         0.11   -1.56     3.61 \n 8 0.235   0.0255  0.0332 1.15  0.251     0.24         0.12   -0.860    0.467\n 9 0.182  -0.0249  0.0482 0.944 0.345     0.38         0.19   -1.24     2.05 \n10 0.274   0.00422 0.0971 0.865 0.387     0.24         0.12   -1.57     2.26 \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2020 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Livestock farm`\n# A tibble: 63 × 17\n        ii      eii var_ii   z_ii      p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  2.99   -0.305   2.14    2.25  0.0244        0.1          0.05    1.13 \n 2  2.07   -0.175   0.399   3.55  0.000386      0.04         0.02    2.24 \n 3 -0.806   0.00391 0.0402 -4.04  0.0000529     0.02         0.01   -1.20 \n 4 -0.176   0.0360  0.0448 -1.00  0.317         0.28         0.14   -1.67 \n 5  0.353  -0.0403  0.130   1.09  0.274         0.32         0.16    1.16 \n 6  0.249   0.0305  0.183   0.509 0.610         0.42         0.21    1.41 \n 7  2.03   -0.102   0.585   2.79  0.00525       0.06         0.03    2.70 \n 8  0.516  -0.0170  0.0740  1.96  0.0499        0.14         0.07    0.967\n 9  1.07    0.00172 0.240   2.18  0.0293        0.08         0.04    1.32 \n10 -0.0837  0.00247 0.0101 -0.857 0.392         0.4          0.2    -1.21 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2020 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Fishing farm`\n# A tibble: 63 × 17\n         ii       eii   var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.501   -0.00113  0.183    -1.17   0.244     0.12         0.06    0.815\n 2  0.00531  0.0196   0.0264   -0.0878 0.930     0.7          0.35   -1.85 \n 3 -0.0217   0.00569  0.0627   -0.109  0.913     0.74         0.37   -1.48 \n 4 -0.113   -0.0308   0.0341   -0.447  0.655     0.96         0.48    1.45 \n 5 -0.00144 -0.000209 0.000461 -0.0574 0.954     0.74         0.37   -1.44 \n 6 -0.0455   0.00664  0.00104  -1.62   0.105     0.14         0.07   -1.34 \n 7 -0.157    0.0105   0.0424   -0.814  0.416     0.44         0.22   -1.18 \n 8  0.0119  -0.0843   0.259     0.189  0.850     0.56         0.28    1.31 \n 9 -0.131    0.00438  0.0211   -0.930  0.352     0.32         0.16   -2.00 \n10  0.208   -0.116    0.234     0.671  0.502     0.34         0.17    2.43 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2020 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Others(*)`\n# A tibble: 63 × 17\n         ii       eii   var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.00843 -0.000657 0.000101 -0.774  0.439     0.4          0.2    -1.21 \n 2  0.147    0.00709  0.00772   1.59   0.112     0.18         0.09    1.45 \n 3 -0.0187  -0.000375 0.000188 -1.33   0.182     0.28         0.14   -1.06 \n 4 -0.247    0.0298   0.0450   -1.30   0.192     0.3          0.15   -1.03 \n 5 -0.500   -0.124    0.882    -0.401  0.688     0.9          0.45    1.17 \n 6 -0.265   -0.000543 0.107    -0.807  0.420     0.32         0.16   -2.43 \n 7 -0.0912  -0.00273  0.00902  -0.931  0.352     0.3          0.15   -1.60 \n 8 -0.179    0.00163  0.0514   -0.797  0.425     0.46         0.23   -1.27 \n 9 -0.103   -0.0327   0.0163   -0.553  0.580     0.74         0.37    0.826\n10  0.0224   0.000776 0.0556    0.0918 0.927     0.82         0.41   -0.912\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2020 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Cultivation farm`\n# A tibble: 63 × 17\n       ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n    &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.131   0.0139  0.0163 0.915 0.360     0.42         0.21   -0.948   0.651 \n 2 0.0628 -0.0165  0.0660 0.309 0.758     0.9          0.45   -0.779  -0.391 \n 3 0.133  -0.0528  0.0854 0.635 0.526     0.76         0.38   -1.26    1.49  \n 4 0.201  -0.0187  0.0723 0.817 0.414     0.5          0.26   -1.50    2.61  \n 5 0.124   0.0169  0.0140 0.904 0.366     0.32         0.16   -1.23    1.42  \n 6 0.242  -0.0235  0.127  0.744 0.457     0.5          0.25   -1.62    2.82  \n 7 0.135  -0.0284  0.0219 1.10  0.270     0.18         0.09   -0.762  -0.263 \n 8 0.235  -0.00168 0.0584 0.981 0.327     0.36         0.18   -0.912   0.0275\n 9 0.202  -0.00828 0.0522 0.921 0.357     0.34         0.17   -1.04    0.473 \n10 0.294  -0.0442  0.122  0.967 0.334     0.16         0.08   -1.10    0.369 \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2021 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Livestock farm`\n# A tibble: 63 × 17\n        ii      eii  var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  2.54   -0.371   1.54     2.35  0.0189      0.04         0.02    0.478\n 2  1.75   -0.112   0.322    3.28  0.00104     0.02         0.01    1.15 \n 3 -0.873  -0.0255  0.0739  -3.11  0.00184     0.04         0.02   -1.25 \n 4 -0.203  -0.0305  0.0877  -0.584 0.559       0.38         0.19   -1.58 \n 5  0.428   0.00969 0.137    1.13  0.258       0.3          0.15    1.02 \n 6  0.339  -0.00723 0.255    0.685 0.493       0.36         0.18    1.51 \n 7  2.05   -0.0372  0.406    3.28  0.00103     0.02         0.01    0.753\n 8  0.541  -0.00892 0.0997   1.74  0.0817      0.16         0.08    1.58 \n 9  0.600   0.0103  0.0707   2.22  0.0266      0.08         0.04    0.778\n10 -0.0521  0.0211  0.00530 -1.01  0.315       0.22         0.11   -1.53 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2021 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Fishing farm`\n# A tibble: 63 × 17\n         ii       eii  var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.368    0.0123   0.147   -0.994  0.320     0.2          0.1      1.37\n 2  0.0191  -0.00310  0.0328   0.123  0.902     0.84         0.42    -2.49\n 3 -0.00364  0.0138   0.0340  -0.0947 0.925     0.66         0.33    -1.67\n 4 -0.0881  -0.0239   0.0272  -0.389  0.697     1            0.5      1.89\n 5 -0.00190  0.000393 0.00102 -0.0718 0.943     0.8          0.4     -1.71\n 6 -0.0589   0.00452  0.00296 -1.17   0.244     0.24         0.12    -1.72\n 7 -0.121   -0.0653   0.0767  -0.202  0.840     0.6          0.3     -1.90\n 8 -0.0305   0.0156   0.298   -0.0845 0.933     0.78         0.39     1.15\n 9 -0.0981   0.000465 0.0159  -0.782  0.434     0.36         0.18    -1.10\n10  0.150   -0.00247  0.267    0.296  0.767     0.46         0.23     2.28\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2021 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Others(*)`\n# A tibble: 63 × 17\n        ii      eii  var_ii   z_ii   p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.0358  0.00170 0.00426  0.522 0.601      0.68         0.34    0.514\n 2  0.657  -0.0486  0.143    1.86  0.0625     0.1          0.05    1.58 \n 3 -0.0498 -0.00108 0.00213 -1.06  0.291      0.34         0.17   -1.23 \n 4 -0.106   0.00238 0.0340  -0.589 0.556      0.5          0.25   -1.34 \n 5 -0.561  -0.0856  0.532   -0.652 0.515      0.66         0.33    0.988\n 6 -0.195   0.0263  0.0725  -0.822 0.411      0.42         0.21   -1.18 \n 7 -0.0665  0.0146  0.0142  -0.681 0.496      0.44         0.22   -1.85 \n 8 -0.0381  0.00667 0.0494  -0.201 0.840      0.7          0.35   -1.34 \n 9  0.0980 -0.0101  0.0297   0.628 0.530      0.7          0.35   -1.02 \n10  0.148  -0.00114 0.0515   0.658 0.510      0.78         0.39   -1.21 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2021 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Cultivation farm`\n# A tibble: 63 × 17\n       ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n    &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.135   0.0126  0.0152 0.995 0.320     0.24         0.12   -1.05    0.634 \n 2 0.0988  0.0265  0.0708 0.272 0.786     0.96         0.48   -1.19    0.437 \n 3 0.147   0.0249  0.0323 0.681 0.496     0.68         0.34   -1.10    1.57  \n 4 0.213   0.0285  0.0479 0.844 0.399     0.38         0.19   -1.10    0.394 \n 5 0.120  -0.00425 0.0105 1.21  0.226     0.16         0.08   -0.675   0.223 \n 6 0.230  -0.0304  0.114  0.773 0.439     0.56         0.28   -1.33    1.35  \n 7 0.128  -0.00669 0.0234 0.877 0.381     0.32         0.16   -1.54    3.07  \n 8 0.220  -0.0176  0.0572 0.993 0.321     0.38         0.19   -0.843   0.0642\n 9 0.196  -0.0422  0.0619 0.957 0.339     0.4          0.2    -0.946   0.716 \n10 0.284   0.00362 0.0822 0.979 0.327     0.2          0.1    -1.23    0.940 \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2022 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Livestock farm`\n# A tibble: 63 × 17\n        ii      eii  var_ii   z_ii     p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  2.84   -0.334   2.42     2.04  0.0416       0.1          0.05    0.983\n 2  2.12   -0.0238  0.564    2.86  0.00428      0.04         0.02    1.35 \n 3 -1.02   -0.0274  0.0746  -3.64  0.000275     0.02         0.01   -1.16 \n 4 -0.281   0.0104  0.0767  -1.05  0.293        0.3          0.15   -1.38 \n 5  0.521  -0.00186 0.164    1.29  0.196        0.3          0.15    0.702\n 6  0.436   0.0636  0.437    0.563 0.573        0.52         0.26    1.05 \n 7  2.02   -0.00561 0.391    3.24  0.00118      0.02         0.01    0.689\n 8  0.561  -0.0693  0.0593   2.59  0.00962      0.08         0.04    1.05 \n 9  0.585   0.0260  0.0820   1.95  0.0509       0.1          0.05    1.02 \n10 -0.0445  0.00730 0.00633 -0.652 0.515        0.46         0.23   -1.23 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2022 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Fishing farm`\n# A tibble: 63 × 17\n          ii       eii     var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n       &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.455    -0.0550   0.167      -0.980  0.327     0.2          0.1      1.60\n 2  0.00330   0.0302   0.0138     -0.229  0.819     0.72         0.36    -1.82\n 3 -0.0430    0.0208   0.0316     -0.359  0.720     0.5          0.25    -1.70\n 4 -0.0892    0.0260   0.0379     -0.592  0.554     0.56         0.28     2.19\n 5 -0.000269  0.000295 0.00000507 -0.251  0.802     0.64         0.32    -1.33\n 6 -0.0857   -0.0115   0.00848    -0.806  0.420     0.4          0.2     -1.45\n 7 -0.147     0.0204   0.0271     -1.02   0.310     0.28         0.14    -1.58\n 8 -0.0286    0.00924  0.291      -0.0701 0.944     0.8          0.4      1.59\n 9 -0.120    -0.0151   0.0245     -0.670  0.503     0.36         0.18    -1.59\n10  0.169     0.00657  0.298       0.298  0.765     0.48         0.24     2.56\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2022 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Others(*)`\n# A tibble: 63 × 17\n         ii       eii   var_ii    z_ii   p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.122   -0.0198   0.0329    0.782  0.434      0.44         0.22    0.641\n 2  0.470    0.000319 0.0709    1.76   0.0778     0.14         0.07    1.44 \n 3 -0.0230   0.00223  0.000293 -1.48   0.140      0.24         0.12   -1.34 \n 4 -0.0252  -0.00212  0.00194  -0.523  0.601      0.48         0.24   -1.32 \n 5 -0.318   -0.0153   0.503    -0.427  0.669      0.86         0.43    0.836\n 6 -0.199   -0.0181   0.0817   -0.633  0.527      0.52         0.26   -1.14 \n 7 -0.0848  -0.00556  0.0244   -0.508  0.612      0.5          0.25   -1.70 \n 8 -0.00959 -0.0762   0.0937    0.217  0.828      0.92         0.46   -0.907\n 9 -0.00388  0.00776  0.0278   -0.0698 0.944      0.84         0.42   -0.853\n10  0.00321  0.0516   0.0493   -0.218  0.828      0.54         0.27   -1.83 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2022 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Cultivation farm`\n# A tibble: 63 × 17\n      ii       eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.156  0.0286   0.0169 0.981 0.326     0.34         0.17   -1.02    0.847 \n 2 0.147 -0.0168   0.0587 0.675 0.500     0.66         0.33   -1.19    1.24  \n 3 0.158 -0.00917  0.0580 0.693 0.488     0.68         0.34   -0.908   0.0227\n 4 0.212 -0.000368 0.0596 0.871 0.384     0.42         0.21   -1.06    0.524 \n 5 0.113  0.0103   0.0109 0.987 0.323     0.26         0.13   -1.25    1.46  \n 6 0.226  0.00153  0.123  0.640 0.522     0.8          0.4    -1.26    0.591 \n 7 0.138 -0.00651  0.0247 0.917 0.359     0.46         0.23   -1.06    0.723 \n 8 0.219  0.0161   0.0440 0.965 0.334     0.32         0.16   -0.793  -0.406 \n 9 0.205  0.00291  0.0379 1.04  0.300     0.4          0.2    -0.737   0.0588\n10 0.278 -0.0298   0.0912 1.02  0.308     0.08         0.04   -0.948  -0.0128\n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2023 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Livestock farm`\n# A tibble: 63 × 17\n        ii       eii var_ii   z_ii       p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  3.12   -0.285    1.77    2.56  0.0106         0.02         0.01    0.302\n 2  2.52   -0.135    0.500   3.76  0.000168       0.02         0.01    1.15 \n 3 -1.05    0.00811  0.0520 -4.63  0.00000361     0.02         0.01   -0.585\n 4 -0.296   0.0189   0.0624 -1.26  0.207          0.2          0.1    -1.19 \n 5  0.582   0.0454   0.243   1.09  0.276          0.28         0.14    0.883\n 6  0.533  -0.0903   0.418   0.964 0.335          0.28         0.14    1.38 \n 7  2.20    0.0400   0.387   3.47  0.000521       0.02         0.01    0.633\n 8  0.647   0.000137 0.104   2.01  0.0447         0.08         0.04    0.665\n 9  0.628  -0.000464 0.0623  2.52  0.0118         0.08         0.04    1.20 \n10 -0.0675  0.00139  0.0107 -0.666 0.505          0.48         0.24   -1.22 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2023 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Fishing farm`\n# A tibble: 63 × 17\n          ii       eii     var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n       &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.431    -0.0264   0.151      -1.04   0.298     0.04         0.02     1.97\n 2  0.0305   -0.0139   0.0406      0.220  0.826     0.82         0.41    -1.90\n 3 -0.0347   -0.0178   0.0587     -0.0699 0.944     0.62         0.31    -1.82\n 4 -0.0864   -0.0242   0.0303     -0.357  0.721     0.94         0.47     1.90\n 5  0.000152 -0.000583 0.00000885  0.247  0.805     0.6          0.3      1.48\n 6 -0.0466   -0.00667  0.00576    -0.526  0.599     0.3          0.15    -2.41\n 7 -0.111     0.00238  0.0383     -0.578  0.563     0.4          0.2     -1.44\n 8 -0.0182   -0.0395   0.164       0.0526 0.958     0.66         0.33     1.84\n 9 -0.108     0.0110   0.0199     -0.840  0.401     0.28         0.14    -1.72\n10  0.163     0.0650   0.321       0.173  0.863     0.5          0.25     2.12\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2023 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Others(*)`\n# A tibble: 63 × 17\n         ii      eii  var_ii   z_ii   p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.172    0.00521 0.0760   0.606 0.544      0.52         0.26    0.861\n 2  0.585    0.0162  0.0797   2.01  0.0440     0.14         0.07    1.35 \n 3 -0.0495   0.00204 0.00166 -1.27  0.206      0.22         0.11   -1.63 \n 4 -0.0383  -0.0243  0.0129  -0.123 0.902      0.74         0.37   -0.939\n 5 -0.333   -0.0669  0.512   -0.371 0.711      0.92         0.46    1.19 \n 6 -0.273   -0.00171 0.107   -0.831 0.406      0.4          0.2    -1.27 \n 7 -0.139    0.00560 0.0381  -0.741 0.459      0.32         0.16   -1.89 \n 8  0.00670 -0.00491 0.00692  0.140 0.889      1            0.5    -1.07 \n 9 -0.0215   0.0106  0.0328  -0.177 0.859      0.74         0.37   -1.21 \n10 -0.0325   0.00679 0.0885  -0.132 0.895      0.62         0.31   -1.78 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2023 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n\n\nvietnam_farms_list_lisa[\"2012 Cultivation farm\"][[\"2012 Cultivation farm\"]]\n\n# A tibble: 63 × 17\n      ii       eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.240 -0.00366  0.0345 1.31  0.190     0.12         0.06   -0.953   0.603 \n 2 0.258  0.0229   0.0645 0.926 0.355     0.42         0.21   -1.14    1.14  \n 3 0.258 -0.0157   0.0732 1.01  0.312     0.34         0.17   -0.909  -0.0258\n 4 0.257 -0.0162   0.0597 1.12  0.264     0.1          0.05   -0.811  -0.205 \n 5 0.257  0.0474   0.0320 1.17  0.241     0.18         0.09   -0.985   0.735 \n 6 0.260  0.000680 0.0687 0.990 0.322     0.36         0.18   -0.897  -0.124 \n 7 0.252  0.00497  0.0477 1.13  0.257     0.14         0.07   -1.20    1.76  \n 8 0.255  0.0427   0.0447 1.01  0.315     0.16         0.08   -1.07    0.607 \n 9 0.247 -0.0102   0.0395 1.29  0.196     0.16         0.08   -0.933   1.07  \n10 0.259  0.0696   0.0651 0.742 0.458     0.46         0.23   -1.69    2.80  \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2012 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n\n\n\n\nplot_list_of_lisa &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    \n    event_data_list[[col_name]] &lt;- tm_shape(st_as_sf(data[[col_name]])) +\n      tm_fill(\"ii\",\n              palette = c(\"#b7dce9\",\"#e1ecbb\",\"#f5f3a6\",\n                          \"#ec9a64\",\"#d21b1c\")) +\n      tm_layout(main.title = paste(\"Spatial Autocorrelation\\n of Vietnam\", col_name),\n                main.title.position = \"center\",\n                # main.title.size = 1.3,\n                # main.title.fontface = \"bold\",\n                legend.title.size = 1,\n                legend.text.size = 1,\n                frame = TRUE) +\n      tm_borders(col = \"black\", alpha = 0.6) +\n      tm_compass(type=\"8star\", text.size = 1.5, size = 3, position=c(\"RIGHT\", \"TOP\"))\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\nplot_list_of_lisa(\"vietnam_farms_list_lisa_plots\", vietnam_farms_list_lisa, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_list_lisa_plots$`2012 Cultivation farm`\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot_list_of_lisa_pii &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    \n    event_data_list[[col_name]] &lt;- tm_shape(st_as_sf(data[[col_name]])) +\n      tm_fill(\"p_ii\",\n              palette = c(\"#b7dce9\",\"#e1ecbb\",\"#f5f3a6\",\n                          \"#ec9a64\",\"#d21b1c\")) +\n      tm_layout(main.title = paste(\"Statistical Significance of Spatial Autocorrelation\\n of Vietnam\", col_name),\n                main.title.position = \"center\",\n                # main.title.size = 1.3,\n                # main.title.fontface = \"bold\",\n                legend.title.size = 1,\n                legend.text.size = 1,\n                frame = TRUE) +\n      tm_borders(col = \"black\", alpha = 0.6) +\n      tm_compass(type=\"8star\", text.size = 1.5, size = 3, position=c(\"RIGHT\", \"TOP\"))\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\nplot_list_of_lisa_pii(\"vietnam_farms_list_lisa_pii_plots\", vietnam_farms_list_lisa, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_list_lisa_pii_plots$`2012 Cultivation farm`\n\n\n\n\n\n\n\n\n\n\n\n\nplot_list_of_lisa_sig &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    \n    event_data_list[[col_name]] &lt;- tm_shape(st_as_sf(data[[col_name]])) +\n      tm_fill(\"p_ii\",\n              palette = c(\"#b7dce9\",\"#e1ecbb\",\"#f5f3a6\",\n                          \"#ec9a64\",\"#d21b1c\")) +\n      tm_layout(main.title = paste(\"Statistical Significance of Spatial Autocorrelation\\n of Vietnam\", col_name),\n                main.title.position = \"center\",\n                # main.title.size = 1.3,\n                # main.title.fontface = \"bold\",\n                legend.title.size = 1,\n                legend.text.size = 1,\n                frame = TRUE) +\n      tm_borders(col = \"black\", alpha = 0.6) +\n      tm_compass(type=\"8star\", text.size = 1.5, size = 3, position=c(\"RIGHT\", \"TOP\"))\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\n\n\n\n\n\nThe local indicator of spatial association (LISA) for each observation gives an indication of the extent of significant spatial clustering of similar values around that observation. In general, the analysis will calculate a local statistic value, a z-score, a pseudo p-value, and a code representing the cluster type for each statistically significant feature. LISA map is a categorical map showing type of outliers and clusters. There are two types of outliers namely: High-Low and Low-High outliers. Likewise, there are two type of clusters namely: High-High and Low-Low cluaters.\nSpecific to our study, we may infer LISA classifications as below.\n\nHigh-Low Outliers: Provinces with a high number of farms, surrounded by neighbouring provinces with low number of farms.\nLow-High Outliers: Provinces with a low number of farms, surrounded by neighbouring provinces with high number of farms.\nHigh-High Clusters: Provinces with a high number of farms, surrounded by neighbouring provinces with high number of farms.\nLow-Low Clusters: Provinces with a low number of farms, surrounded by neighbouring provinces with low number of farms.\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nplot_list_of_lisa_class &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    lisa &lt;- st_as_sf(data[[col_name]])\n    lisa_sig &lt;- lisa  %&gt;%\n      filter(p_ii_sim &lt; 0.05)\n    \n    event_data_list[[col_name]] &lt;- tm_shape(lisa) +\n      tm_polygons() +\n      tm_borders(col = \"black\", alpha = 0.6)+\n      tm_shape(lisa_sig)+\n        tm_fill(\"mean\", \n                palette = c(\"#b7dce9\",\"#ec9a64\",\"#e1ecbb\", \"#d21b1c\"),\n                title = \"LISA class\",\n                midpoint = NA,\n                legend.hist = TRUE, \n                legend.is.portrait = TRUE,\n                legend.hist.z = 0.1) +\n        tm_borders(col = \"black\", alpha = 0.6)+\n        tm_layout(main.title = paste(\"Province-Level LISA Map of\\n \", col_name),\n                  main.title.position = \"center\",\n                  main.title.size = 1.7,\n                  main.title.fontface = \"bold\",\n                  legend.outside = TRUE,\n                  legend.outside.position = \"right\",\n                  legend.title.size = 1.8,\n                  legend.text.size = 1.3,\n                  frame = TRUE) +\n        tm_borders(alpha = 0.5) +\n        tm_compass(type=\"8star\", text.size = 1.5, size = 2, position=c(\"RIGHT\", \"TOP\")) +\n        tm_scale_bar(position=c(\"LEFT\", \"BOTTOM\"), text.size=1.2) +\n        tm_grid(labels.size = 1,alpha =0.2)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\n\nplot_list_of_lisa_class(\"vietnam_farms_list_lisa_classs_plots\", vietnam_farms_list_lisa, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_list_lisa_classs_plots$`2012 Cultivation farm`\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n\n\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nA hotspot is a region or value that is higher relative to its surroundings\n\n# helper functions\ncompute_and_generate_wm &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    event_data_list[[col_name]] &lt;- data[[col_name]] %&gt;%\n      mutate(nb = include_self(st_contiguity(geometry)),\n             wt = st_inverse_distance(nb, geometry,\n                                       scale = 1,\n                                       alpha = 1),\n             .before = 1)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\ncompute_and_generate_wm(\"vietnam_farms_wm\", vietnam_farms_data, YEARS, VIETNAM_COL_NAMES)\n\nNext, we will calculate local Gi∗ using local_gstart_perm() function from sfdep package. This function uses a neighbour list nb and a weight list wt as an input and generate Gi∗ statistics through a Monte Carlo permutation with specified nsim. The results will then be stored into a new object called HCSA.\n\n# helper functions\ncompute_and_generate_HCSA &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    event_data_list[[col_name]] &lt;- data[[col_name]] %&gt;% \n      mutate(local_Gi_star = local_gstar_perm(data[[col_name]][[col_name]], \n                                              nb, \n                                              data[[col_name]]$wt, nsim = 99),\n             .before = 1) %&gt;%\n      unnest(local_Gi_star)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\ncompute_and_generate_HCSA(\"vietnam_farms_HCSA\", vietnam_farms_wm, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_HCSA\n\n$`2012 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.45  Low     0.00218   2.14e-6  -1.44    0.149  0.08         0.04    0.822\n 2  -0.987 Low     0.00143   1.89e-6  -1.00    0.315  0.32         0.16    0.688\n 3  -1.00  Low     0.00185   3.09e-6  -1.02    0.309  0.26         0.13    1.40 \n 4  -1.04  Low     0.000808  6.65e-7  -0.973   0.331  0.2          0.1     1.40 \n 5  -1.24  Low     0.00242   4.20e-6  -1.16    0.246  0.08         0.04    0.710\n 6  -0.851 Low     0.00105   1.44e-6  -0.855   0.392  0.3          0.15    1.46 \n 7  -1.14  Low     0.00192   2.75e-6  -1.12    0.263  0.16         0.08    1.08 \n 8  -1.15  Low     0.00188   2.55e-6  -1.15    0.248  0.1          0.05    1.33 \n 9  -1.22  Low     0.00197   2.25e-6  -1.27    0.205  0.16         0.08    0.578\n10  -0.878 Low     0.00150   1.85e-6  -1.08    0.281  0.22         0.11    0.988\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2012 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.40  High    0.00202   1.42e-6   1.68  9.38e-2  0.18         0.09     1.04\n 2   2.68  High    0.000975  6.75e-7   3.56  3.65e-4  0.04         0.02     1.87\n 3   3.18  Low     0.00162   2.22e-6   2.82  4.87e-3  0.06         0.03     1.36\n 4   1.24  Low     0.000691  2.51e-7   1.70  8.96e-2  0.16         0.08     1.05\n 5   1.15  High    0.00197   1.66e-6   1.52  1.27e-1  0.24         0.12     1.28\n 6   1.28  High    0.00109   1.14e-6   1.20  2.31e-1  0.14         0.07     3.15\n 7   2.41  High    0.00224   2.48e-6   2.18  2.95e-2  0.06         0.03     1.11\n 8   1.45  High    0.00151   1.48e-6   1.89  5.86e-2  0.12         0.06     2.15\n 9   1.72  High    0.00186   2.14e-6   1.82  6.89e-2  0.08         0.04     2.54\n10   0.250 Low     0.00107   1.24e-6   0.395 6.93e-1  0.54         0.27     2.27\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2012 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.488  High    0.00227   1.91e-5 -0.434    0.664  0.48         0.24     2.90\n 2 -0.0794 Low     0.00181   2.01e-5 -0.185    0.853  0.46         0.23     3.41\n 3 -0.153  Low     0.00190   2.66e-5 -0.172    0.863  0.6          0.3      4.75\n 4 -0.275  High    0.000769  3.51e-6 -0.273    0.785  0.74         0.37     3.29\n 5 -0.0416 Low     0.00214   1.93e-5 -0.0250   0.980  0.34         0.17     2.95\n 6  0.278  Low     0.00205   2.36e-5 -0.0245   0.980  0.28         0.14     2.65\n 7  0.117  Low     0.00250   2.92e-5  0.0214   0.983  0.24         0.12     3.04\n 8  0.0621 High    0.00204   2.30e-5  0.0181   0.986  0.2          0.1      2.98\n 9  0.296  Low     0.00217   2.03e-5  0.266    0.790  0.26         0.13     3.00\n10  0.290  High    0.00126   1.35e-5  0.266    0.790  0.14         0.07     4.00\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2012 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.466  High    0.00191   3.36e-6 -0.304   0.761   0.9          0.45     1.36\n 2  1.19   Low     0.00162   3.62e-6  0.748   0.455   0.38         0.19     1.54\n 3  1.69   Low     0.00175   4.81e-6  1.50    0.134   0.28         0.14     1.43\n 4  0.277  Low     0.000589  8.74e-7  0.479   0.632   0.36         0.18     3.19\n 5 -0.532  High    0.00251   6.26e-6 -0.600   0.548   0.76         0.38     1.35\n 6  0.921  Low     0.00113   2.60e-6  0.854   0.393   0.3          0.15     2.17\n 7  1.89   Low     0.00196   5.81e-6  1.84    0.0657  0.14         0.07     1.71\n 8  0.388  Low     0.00167   3.71e-6  0.523   0.601   0.4          0.2      2.19\n 9  0.363  High    0.00183   3.79e-6  0.540   0.589   0.48         0.24     2.08\n10  0.0714 Low     0.00126   3.20e-6  0.0497  0.960   0.5          0.25     1.80\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2012 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.45  Low     0.00236   2.28e-6  -1.48    0.138  0.16         0.08    0.276\n 2  -1.01  Low     0.00115   1.77e-6  -0.828   0.407  0.34         0.17    1.43 \n 3  -1.02  Low     0.00188   2.81e-6  -1.08    0.279  0.18         0.09    1.13 \n 4  -1.05  Low     0.000754  4.84e-7  -1.06    0.290  0.06         0.03    1.10 \n 5  -1.26  Low     0.00193   2.28e-6  -1.24    0.213  0.08         0.04    0.721\n 6  -0.874 Low     0.00119   1.55e-6  -0.943   0.346  0.2          0.1     1.34 \n 7  -1.17  Low     0.00189   3.27e-6  -1.02    0.309  0.16         0.08    1.14 \n 8  -1.17  Low     0.00204   2.25e-6  -1.33    0.183  0.08         0.04    0.673\n 9  -1.23  Low     0.00207   3.13e-6  -1.12    0.265  0.16         0.08    1.08 \n10  -0.904 Low     0.00139   1.85e-6  -1.01    0.310  0.16         0.08    1.16 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2013 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.72  High    0.00226   1.66e-6   1.64  0.102    0.2          0.1      1.38\n 2   2.38  High    0.00117   9.25e-7   2.47  0.0137   0.08         0.04     2.09\n 3   3.10  Low     0.00167   2.02e-6   2.77  0.00563  0.06         0.03     2.29\n 4   1.44  Low     0.000733  3.08e-7   1.64  0.101    0.12         0.06     1.24\n 5   1.39  High    0.00211   2.26e-6   1.41  0.160    0.22         0.11     1.34\n 6   1.24  High    0.000899  7.83e-7   1.58  0.114    0.16         0.08     1.59\n 7   2.65  High    0.00196   2.65e-6   2.43  0.0150   0.08         0.04     1.51\n 8   1.96  High    0.00177   1.37e-6   2.27  0.0235   0.08         0.04     1.42\n 9   1.70  High    0.00205   2.41e-6   1.54  0.124    0.16         0.08     1.19\n10   0.590 Low     0.00128   1.20e-6   0.552 0.581    0.46         0.23     1.26\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2013 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Fishing farm`\n# A tibble: 63 × 15\n    gi_star cluster     e_gi  var_gi std_dev p_value p_sim p_folded_sim skewness\n      &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.490   High    0.00204  1.73e-5 -0.399    0.690  0.56         0.28     3.23\n 2 -0.0952  Low     0.000649 2.26e-6  0.189    0.850  0.34         0.17     7.89\n 3 -0.145   Low     0.00185  1.82e-5 -0.186    0.853  0.5          0.25     2.83\n 4 -0.239   High    0.000761 3.78e-6 -0.223    0.824  0.62         0.31     3.56\n 5 -0.00291 Low     0.00258  3.14e-5 -0.0658   0.948  0.32         0.16     3.22\n 6  0.312   High    0.00102  1.50e-5  0.258    0.796  0.16         0.08     6.79\n 7  0.115   Low     0.00199  1.89e-5  0.141    0.888  0.18         0.09     3.54\n 8  0.0953  High    0.00233  2.26e-5 -0.0140   0.989  0.26         0.13     2.40\n 9  0.299   Low     0.00253  2.16e-5  0.181    0.856  0.3          0.15     2.43\n10  0.284   High    0.00104  9.80e-6  0.370    0.711  0.12         0.06     4.65\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2013 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.136  High    0.00210   2.82e-6 -0.0461  0.963   0.82         0.41    1.39 \n 2  2.22   High    0.00120   1.60e-6  2.32    0.0205  0.12         0.06    1.39 \n 3  1.62   Low     0.00170   3.06e-6  1.56    0.120   0.22         0.11    1.42 \n 4  0.190  Low     0.000710  5.30e-7  0.300   0.764   0.5          0.25    1.33 \n 5 -0.0499 High    0.00264   5.53e-6 -0.217   0.828   0.82         0.41    1.08 \n 6  1.13   High    0.000992  1.98e-6  1.13    0.259   0.22         0.11    2.20 \n 7  2.03   Low     0.00220   5.23e-6  1.67    0.0940  0.22         0.11    1.46 \n 8  0.140  High    0.00217   3.91e-6 -0.0228  0.982   0.72         0.36    0.851\n 9  1.19   High    0.00198   4.62e-6  1.07    0.283   0.3          0.15    2.21 \n10  0.579  Low     0.00105   2.06e-6  0.722   0.471   0.26         0.13    3.23 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2013 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.54  Low     0.00232   2.15e-6  -1.48    0.140  0.1          0.05    0.585\n 2  -1.04  Low     0.00132   1.18e-6  -1.12    0.262  0.32         0.16    0.606\n 3  -1.06  Low     0.00159   2.31e-6  -0.953   0.341  0.4          0.2     0.991\n 4  -1.09  Low     0.000785  5.48e-7  -0.989   0.323  0.26         0.13    1.19 \n 5  -1.33  Low     0.00238   3.53e-6  -1.21    0.228  0.16         0.08    0.826\n 6  -0.938 Low     0.000858  9.85e-7  -0.834   0.404  0.46         0.23    1.19 \n 7  -1.28  Low     0.00206   2.36e-6  -1.30    0.192  0.1          0.05    0.749\n 8  -1.28  Low     0.00188   2.56e-6  -1.16    0.248  0.12         0.06    1.03 \n 9  -1.32  Low     0.00260   2.88e-6  -1.46    0.143  0.08         0.04    0.594\n10  -0.985 Low     0.00115   1.58e-6  -0.907   0.364  0.2          0.1     1.11 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2014 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.23  High    0.00212   1.84e-6   1.28  0.202    0.24         0.12     1.12\n 2   2.25  High    0.00140   1.22e-6   1.93  0.0532   0.2          0.1      1.09\n 3   2.80  Low     0.00176   1.97e-6   2.61  0.00901  0.06         0.03     1.57\n 4   1.02  Low     0.000729  3.46e-7   1.18  0.238    0.24         0.12     1.88\n 5   1.25  High    0.00238   2.99e-6   1.01  0.311    0.34         0.17     1.33\n 6   1.09  High    0.00110   1.57e-6   0.892 0.372    0.32         0.16     2.14\n 7   2.38  High    0.00214   2.67e-6   2.20  0.0281   0.1          0.05     1.26\n 8   1.43  High    0.00169   1.90e-6   1.56  0.118    0.22         0.11     1.55\n 9   1.78  High    0.00242   3.35e-6   1.23  0.220    0.26         0.13     1.71\n10   0.697 Low     0.00136   1.88e-6   0.496 0.620    0.38         0.19     1.93\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2014 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.481  High    0.00199   1.29e-5 -0.445    0.657  0.46         0.23     2.51\n 2 -0.175  Low     0.00110   9.34e-6 -0.134    0.894  0.44         0.22     3.96\n 3 -0.195  Low     0.00113   1.04e-5 -0.0880   0.930  0.56         0.28     5.25\n 4 -0.223  High    0.000820  4.91e-6 -0.210    0.834  0.74         0.37     4.46\n 5 -0.0795 Low     0.00222   2.13e-5 -0.0768   0.939  0.34         0.17     3.15\n 6  0.171  High    0.000844  5.65e-6  0.316    0.752  0.14         0.07     4.89\n 7 -0.0575 Low     0.00205   2.14e-5 -0.0501   0.960  0.28         0.14     3.02\n 8  0.116  High    0.00174   1.80e-5  0.143    0.886  0.16         0.08     3.60\n 9  0.144  Low     0.00219   1.62e-5  0.130    0.896  0.24         0.12     2.84\n10  0.0702 High    0.00142   1.54e-5  0.0118   0.991  0.22         0.11     3.84\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2014 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi  var_gi  std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -0.256 High    0.00182  1.83e-6 -0.0146   0.988   0.74         0.37     1.59\n 2   2.45  High    0.00127  1.76e-6  2.51     0.0120  0.1          0.05     1.70\n 3   2.12  Low     0.00165  2.36e-6  2.49     0.0128  0.12         0.06     1.54\n 4   0.125 High    0.000740 9.63e-7  0.144    0.885   0.42         0.21     2.56\n 5  -0.112 High    0.00217  4.04e-6 -0.0890   0.929   0.72         0.36     1.55\n 6   1.40  Low     0.00121  2.36e-6  1.19     0.232   0.28         0.14     1.88\n 7   2.21  Low     0.00210  5.68e-6  1.90     0.0577  0.14         0.07     2.09\n 8  -0.102 High    0.00167  3.83e-6  0.00782  0.994   0.56         0.28     2.30\n 9   1.48  Low     0.00198  5.09e-6  1.32     0.186   0.18         0.09     3.49\n10   0.584 Low     0.00134  2.70e-6  0.491    0.624   0.42         0.21     1.79\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2014 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.51  Low     0.00233   1.61e-6  -1.69   0.0919  0.08         0.04    0.302\n 2  -1.04  Low     0.00122   1.42e-6  -0.936  0.349   0.36         0.18    1.20 \n 3  -1.03  Low     0.00157   2.19e-6  -0.943  0.346   0.46         0.23    0.771\n 4  -1.07  Low     0.000882  5.89e-7  -1.07   0.284   0.34         0.17    0.636\n 5  -1.31  Low     0.00225   3.22e-6  -1.18   0.236   0.22         0.11    0.711\n 6  -0.939 Low     0.00107   1.12e-6  -0.987  0.324   0.24         0.12    0.782\n 7  -1.26  Low     0.00210   2.46e-6  -1.30   0.193   0.12         0.06    0.559\n 8  -1.27  Low     0.00203   1.92e-6  -1.43   0.152   0.08         0.04    0.346\n 9  -1.29  Low     0.00186   2.27e-6  -1.14   0.255   0.2          0.1     1.12 \n10  -0.984 Low     0.00115   1.13e-6  -1.08   0.280   0.04         0.02    0.994\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2015 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.22  High    0.00200   1.47e-6   1.57  1.16e-1  0.22         0.11     1.46\n 2   2.38  High    0.000969  7.98e-7   3.15  1.64e-3  0.08         0.04     1.88\n 3   2.77  Low     0.00155   1.34e-6   3.44  5.76e-4  0.06         0.03     1.61\n 4   0.749 Low     0.000681  3.61e-7   0.984 3.25e-1  0.24         0.12     2.45\n 5   1.00  High    0.00206   2.13e-6   1.21  2.28e-1  0.28         0.14     1.34\n 6   0.951 High    0.00105   1.49e-6   0.865 3.87e-1  0.22         0.11     2.30\n 7   2.77  High    0.00197   2.32e-6   2.97  2.94e-3  0.06         0.03     1.37\n 8   1.40  High    0.00183   1.92e-6   1.49  1.37e-1  0.2          0.1      1.69\n 9   1.80  High    0.00193   1.97e-6   2.06  3.97e-2  0.12         0.06     1.28\n10   0.888 Low     0.00114   1.13e-6   1.10  2.70e-1  0.2          0.1      2.34\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2015 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.507  High    0.00198   9.85e-6 -0.486    0.627  0.5          0.25     2.59\n 2 -0.165  Low     0.00117   8.61e-6 -0.141    0.888  0.52         0.26     3.60\n 3 -0.183  Low     0.00201   2.39e-5 -0.215    0.830  0.6          0.3      3.56\n 4 -0.209  High    0.000608  1.98e-6 -0.140    0.889  0.8          0.4      4.36\n 5 -0.0262 Low     0.00347   3.16e-5 -0.242    0.809  0.52         0.26     2.01\n 6  0.248  High    0.00155   1.58e-5  0.0575   0.954  0.22         0.11     3.30\n 7 -0.0176 Low     0.00188   1.28e-5  0.0371   0.970  0.28         0.14     3.26\n 8  0.207  High    0.00177   1.37e-5  0.241    0.810  0.18         0.09     3.48\n 9  0.228  Low     0.00213   1.42e-5  0.231    0.817  0.3          0.15     3.00\n10  0.122  High    0.00139   1.39e-5  0.0602   0.952  0.18         0.09     4.08\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2015 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -0.433 High    0.00197   3.27e-6  -0.242  0.809   0.94         0.47     2.25\n 2   2.27  Low     0.00128   1.74e-6   2.21   0.0270  0.1          0.05     2.30\n 3   1.79  Low     0.00182   3.08e-6   1.66   0.0977  0.18         0.09     1.37\n 4  -0.125 High    0.000765  5.24e-7  -0.128  0.898   0.82         0.41     1.41\n 5  -0.636 High    0.00180   3.27e-6  -0.451  0.652   0.8          0.4      3.11\n 6   0.733 Low     0.00100   1.90e-6   0.758  0.449   0.22         0.11     2.76\n 7   1.66  Low     0.00210   4.46e-6   1.53   0.126   0.26         0.13     1.68\n 8  -0.158 Low     0.00184   2.83e-6  -0.148  0.883   0.86         0.43     1.24\n 9   0.887 Low     0.00214   3.79e-6   0.822  0.411   0.3          0.15     1.79\n10  -0.146 Low     0.00117   1.93e-6  -0.123  0.902   0.7          0.35     1.96\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2015 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.38  Low     0.00226   2.80e-6  -1.21    0.228  0.16         0.08    0.725\n 2  -0.864 Low     0.00148   1.79e-6  -0.937   0.349  0.46         0.23    1.05 \n 3  -0.970 Low     0.00189   2.68e-6  -1.06    0.291  0.38         0.19    0.526\n 4  -0.984 Low     0.000889  5.56e-7  -1.09    0.274  0.22         0.11    0.995\n 5  -1.20  Low     0.00228   2.60e-6  -1.31    0.189  0.1          0.05    0.831\n 6  -0.860 Low     0.00138   1.88e-6  -0.978   0.328  0.2          0.1     1.19 \n 7  -1.15  Low     0.00225   3.17e-6  -1.20    0.229  0.14         0.07    0.834\n 8  -1.19  Low     0.00189   1.67e-6  -1.43    0.152  0.02         0.01    0.394\n 9  -1.18  Low     0.00228   2.46e-6  -1.33    0.183  0.14         0.07    0.709\n10  -0.897 Low     0.00123   1.63e-6  -0.937   0.349  0.3          0.15    1.05 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2016 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.03  High    0.00190   1.64e-6   1.38  1.67e-1  0.18         0.09     1.79\n 2   2.81  High    0.00152   1.97e-6   1.96  4.97e-2  0.16         0.08     1.76\n 3   3.05  Low     0.00162   2.07e-6   3.03  2.41e-3  0.06         0.03     1.75\n 4   1.16  Low     0.000839  5.18e-7   0.994 3.20e-1  0.34         0.17     1.29\n 5   0.800 High    0.00213   2.32e-6   0.907 3.65e-1  0.36         0.18     1.23\n 6   1.25  High    0.000861  7.15e-7   1.89  5.93e-2  0.12         0.06     2.13\n 7   3.18  High    0.00162   1.65e-6   4.35  1.37e-5  0.02         0.01     1.78\n 8   1.49  High    0.00193   2.68e-6   1.30  1.95e-1  0.2          0.1      2.05\n 9   1.56  High    0.00196   1.71e-6   1.93  5.38e-2  0.14         0.07     1.23\n10   0.773 Low     0.00137   2.03e-6   0.572 5.67e-1  0.28         0.14     2.28\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2016 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -0.617 High    0.00220   2.17e-6  -0.564 0.573    0.72         0.36    0.996\n 2   0.840 Low     0.00140   1.42e-6   0.640 0.522    0.46         0.23    0.888\n 3   0.973 Low     0.00152   2.10e-6   1.07  0.286    0.4          0.2     1.20 \n 4  -0.852 High    0.000721  4.21e-7  -0.831 0.406    0.38         0.19    1.31 \n 5   0.951 Low     0.00228   3.13e-6   0.865 0.387    0.34         0.17    1.12 \n 6   2.15  Low     0.00126   2.06e-6   1.59  0.111    0.16         0.08    1.84 \n 7   1.68  High    0.00186   2.80e-6   1.82  0.0694   0.16         0.08    1.31 \n 8   1.35  High    0.00165   2.01e-6   1.60  0.110    0.18         0.09    1.40 \n 9   3.31  Low     0.00225   3.82e-6   2.59  0.00949  0.06         0.03    1.29 \n10   2.03  High    0.00135   2.26e-6   1.66  0.0972   0.24         0.12    1.36 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2016 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.111  High    0.00236   1.18e-5  -0.115   0.908  0.48         0.24     3.10\n 2  0.596  High    0.000979  3.22e-6   0.802   0.423  0.14         0.07     3.74\n 3  0.0582 Low     0.00143   5.22e-6   0.153   0.878  0.44         0.22     3.99\n 4 -0.300  Low     0.000835  1.66e-6  -0.336   0.737  1            0.5      3.00\n 5 -0.511  High    0.00193   6.21e-6  -0.493   0.622  0.6          0.3      3.07\n 6 -0.0765 Low     0.00143   7.79e-6  -0.187   0.852  0.66         0.33     3.05\n 7  0.0185 Low     0.00150   5.05e-6   0.282   0.778  0.34         0.17     3.50\n 8 -0.268  Low     0.00154   4.14e-6  -0.193   0.847  0.86         0.43     3.09\n 9 -0.242  High    0.00230   8.26e-6  -0.306   0.759  1            0.5      2.36\n10 -0.240  Low     0.00140   7.24e-6  -0.272   0.786  0.86         0.43     3.23\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2016 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.35  Low     0.00234   2.92e-6  -1.19    0.235  0.22         0.11    0.790\n 2  -0.854 Low     0.00129   1.58e-6  -0.823   0.410  0.44         0.22    1.75 \n 3  -0.950 Low     0.00169   2.70e-6  -0.901   0.368  0.4          0.2     1.22 \n 4  -1.02  Low     0.000842  6.16e-7  -0.997   0.319  0.28         0.14    1.24 \n 5  -1.23  Low     0.00244   3.43e-6  -1.23    0.218  0.1          0.05    0.796\n 6  -0.883 Low     0.000980  1.29e-6  -0.833   0.405  0.2          0.1     1.34 \n 7  -1.16  Low     0.00185   2.08e-6  -1.20    0.232  0.14         0.07    1.03 \n 8  -1.21  Low     0.00209   2.64e-6  -1.26    0.207  0.06         0.03    0.945\n 9  -1.15  Low     0.00218   2.53e-6  -1.20    0.229  0.24         0.12    0.746\n10  -0.916 Low     0.00106   1.54e-6  -0.835   0.403  0.16         0.08    1.30 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2017 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.40  High    0.00185   9.67e-7   2.34  0.0195   0.1          0.05     1.07\n 2   2.72  High    0.00119   1.17e-6   2.72  0.00661  0.06         0.03     1.53\n 3   3.32  Low     0.00149   2.42e-6   3.08  0.00205  0.08         0.04     2.73\n 4   0.845 Low     0.000827  6.79e-7   0.613 0.540    0.32         0.16     1.82\n 5   0.904 High    0.00214   2.93e-6   0.882 0.378    0.34         0.17     1.43\n 6   1.20  High    0.00110   1.37e-6   1.09  0.276    0.22         0.11     1.85\n 7   3.08  High    0.00215   2.83e-6   2.86  0.00421  0.04         0.02     1.25\n 8   1.48  High    0.00180   2.79e-6   1.32  0.188    0.28         0.14     1.93\n 9   1.97  High    0.00234   3.46e-6   1.46  0.144    0.2          0.1      1.56\n10   0.784 Low     0.00160   3.19e-6   0.326 0.744    0.36         0.18     1.95\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2017 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.19  High    0.00207   2.29e-6  -1.02   0.308   0.24         0.12    0.762\n 2   0.505 Low     0.00133   1.49e-6   0.380  0.704   0.66         0.33    1.25 \n 3   0.170 Low     0.00143   2.16e-6   0.312  0.755   0.6          0.3     1.72 \n 4  -0.481 High    0.000719  5.00e-7  -0.401  0.689   0.9          0.45    0.970\n 5   0.711 Low     0.00232   3.15e-6   0.625  0.532   0.5          0.25    1.10 \n 6   1.94  High    0.00114   1.79e-6   1.64   0.101   0.18         0.09    1.58 \n 7   1.22  Low     0.00217   3.42e-6   1.07   0.286   0.26         0.13    1.82 \n 8   0.999 High    0.00167   2.07e-6   1.20   0.230   0.24         0.12    1.41 \n 9   2.13  Low     0.00203   2.09e-6   2.41   0.0160  0.08         0.04    0.771\n10   1.66  High    0.00120   1.44e-6   1.82   0.0681  0.14         0.07    1.05 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2017 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.382  High    0.00235   6.77e-6  -0.404   0.686  0.96         0.48     1.78\n 2  0.752  High    0.00135   4.83e-6   0.612   0.540  0.2          0.1      2.78\n 3  0.557  Low     0.00176   8.92e-6   0.437   0.662  0.26         0.13     2.64\n 4 -0.167  High    0.000921  2.78e-6  -0.209   0.834  0.62         0.31     3.06\n 5 -0.562  High    0.00190   7.50e-6  -0.479   0.632  0.6          0.3      2.78\n 6  0.181  Low     0.000988  2.05e-6   0.305   0.761  0.5          0.25     3.74\n 7  0.490  Low     0.00165   2.44e-6   1.19    0.233  0.2          0.1      2.29\n 8 -0.236  Low     0.00192   8.20e-6  -0.231   0.818  0.72         0.36     2.56\n 9  0.0412 Low     0.00185   5.81e-6   0.152   0.879  0.44         0.22     3.26\n10 -0.107  Low     0.00147   6.53e-6  -0.191   0.849  0.68         0.34     2.77\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2017 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.33  Low     0.00244   3.04e-6  -1.20    0.230  0.16         0.08    0.888\n 2  -0.814 Low     0.00135   1.41e-6  -0.885   0.376  0.54         0.27    0.982\n 3  -0.940 Low     0.00161   2.10e-6  -0.951   0.342  0.42         0.21    1.02 \n 4  -1.00  Low     0.000691  4.01e-7  -0.972   0.331  0.38         0.19    1.20 \n 5  -1.22  Low     0.00222   2.72e-6  -1.24    0.216  0.14         0.07    0.753\n 6  -0.892 Low     0.00129   1.74e-6  -0.957   0.339  0.22         0.11    0.937\n 7  -1.17  Low     0.00209   3.34e-6  -1.08    0.281  0.18         0.09    0.919\n 8  -1.21  Low     0.00193   2.90e-6  -1.11    0.268  0.08         0.04    1.20 \n 9  -1.16  Low     0.00211   2.77e-6  -1.10    0.270  0.22         0.11    1.11 \n10  -0.925 Low     0.00121   2.01e-6  -0.837   0.403  0.24         0.12    1.37 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2018 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.30  High    0.00196   1.04e-6   1.93  5.39e-2  0.12         0.06     1.27\n 2   3.08  High    0.00123   1.04e-6   3.05  2.27e-3  0.04         0.02     1.57\n 3   3.30  Low     0.00157   1.79e-6   3.33  8.62e-4  0.04         0.02     1.45\n 4   0.850 Low     0.000777  4.04e-7   0.835 4.04e-1  0.3          0.15     1.49\n 5   0.998 High    0.00212   2.66e-6   0.980 3.27e-1  0.32         0.16     1.41\n 6   0.983 High    0.000948  8.00e-7   1.27  2.04e-1  0.18         0.09     2.15\n 7   2.91  High    0.00234   3.16e-6   2.32  2.05e-2  0.08         0.04     1.40\n 8   1.24  High    0.00190   2.48e-6   1.05  2.92e-1  0.36         0.18     1.50\n 9   2.03  High    0.00186   1.70e-6   2.39  1.66e-2  0.14         0.07     1.31\n10   0.593 Low     0.00125   1.38e-6   0.561 5.75e-1  0.32         0.16     1.96\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2018 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.05  High    0.00217   1.80e-6  -1.07  0.286    0.3          0.15    0.635\n 2   0.876 Low     0.00121   1.55e-6   0.810 0.418    0.36         0.18    1.52 \n 3   0.288 Low     0.00174   2.05e-6   0.223 0.824    0.8          0.4     0.809\n 4  -0.414 High    0.000768  6.99e-7  -0.342 0.732    0.84         0.42    1.80 \n 5   0.951 Low     0.00237   5.38e-6   0.633 0.526    0.42         0.21    1.51 \n 6   2.28  High    0.000867  1.27e-6   2.54  0.0110   0.08         0.04    1.94 \n 7   1.50  Low     0.00204   3.84e-6   1.33  0.184    0.24         0.12    1.69 \n 8   1.27  High    0.00151   1.99e-6   1.64  0.102    0.12         0.06    1.20 \n 9   2.57  Low     0.00171   2.26e-6   3.00  0.00268  0.08         0.04    1.43 \n10   1.99  High    0.00113   1.43e-6   2.26  0.0239   0.1          0.05    1.59 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2018 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.458  High    0.00202   5.96e-6  -0.352   0.725  0.94         0.47     2.03\n 2  1.13   Low     0.00122   4.27e-6   1.04    0.300  0.18         0.09     3.17\n 3  0.772  Low     0.00166   5.50e-6   0.806   0.420  0.28         0.14     2.41\n 4 -0.229  High    0.000622  1.04e-6  -0.113   0.910  0.64         0.32     3.42\n 5 -0.579  High    0.00186   5.82e-6  -0.524   0.600  0.8          0.4      2.57\n 6  0.242  Low     0.00111   4.21e-6   0.206   0.836  0.36         0.18     3.00\n 7  0.702  Low     0.00191   7.85e-6   0.766   0.444  0.14         0.07     4.86\n 8 -0.204  Low     0.00189   8.35e-6  -0.184   0.854  0.68         0.34     2.57\n 9  0.196  High    0.00208   8.22e-6   0.190   0.849  0.54         0.27     2.09\n10 -0.0951 Low     0.00174   7.13e-6  -0.273   0.785  0.76         0.38     2.26\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2018 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.34  Low     0.00200   1.99e-6  -1.15    0.248  0.22         0.11    0.783\n 2  -0.533 Low     0.00117   1.11e-6  -0.520   0.603  0.8          0.4     0.861\n 3  -0.787 Low     0.00177   2.34e-6  -0.849   0.396  0.56         0.28    0.898\n 4  -1.01  Low     0.000797  6.44e-7  -0.897   0.370  0.38         0.19    1.33 \n 5  -1.23  Low     0.00208   2.84e-6  -1.12    0.263  0.12         0.06    1.69 \n 6  -0.885 Low     0.00104   1.46e-6  -0.824   0.410  0.26         0.13    1.32 \n 7  -1.00  Low     0.00218   3.65e-6  -0.921   0.357  0.36         0.18    1.25 \n 8  -1.23  Low     0.00196   2.81e-6  -1.15    0.249  0.06         0.03    0.837\n 9  -1.04  Low     0.00226   2.74e-6  -1.07    0.285  0.32         0.16    0.766\n10  -0.917 Low     0.00119   1.38e-6  -0.971   0.331  0.32         0.16    1.44 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2019 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.38  High    0.00195   1.28e-6   1.83  6.69e-2  0.18         0.09     1.45\n 2   3.02  High    0.00130   1.08e-6   2.86  4.19e-3  0.04         0.02     1.89\n 3   3.17  Low     0.00157   1.27e-6   3.80  1.43e-4  0.04         0.02     1.85\n 4   0.783 Low     0.000782  4.29e-7   0.738 4.61e-1  0.4          0.2      1.57\n 5   0.974 High    0.00198   1.82e-6   1.26  2.06e-1  0.26         0.13     1.41\n 6   0.956 High    0.00111   1.33e-6   0.815 4.15e-1  0.24         0.12     2.01\n 7   2.84  High    0.00222   2.50e-6   2.61  8.97e-3  0.08         0.04     2.01\n 8   1.18  High    0.00173   1.33e-6   1.51  1.31e-1  0.2          0.1      1.42\n 9   2.01  High    0.00208   1.92e-6   2.07  3.82e-2  0.14         0.07     1.26\n10   0.607 Low     0.00137   1.60e-6   0.438 6.61e-1  0.4          0.2      2.31\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2019 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.07  High    0.00204   2.21e-6  -0.891  0.373   0.28         0.14     1.17\n 2   0.979 Low     0.00133   1.46e-6   0.835  0.404   0.36         0.18     1.33\n 3   0.345 Low     0.00165   2.55e-6   0.309  0.758   0.58         0.29     1.09\n 4  -0.414 High    0.000577  3.55e-7  -0.159  0.874   0.8          0.4      1.91\n 5   0.975 Low     0.00213   2.79e-6   1.04   0.298   0.34         0.17     1.05\n 6   2.32  High    0.00112   1.42e-6   2.23   0.0259  0.12         0.06     1.28\n 7   1.57  Low     0.00184   2.28e-6   1.92   0.0552  0.14         0.07     1.07\n 8   1.07  High    0.00173   2.20e-6   1.20   0.232   0.3          0.15     1.40\n 9   2.49  Low     0.00198   2.91e-6   2.41   0.0161  0.1          0.05     1.44\n10   2.00  High    0.00134   1.89e-6   1.82   0.0681  0.16         0.08     1.30\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2019 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -0.454 High    0.00194   3.91e-6 -0.378    0.705  0.98         0.49     1.97\n 2   1.13  Low     0.00134   4.71e-6  0.903    0.366  0.2          0.1      2.49\n 3   0.685 Low     0.00182   7.27e-6  0.545    0.586  0.3          0.15     2.48\n 4  -0.236 High    0.000959  1.74e-6 -0.343    0.731  0.84         0.42     1.93\n 5  -0.565 High    0.00175   5.12e-6 -0.471    0.638  0.9          0.45     2.82\n 6   0.235 Low     0.00131   5.81e-6  0.0795   0.937  0.38         0.19     2.91\n 7   0.619 Low     0.00197   6.81e-6  0.693    0.488  0.28         0.14     2.29\n 8  -0.219 Low     0.00140   2.73e-6 -0.0392   0.969  0.7          0.35     2.39\n 9   0.119 High    0.00227   1.01e-5  0.0446   0.964  0.52         0.26     2.35\n10  -0.120 Low     0.00165   7.17e-6 -0.253    0.800  0.66         0.33     2.60\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2019 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.09  Low     0.00211   2.02e-6  -1.00    0.316  0.32         0.16    0.900\n 2  -0.547 Low     0.00140   1.70e-6  -0.616   0.538  0.72         0.36    1.04 \n 3  -0.644 Low     0.00177   2.12e-6  -0.759   0.448  0.64         0.32    0.733\n 4  -0.837 Low     0.000757  4.24e-7  -0.876   0.381  0.46         0.23    1.14 \n 5  -1.05  Low     0.00200   2.45e-6  -0.983   0.326  0.34         0.17    0.997\n 6  -0.778 Low     0.00111   1.44e-6  -0.794   0.427  0.54         0.27    1.44 \n 7  -1.02  Low     0.00177   2.26e-6  -0.942   0.346  0.26         0.13    1.71 \n 8  -1.07  Low     0.00181   2.68e-6  -0.955   0.339  0.22         0.11    1.64 \n 9  -0.971 Low     0.00202   2.63e-6  -0.902   0.367  0.36         0.18    1.25 \n10  -0.895 Low     0.00116   1.48e-6  -0.906   0.365  0.06         0.03    1.46 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2020 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.92  High    0.00189   8.79e-7   2.77  5.57e-3  0.06         0.03    1.04 \n 2   3.45  High    0.00109   6.14e-7   4.23  2.34e-5  0.02         0.01    1.27 \n 3   3.47  Low     0.00180   1.77e-6   3.04  2.33e-3  0.04         0.02    1.28 \n 4   0.801 Low     0.000720  3.55e-7   0.860 3.90e-1  0.34         0.17    1.47 \n 5   1.09  High    0.00207   1.70e-6   1.26  2.08e-1  0.36         0.18    0.846\n 6   0.877 High    0.00102   7.53e-7   1.00  3.17e-1  0.32         0.16    1.58 \n 7   3.01  High    0.00204   1.86e-6   3.06  2.23e-3  0.02         0.01    1.09 \n 8   1.63  High    0.00156   9.79e-7   2.36  1.82e-2  0.08         0.04    0.845\n 9   2.30  High    0.00180   1.48e-6   2.69  7.07e-3  0.08         0.04    1.35 \n10   0.729 Low     0.00124   1.74e-6   0.567 5.71e-1  0.38         0.19    1.82 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2020 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -1.25   High    0.00221   2.94e-6 -1.11     0.269  0.1          0.05     1.39\n 2  0.134  Low     0.00119   1.44e-6  0.164    0.870  0.7          0.35     1.68\n 3 -0.0172 Low     0.00170   2.64e-6 -0.0602   0.952  0.9          0.45     1.26\n 4 -0.542  High    0.000712  3.99e-7 -0.554    0.580  0.74         0.37     1.51\n 5 -0.186  Low     0.00245   4.96e-6 -0.254    0.800  0.96         0.48     1.57\n 6  0.868  Low     0.00102   1.49e-6  0.933    0.351  0.32         0.16     2.22\n 7  0.479  Low     0.00235   3.40e-6  0.327    0.744  0.66         0.33     1.18\n 8  0.208  High    0.00183   3.58e-6  0.207    0.836  0.56         0.28     1.56\n 9  0.747  Low     0.00215   3.85e-6  0.632    0.528  0.42         0.21     1.90\n10  0.558  High    0.00140   2.66e-6  0.375    0.708  0.5          0.25     1.71\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2020 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   0.693 Low     0.00221   2.14e-6   0.693  0.488   0.44         0.22    0.863\n 2   1.66  High    0.00128   1.28e-6   1.58   0.115   0.16         0.08    1.18 \n 3   1.71  Low     0.00152   2.47e-6   1.66   0.0963  0.18         0.09    1.44 \n 4   0.944 Low     0.000723  3.78e-7   1.14   0.253   0.36         0.18    0.881\n 5  -0.450 High    0.00203   2.06e-6  -0.386  0.700   0.98         0.49    0.910\n 6   1.39  Low     0.00130   1.95e-6   0.964  0.335   0.3          0.15    1.81 \n 7   1.11  Low     0.00226   3.21e-6   0.928  0.353   0.26         0.13    1.61 \n 8   0.501 Low     0.00194   2.39e-6   0.440  0.660   0.58         0.29    1.18 \n 9  -0.630 High    0.00239   3.10e-6  -0.720  0.471   0.66         0.33    0.820\n10  -0.196 Low     0.00112   1.29e-6  -0.131  0.896   0.84         0.42    1.61 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2020 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.08  Low     0.00227   1.87e-6  -1.10    0.270  0.24         0.12    0.689\n 2  -0.487 Low     0.00124   1.24e-6  -0.493   0.622  0.86         0.43    1.16 \n 3  -0.584 Low     0.00180   2.78e-6  -0.603   0.547  0.76         0.38    1.16 \n 4  -0.805 Low     0.000830  4.15e-7  -0.929   0.353  0.42         0.21    0.819\n 5  -1.04  Low     0.00234   3.47e-6  -0.962   0.336  0.4          0.2     0.938\n 6  -0.703 Low     0.00124   2.11e-6  -0.664   0.507  0.66         0.33    1.57 \n 7  -0.986 Low     0.00211   2.63e-6  -1.00    0.317  0.32         0.16    0.942\n 8  -1.04  Low     0.00170   2.07e-6  -0.935   0.350  0.28         0.14    1.52 \n 9  -1.02  Low     0.00211   2.30e-6  -1.03    0.304  0.38         0.19    0.954\n10  -0.932 Low     0.00114   1.40e-6  -0.916   0.360  0.12         0.06    1.27 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2021 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.64  High    0.00180   8.31e-7   2.58  9.80e-3  0.04         0.02    0.544\n 2   3.45  High    0.00126   1.20e-6   2.86  4.30e-3  0.06         0.03    1.69 \n 3   3.57  Low     0.00165   1.67e-6   3.32  8.86e-4  0.06         0.03    1.52 \n 4   0.877 Low     0.000762  3.42e-7   0.874 3.82e-1  0.38         0.19    1.14 \n 5   1.15  High    0.00223   2.32e-6   1.03  3.04e-1  0.3          0.15    1.43 \n 6   1.01  High    0.00103   8.92e-7   1.04  2.98e-1  0.24         0.12    1.67 \n 7   2.80  High    0.00215   2.07e-6   2.61  9.12e-3  0.04         0.02    1.09 \n 8   1.55  High    0.00184   1.39e-6   1.64  1.00e-1  0.14         0.07    0.996\n 9   2.41  High    0.00201   1.49e-6   2.61  8.93e-3  0.06         0.03    1.06 \n10   0.555 Low     0.00131   1.15e-6   0.463 6.43e-1  0.54         0.27    1.07 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2021 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -1.13   High    0.00227   3.12e-6 -1.05     0.293  0.18         0.09     1.41\n 2  0.0200 Low     0.00133   1.92e-6 -0.0595   0.953  0.88         0.44     2.21\n 3 -0.0752 Low     0.00148   2.12e-6  0.0169   0.986  0.76         0.38     1.59\n 4 -0.526  High    0.000804  7.55e-7 -0.516    0.606  0.86         0.43     2.30\n 5 -0.169  Low     0.00222   3.31e-6 -0.177    0.860  0.86         0.43     1.25\n 6  0.734  Low     0.000920  1.37e-6  0.951    0.341  0.24         0.12     2.71\n 7  0.384  Low     0.00177   3.16e-6  0.588    0.557  0.46         0.23     1.61\n 8  0.106  High    0.00192   3.78e-6  0.0700   0.944  0.72         0.36     1.65\n 9  0.596  Low     0.00213   4.47e-6  0.496    0.620  0.48         0.24     1.36\n10  0.485  High    0.00110   2.28e-6  0.554    0.580  0.3          0.15     2.46\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2021 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.490  High    0.00231   2.69e-6  0.410   0.682   0.68         0.34    0.742\n 2  1.42   High    0.000994  1.19e-6  1.75    0.0804  0.12         0.06    2.15 \n 3  1.26   Low     0.00173   2.04e-6  1.30    0.194   0.32         0.16    0.792\n 4  0.493  Low     0.000684  3.82e-7  0.730   0.466   0.38         0.19    1.19 \n 5 -0.654  High    0.00198   3.29e-6 -0.500   0.617   0.88         0.44    1.29 \n 6  1.09   Low     0.00120   2.10e-6  0.822   0.411   0.42         0.21    1.30 \n 7  0.509  Low     0.00205   2.74e-6  0.558   0.577   0.54         0.27    0.820\n 8 -0.0261 Low     0.00199   3.91e-6 -0.0781  0.938   0.84         0.42    1.89 \n 9 -0.603  Low     0.00238   3.09e-6 -0.726   0.468   0.56         0.28    0.999\n10 -0.614  Low     0.00114   1.85e-6 -0.550   0.583   0.82         0.41    1.91 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2021 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.09  Low     0.00222   1.89e-6  -1.08    0.280  0.22         0.11    0.902\n 2  -0.560 Low     0.00115   9.88e-7  -0.548   0.583  0.72         0.36    1.24 \n 3  -0.637 Low     0.00176   2.45e-6  -0.670   0.503  0.64         0.32    0.934\n 4  -0.890 Low     0.000774  4.33e-7  -0.914   0.361  0.32         0.16    1.33 \n 5  -1.08  Low     0.00236   3.63e-6  -0.993   0.321  0.26         0.13    1.09 \n 6  -0.668 Low     0.000944  9.61e-7  -0.645   0.519  0.76         0.38    1.35 \n 7  -0.963 Low     0.00213   2.65e-6  -0.991   0.322  0.36         0.18    0.626\n 8  -1.02  Low     0.00192   2.72e-6  -0.941   0.347  0.38         0.19    1.09 \n 9  -0.992 Low     0.00212   2.91e-6  -0.898   0.369  0.38         0.19    1.07 \n10  -0.912 Low     0.00134   1.76e-6  -0.949   0.343  0.08         0.04    1.56 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2022 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.77  High    0.00193   8.55e-7   2.49  1.26e-2  0.08         0.04    1.08 \n 2   3.51  High    0.00114   8.76e-7   3.42  6.19e-4  0.04         0.02    1.53 \n 3   3.74  Low     0.00159   1.37e-6   3.77  1.63e-4  0.04         0.02    1.45 \n 4   1.21  Low     0.000699  2.56e-7   1.46  1.44e-1  0.26         0.13    0.956\n 5   1.36  High    0.00225   1.65e-6   1.37  1.69e-1  0.22         0.11    1.14 \n 6   1.01  High    0.00104   7.23e-7   1.11  2.66e-1  0.2          0.1     1.34 \n 7   2.79  High    0.00185   1.47e-6   3.24  1.21e-3  0.04         0.02    1.48 \n 8   1.66  High    0.00194   1.98e-6   1.36  1.74e-1  0.2          0.1     1.57 \n 9   2.43  High    0.00212   2.18e-6   2.04  4.15e-2  0.16         0.08    1.13 \n10   0.560 Low     0.00120   1.01e-6   0.587 5.57e-1  0.52         0.26    1.07 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2022 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -1.14   High    0.00227   3.09e-6 -1.04     0.298  0.16         0.08     1.49\n 2  0.143  Low     0.00108   1.35e-6  0.279    0.780  0.58         0.29     2.02\n 3  0.0971 Low     0.00169   2.35e-6  0.0620   0.951  0.76         0.38     1.46\n 4 -0.481  High    0.000728  5.46e-7 -0.442    0.658  0.8          0.4      1.88\n 5 -0.151  Low     0.00229   4.61e-6 -0.162    0.871  0.9          0.45     1.69\n 6  0.822  Low     0.00131   2.82e-6  0.479    0.632  0.48         0.24     1.95\n 7  0.509  Low     0.00180   2.88e-6  0.723    0.470  0.32         0.16     1.66\n 8  0.104  High    0.00197   2.71e-6  0.0472   0.962  0.72         0.36     1.43\n 9  0.705  Low     0.00203   2.76e-6  0.791    0.429  0.32         0.16     2.03\n10  0.535  High    0.00103   1.90e-6  0.697    0.486  0.26         0.13     2.80\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2022 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Others(*)`\n# A tibble: 63 × 15\n    gi_star cluster     e_gi  var_gi std_dev p_value p_sim p_folded_sim skewness\n      &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.496   High    0.00233  2.17e-6  0.436   0.662   0.58         0.29    0.606\n 2  1.68    High    0.00129  1.57e-6  1.47    0.142   0.26         0.13    1.40 \n 3  1.39    Low     0.00146  1.77e-6  1.69    0.0903  0.2          0.1     1.39 \n 4  0.568   Low     0.000673 4.21e-7  0.775   0.438   0.36         0.18    1.85 \n 5 -0.463   High    0.00187  2.78e-6 -0.256   0.798   0.92         0.46    1.41 \n 6  1.04    Low     0.00114  1.95e-6  0.817   0.414   0.32         0.16    1.61 \n 7  0.591   Low     0.00229  3.58e-6  0.421   0.674   0.6          0.3     1.06 \n 8 -0.146   Low     0.00202  2.60e-6 -0.226   0.821   0.96         0.48    0.909\n 9 -0.00582 Low     0.00233  3.82e-6 -0.121   0.903   0.82         0.41    1.19 \n10 -0.0225  Low     0.00118  1.73e-6  0.0119  0.991   0.76         0.38    2.07 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2022 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.16  Low     0.00256   2.54e-6  -1.22    0.224  0.18         0.09    0.680\n 2  -0.706 Low     0.00111   1.39e-6  -0.572   0.568  0.74         0.37    1.83 \n 3  -0.654 Low     0.00136   1.99e-6  -0.488   0.625  0.86         0.43    1.64 \n 4  -0.886 Low     0.000852  6.55e-7  -0.847   0.397  0.44         0.22    1.10 \n 5  -1.10  Low     0.00211   2.82e-6  -1.01    0.311  0.3          0.15    1.06 \n 6  -0.653 Low     0.00116   1.66e-6  -0.651   0.515  0.7          0.35    1.70 \n 7  -0.975 Low     0.00208   2.81e-6  -0.956   0.339  0.38         0.19    0.896\n 8  -1.02  Low     0.00169   1.88e-6  -0.974   0.330  0.26         0.13    1.11 \n 9  -1.02  Low     0.00191   2.27e-6  -0.920   0.358  0.52         0.26    0.745\n10  -0.908 Low     0.00147   2.44e-6  -0.895   0.371  0.26         0.13    1.30 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2023 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.92  High    0.00206   9.99e-7   2.31  2.11e-2  0.08         0.04    1.15 \n 2   3.63  High    0.00117   8.06e-7   3.57  3.61e-4  0.04         0.02    1.32 \n 3   3.84  Low     0.00168   1.27e-6   3.86  1.14e-4  0.04         0.02    1.20 \n 4   1.27  Low     0.000944  3.47e-7   0.876 3.81e-1  0.34         0.17    0.886\n 5   1.47  High    0.00230   2.33e-6   1.20  2.32e-1  0.3          0.15    0.994\n 6   1.08  High    0.00107   7.07e-7   1.13  2.60e-1  0.2          0.1     2.35 \n 7   2.89  High    0.00201   1.67e-6   2.95  3.19e-3  0.08         0.04    1.41 \n 8   1.74  High    0.00181   1.05e-6   2.04  4.12e-2  0.1          0.05    1.17 \n 9   2.53  High    0.00199   1.50e-6   2.61  8.94e-3  0.04         0.02    0.939\n10   0.634 Low     0.00122   1.08e-6   0.608 5.43e-1  0.38         0.19    1.46 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2023 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -1.20   High    0.00212   3.12e-6 -1.04     0.298  0.1          0.05     1.45\n 2 -0.0438 Low     0.000962  1.09e-6  0.192    0.848  0.64         0.32     2.22\n 3  0.0650 Low     0.00168   2.39e-6  0.0404   0.968  0.74         0.37     1.25\n 4 -0.426  High    0.000928  8.38e-7 -0.541    0.588  0.68         0.34     1.63\n 5 -0.193  High    0.00192   2.36e-6 -0.0474   0.962  0.82         0.41     1.62\n 6  0.709  Low     0.000860  1.30e-6  1.00     0.316  0.2          0.1      3.26\n 7  0.376  Low     0.00241   6.45e-6  0.156    0.876  0.58         0.29     1.75\n 8  0.101  High    0.00197   3.68e-6  0.0425   0.966  0.62         0.31     1.54\n 9  0.666  Low     0.00235   5.01e-6  0.429    0.668  0.4          0.2      2.52\n10  0.524  High    0.00132   2.72e-6  0.414    0.679  0.5          0.25     2.19\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2023 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.508  High    0.00220   2.35e-6   0.482  0.630   0.64         0.32    0.999\n 2  2.17   High    0.00112   1.19e-6   2.20   0.0278  0.08         0.04    1.26 \n 3  1.31   Low     0.00151   1.63e-6   1.53   0.127   0.18         0.09    1.34 \n 4  0.389  Low     0.000699  4.16e-7   0.514  0.608   0.5          0.25    1.29 \n 5 -0.518  High    0.00211   2.90e-6  -0.411  0.681   0.94         0.47    1.32 \n 6  1.17   Low     0.00113   1.26e-6   1.07   0.285   0.3          0.15    1.47 \n 7  0.713  Low     0.00233   3.34e-6   0.479  0.632   0.42         0.21    1.40 \n 8 -0.262  Low     0.00170   1.51e-6  -0.162  0.871   1            0.5     0.855\n 9  0.0756 Low     0.00203   2.55e-6   0.115  0.909   0.72         0.36    1.29 \n10  0.155  Low     0.00122   2.32e-6   0.125  0.901   0.52         0.26    1.96 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2023 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n\n\n\n\nNext, we will use relevant tmap functions to visualise the result of local Gi∗ values for our study area. For visualisation purpose, we will create a new column label similar to what we did in Local Moran’s I.\n\ntmap_mode(\"plot\")  \n\ntmap mode set to plotting\n\n# helper functions\nplot_vietnam_farms_HCSA &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    # Create the map for each column in a separate tm_shape call\n    event_data_list[[col_name]] &lt;- tm_shape(st_as_sf(data[[col_name]])) +\n      tm_fill(\"gi_star\", \n              palette = c(\"#57bfc0\", \"#7977f3\",\"#f8d673\",\"#f8b675\",\"#f67774\"),\n              title = \"Gi*\",\n              midpoint = 0) +\n      tm_borders(col = \"black\", alpha = 0.6) +\n      tm_layout(main.title = paste(\"Hotspots & Coldspots of\\n \", col_name),\n                main.title.position = \"center\",\n                main.title.size = 1.5,\n                main.title.fontface = \"bold\",\n                legend.title.size = 1,\n                legend.text.size = 1,\n                frame = TRUE) +\n      tm_compass(type=\"8star\", text.size = 1.5, size = 3, position=c(\"RIGHT\", \"TOP\")) +\n      tm_scale_bar(position=c(\"LEFT\", \"BOTTOM\"), text.size=1.2) +\n      tm_grid(labels.size = 1, alpha = 0.2)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\nplot_vietnam_farms_HCSA(\"vietnam_farms_HCSA_plots\", vietnam_farms_HCSA, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_HCSA_plots$`2012 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2013 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2014 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2015 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2016 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2017 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2018 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2019 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2020 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2021 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2022 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2023 Cultivation farm`"
  },
  {
    "objectID": "Take-home_Ex03/takehome_3.html#overview",
    "href": "Take-home_Ex03/takehome_3.html#overview",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "Prototyping is essential in the application development process, acting as a bridge between design concepts and user interactions. By creating a prototype, teams can test and evaluate UX elements with stakeholders, which helps confirm design choices. This iterative process allows for adjustments and refinements before investing further resources, leading to a more efficient and effective final product."
  },
  {
    "objectID": "Take-home_Ex03/takehome_3.html#shiny-application-development-cycle",
    "href": "Take-home_Ex03/takehome_3.html#shiny-application-development-cycle",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "Evaluating R Packages: The initial step in Shiny prototyping involves identifying and validating R packages from CRAN that support the app’s functionality. This ensures the application’s foundation is reliable and compatible with the required analyses and visualizations.\nTesting R Code: Prototyping also involves running and validating specific R code snippets to confirm they produce expected outputs. This testing process helps ensure a smooth experience for end-users by troubleshooting issues early.\n\nSetting Parameters and Outputs: Deciding on the parameters and outputs to expose in the application is a key step. These will guide user interaction and determine the dynamic nature of the app.\n\nDesigning the UI with Shiny Components: The final prototyping phase involves selecting Shiny UI components that allow users to interact with the chosen parameters intuitively.\n\nThis structured approach facilitates a seamless transition from conceptual design to a fully functional application, prioritizing both technical robustness and user experience."
  },
  {
    "objectID": "Take-home_Ex03/takehome_3.html#understanding-basics-of-shiny",
    "href": "Take-home_Ex03/takehome_3.html#understanding-basics-of-shiny",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "Shiny is an open-source R package designed to simplify the creation of interactive web applications without requiring knowledge of web design languages like HTML, CSS, or JavaScript.\n\n\nA Shiny application typically consists of an app.R file that includes two main sections:\n\nUser Interface (UI) - Defines the front-end layout and elements that users interact with.\nServer - Contains the back-end logic, handling input-processing and output-rendering functions.\n\nThis modular structure keeps the UI and server functions distinct, ensuring a clean, organized codebase.\n\n\n\nThe Shiny UI includes components like:\n\nHeader Panel (headerPanel): Displays the app’s title or brief descriptions.\nSidebar Panel (sidebarPanel): A vertical panel for input controls, offering users a way to interact with the app.\nMain Panel (mainPanel): The primary area for output displays (e.g., maps, plots, tables).\n\n\n\n\n\nShiny employs a grid layout system through fluidRow() and column(), based on a 12-column structure, allowing flexible UI design. Each fluidRow can hold multiple column elements, enabling a variety of layouts by adjusting column widths.\n\n\n\nTo structure complex applications, navbarPage() is available, enabling multiple sub-components within the app, each with distinct sidebar, tabset, or layout configurations.\n\n\n\nShiny provides various functions for defining user inputs, including:\n\nsliderInput(): For range-based input using sliders.\nselectInput(): For dropdown lists.\ntextInput(): For text entry.\nnumericInput(): For numeric values.\ncheckboxInput() & checkboxGroupInput(): For binary or multiple-choice selections.\n\nAfter configuring inputs, submitButton() compiles and sends these inputs to the server, updating outputs accordingly.\n\n\n\nOutputs are defined in the main panel using placeholders like textOutput(), tableOutput(), and plotOutput(). These are rendered on the UI through corresponding functions (renderText, renderTable, renderPlot), and can be organized using fluidRow() and column().\n\n\n\nTo categorize content within the main panel, tabsetPanel() can create a series of tabs, effectively organizing multiple outputs in the application.\n\n\n\nThe server function processes inputs from the UI and specifies the outputs based on these inputs. It typically includes parameters for:\n\nInput: Accesses user-defined UI inputs.\nOutput: Determines how outputs are displayed in the UI.\nSession (optional): Manages session-specific settings.\n\nThe interaction between the UI and server functions as a two-way communication loop, where user inputs from the UI are processed by the server, and the corresponding outputs are displayed back in the UI."
  },
  {
    "objectID": "Take-home_Ex03/takehome_3.html#importing-the-packages",
    "href": "Take-home_Ex03/takehome_3.html#importing-the-packages",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse, ggplot2, sfdep)"
  },
  {
    "objectID": "Take-home_Ex03/takehome_3.html#importing-the-datasets",
    "href": "Take-home_Ex03/takehome_3.html#importing-the-datasets",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "# aspatial data\nfarms &lt;- read_rds(\"data/aspatial/farms.rds\")\n# geospatial data\nvietnam_geo &lt;- read_rds(\"data/geospatial/vietnam_geo.rds\")\n\n# left-joined farms with vietnam_geo\nvietnam_farms &lt;- read_rds(\"data/aspatial/vietnam_farm.rds\")\n\n\n\nIt is always a good practice to use set.seed() before performing simulation. This is to ensure that the computation is reproducible.\n\nset.seed(111)"
  },
  {
    "objectID": "Take-home_Ex03/takehome_3.html#constants-and-general-helper-functions",
    "href": "Take-home_Ex03/takehome_3.html#constants-and-general-helper-functions",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "VIETNAM_FARMS_TYPES &lt;- c(\n  \"CULTIVATION\" = \"Cultivation farm\",\n  \"LIVESTOCK\" = \"Livestock farm\",\n  \"FISHING\" = \"Fishing farm\",\n  \"OTHERS\" = \"Others(*)\"\n)\n\nYEARS &lt;- 2012:2023\n\n# Helper Function\npopulate_col_names &lt;- function(new_data_list_name, years, columns) {\n  # Initialize an empty character vector to store the results\n  data_list &lt;- character()\n\n  for (year in years) {\n    for (col_name in columns) {\n\n      # Construct the variable name dynamically\n      var_name &lt;- paste0(year, \" \", col_name)\n      data_list &lt;- c(data_list, var_name)\n    }\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, data_list, envir = .GlobalEnv)\n}\n\npopulate_col_names(\"VIETNAM_COL_NAMES\", YEARS, VIETNAM_FARMS_TYPES)"
  },
  {
    "objectID": "Take-home_Ex03/takehome_3.html#data-wrangling",
    "href": "Take-home_Ex03/takehome_3.html#data-wrangling",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "# Helper Function\npopulate_data_by_col &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  # Loop over the years and quarters to populate the list\n  for (col_name in columns) {\n    event_data_list[[col_name]] &lt;- data[, c(\"Cities, provincies\", col_name, \"geometry\")]\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\npopulate_data_by_col(\"vietnam_farms_data\", vietnam_farms, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_data\n\n$`2012 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2012 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    11 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  0 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   0 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                 4 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  3 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  1 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                   4 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  4 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     6 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   2 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2012 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2012 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                 919 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              460 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                                65 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                              44 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              419 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              347 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               345 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              265 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 176 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               116 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2012 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2012 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               188 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             36 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               2 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                            88 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             16 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             63 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               3 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            320 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                26 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             243 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2012 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2012 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                            115 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          12 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            7 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                          5 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          68 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                          10 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            1 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                          11 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             32 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            5 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2013 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2013 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    11 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  0 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   0 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                 4 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  2 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  3 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                   5 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  1 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     4 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   1 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2013 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2013 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                 944 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              532 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                                73 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                              84 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              451 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              458 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               404 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              279 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 371 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               138 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2013 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2013 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               180 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             33 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               4 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                           109 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             23 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             78 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               4 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            316 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                23 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             247 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2013 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2013 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                            156 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          24 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            1 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         15 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          49 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                          32 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            3 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                          54 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             20 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            5 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2014 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2014 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    11 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  0 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   0 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                 8 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  4 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  0 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                   8 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  2 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     2 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   1 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2014 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2014 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                1346 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              534 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                                91 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                             136 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              505 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              519 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               569 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              474 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 443 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               150 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2014 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2014 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               132 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             51 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               2 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                           139 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             26 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             89 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               5 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            204 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                13 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             254 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2014 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2014 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                            148 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          15 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            1 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         33 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          44 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           6 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            2 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                          41 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             10 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            7 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2015 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2015 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    16 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  0 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   0 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                 6 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  4 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  0 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                  12 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  0 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     2 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   1 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2015 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2015 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                1849 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              628 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                               105 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                             140 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              553 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              528 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               639 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              573 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 740 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               159 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2015 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2015 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               131 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             49 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               1 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                           152 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             24 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             90 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               5 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            199 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                17 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             257 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2015 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2015 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                            141 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          14 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            2 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         31 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          45 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           6 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            3 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           9 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             10 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            7 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2016 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2016 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    29 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  1 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   1 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                18 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  0 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                 10 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                   0 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  7 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     4 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   0 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2016 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2016 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                2904 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              944 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                               122 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                             148 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                             1104 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              886 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               576 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              696 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                1030 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               192 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2016 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2016 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               214 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             36 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               2 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                           138 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             13 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                              1 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                              68 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            261 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                20 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             227 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2016 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2016 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                             42 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          26 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            1 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         15 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          21 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           4 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            4 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           5 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             17 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            7 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2017 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2017 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    35 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  1 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   1 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                11 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  0 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  0 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                  11 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  6 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     3 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   1 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2017 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2017 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                2847 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                             1021 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                               134 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                             150 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                             1031 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              618 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               980 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              744 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 996 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               206 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2017 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2017 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               190 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             25 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               1 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                           157 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             17 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             53 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               3 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            263 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                16 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             222 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2017 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2017 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                             94 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          29 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            3 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         23 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          44 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           4 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            0 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           1 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             17 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            3 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2018 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2018 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    31 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  2 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   1 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                10 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  0 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  0 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                  11 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  5 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     3 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   1 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2018 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2018 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                2733 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              913 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                               140 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                             155 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              785 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              664 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               845 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              658 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 699 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               175 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2018 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2018 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               191 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             30 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               0 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                           160 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             14 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             53 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               0 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            263 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                16 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             225 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2018 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2018 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                            120 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          16 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            2 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         33 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          46 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           1 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            5 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           0 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             21 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            3 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2019 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2019 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                   131 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                 10 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   1 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                11 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                  0 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  0 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                   8 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                 11 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     3 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   1 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2019 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2019 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                2782 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                             1081 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                               150 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                             156 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              772 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              675 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               848 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              710 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 699 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               192 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2019 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2019 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               200 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             26 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               0 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                           166 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             14 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             53 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               0 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            263 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                16 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             201 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2019 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2019 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                            114 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          19 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            3 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         37 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          46 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           3 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            5 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           0 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             21 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            3 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2020 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2020 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    48 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                 12 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                   5 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                12 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                 24 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  3 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                  41 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  6 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     9 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   2 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2020 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2020 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                1741 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              690 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                                77 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                              57 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              510 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              453 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               704 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              429 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 582 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               158 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2020 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2020 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               144 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             12 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               0 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                            79 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             39 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             36 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               0 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            155 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                12 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             132 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2020 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2020 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                              9 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          12 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            9 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                          1 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          52 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           0 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            6 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           0 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                             16 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            1 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2021 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2021 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    38 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  7 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                  19 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                11 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                 50 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  3 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                  46 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                  6 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     9 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   3 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2021 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2021 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                1740 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              615 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                                69 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                              51 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              554 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              491 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               730 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              446 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 414 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               164 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2021 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2021 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               134 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             15 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               7 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                            76 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             37 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             33 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               1 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            154 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                13 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             127 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2021 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2021 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                             15 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          28 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                            9 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                          3 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          54 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           0 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            5 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           0 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                              2 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            2 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2022 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2022 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    37 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  7 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                  19 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                13 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                 52 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  3 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                  46 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                 10 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     9 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   4 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2022 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2022 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                1752 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              691 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                                59 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                              56 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              563 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              572 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               724 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              444 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 411 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               178 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2022 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2022 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               159 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             14 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               7 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                            82 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             46 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             31 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               3 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            161 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                13 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             129 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2022 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2022 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                             24 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          23 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                           11 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                         10 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          52 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           1 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            5 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           0 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                              2 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            1 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows\n\n$`2023 Cultivation farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2023 Cultivation farm`                         geometry\n   &lt;chr&gt;                                  &lt;dbl&gt;               &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                    35 (((105.8297 21.37512, 105.8307 …\n 2 Vinh Phuc                                  8 (((105.585 21.53527, 105.591 21…\n 3 Bac Ninh                                  17 (((106.0325 21.22488, 106.0322 …\n 4 Quang Ninh                                13 (((107.3455 20.68667, 107.3441 …\n 5 Hai Duong                                 62 (((106.4971 21.22826, 106.4995 …\n 6 Hai Phong                                  2 (((107.728 20.12807, 107.7187 2…\n 7 Hung Yen                                  47 (((106.1005 20.99829, 106.1008 …\n 8 Thai Binh                                 10 (((106.6048 20.27758, 106.6045 …\n 9 Ha Nam                                     8 (((106.0332 20.6791, 106.0333 2…\n10 Nam Dinh                                   5 (((106.1047 19.89106, 106.1038 …\n# ℹ 53 more rows\n\n$`2023 Livestock farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2023 Livestock farm`                           geometry\n   &lt;chr&gt;                                &lt;dbl&gt;                 &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                                1751 (((105.8297 21.37512, 105.8307 21…\n 2 Vinh Phuc                              746 (((105.585 21.53527, 105.591 21.5…\n 3 Bac Ninh                                62 (((106.0325 21.22488, 106.0322 21…\n 4 Quang Ninh                              60 (((107.3455 20.68667, 107.3441 20…\n 5 Hai Duong                              565 (((106.4971 21.22826, 106.4995 21…\n 6 Hai Phong                              606 (((107.728 20.12807, 107.7187 20.…\n 7 Hung Yen                               735 (((106.1005 20.99829, 106.1008 20…\n 8 Thai Binh                              458 (((106.6048 20.27758, 106.6045 20…\n 9 Ha Nam                                 412 (((106.0332 20.6791, 106.0333 20.…\n10 Nam Dinh                               163 (((106.1047 19.89106, 106.1038 19…\n# ℹ 53 more rows\n\n$`2023 Fishing farm`\n# A tibble: 63 × 3\n   `Cities, provincies` `2023 Fishing farm`                             geometry\n   &lt;chr&gt;                              &lt;dbl&gt;                   &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                               151 (((105.8297 21.37512, 105.8307 21.3…\n 2 Vinh Phuc                             12 (((105.585 21.53527, 105.591 21.534…\n 3 Bac Ninh                               4 (((106.0325 21.22488, 106.0322 21.2…\n 4 Quang Ninh                            87 (((107.3455 20.68667, 107.3441 20.6…\n 5 Hai Duong                             48 (((106.4971 21.22826, 106.4995 21.2…\n 6 Hai Phong                             37 (((107.728 20.12807, 107.7187 20.12…\n 7 Hung Yen                               3 (((106.1005 20.99829, 106.1008 20.9…\n 8 Thai Binh                            143 (((106.6048 20.27758, 106.6045 20.2…\n 9 Ha Nam                                13 (((106.0332 20.6791, 106.0333 20.67…\n10 Nam Dinh                             125 (((106.1047 19.89106, 106.1038 19.8…\n# ℹ 53 more rows\n\n$`2023 Others(*)`\n# A tibble: 63 × 3\n   `Cities, provincies` `2023 Others(*)`                                geometry\n   &lt;chr&gt;                           &lt;dbl&gt;                      &lt;MULTIPOLYGON [°]&gt;\n 1 Ha Noi                             29 (((105.8297 21.37512, 105.8307 21.3739…\n 2 Vinh Phuc                          24 (((105.585 21.53527, 105.591 21.53449,…\n 3 Bac Ninh                           11 (((106.0325 21.22488, 106.0322 21.2196…\n 4 Quang Ninh                          9 (((107.3455 20.68667, 107.3441 20.6866…\n 5 Hai Duong                          52 (((106.4971 21.22826, 106.4995 21.2254…\n 6 Hai Phong                           0 (((107.728 20.12807, 107.7187 20.12806…\n 7 Hung Yen                            4 (((106.1005 20.99829, 106.1008 20.9981…\n 8 Thai Binh                           9 (((106.6048 20.27758, 106.6045 20.2775…\n 9 Ha Nam                              2 (((106.0332 20.6791, 106.0333 20.6764,…\n10 Nam Dinh                            2 (((106.1047 19.89106, 106.1038 19.8908…\n# ℹ 53 more rows"
  },
  {
    "objectID": "Take-home_Ex03/takehome_3.html#exploratory-data-analysis-eda",
    "href": "Take-home_Ex03/takehome_3.html#exploratory-data-analysis-eda",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "When interacting with the Shiny app UI, I would like to provide options for user to view the data in either map mode or other plots (histograms, box plots, etc.).\n\nggplot(vietnam_farms_data[[\"2012 Cultivation farm\"]], aes(x = `2012 Cultivation farm`, y = reorder(`Cities, provincies`, `2012 Cultivation farm`))) +\n  geom_bar(stat = \"identity\", width = 0.7, fill = \"skyblue\") +  # Adjust width to increase bar height\n  geom_text(aes(label = `2012 Cultivation farm`), \n            hjust = 1.2,  # Position the text at the end of the bars\n            size = 4) +  # Adjust text size if needed\n  labs(title = \"Total Cultivation Farms by Province (2012)\",\n       x = \"Cultivation Farms (2012)\",\n       y = \"Cities\") +\n  theme_minimal() +\n  theme(\n    axis.text.y = element_text(size = 12, margin = margin(t = 5, b = 5)),  # Increase font size and add margin\n    plot.title = element_text(hjust = 0.5),  # Center the title\n    panel.grid.major.y = element_line(size = 0.5, color = \"lightgrey\"),  # Optional: add grid lines for clarity\n    panel.spacing = unit(5, \"lines\")  # Increase spacing between bars\n  )\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\n\n\n\n\n\n\n\nqtm(st_as_sf(vietnam_farms), \"2012 Cultivation farm\")"
  },
  {
    "objectID": "Take-home_Ex03/takehome_3.html#global-measures-of-spatial-autocorrelation",
    "href": "Take-home_Ex03/takehome_3.html#global-measures-of-spatial-autocorrelation",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "In this section, we will be performing spatial complete randomness test for global spatial autocorrelation.\nBefore we can compute the global spatial autocorrelation statistics, we’ll need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. province) in the study area.\nWe will create a helper function compute_and_populate_queens() to compute queen for each column in the dataset. It takes in arguments:\n\nnew_data_list_name: assigning a variable name to hold the list of outputs\ndata: the input data to be used in computing the queens\nyears: years ranging from 2012 to 2013\ncolumns: data columns\n\n\n# Helper Function\ncompute_and_populate_queens &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in VIETNAM_COL_NAMES) {\n    event_data_list[[col_name]] &lt;- data[[col_name]] %&gt;%\n      mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\ncompute_and_populate_queens(\"vietnam_farms_q\", vietnam_farms_data, YEARS, VIETNAM_COL_NAMES)\n\nResults of queen for every data column\n\nvietnam_farms_q\n\n$`2012 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2012 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    11\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  0\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   0\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                 4\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  3\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  1\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                   4\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  4\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     6\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   2\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2012 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                 919\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              460\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                65\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                              44\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              419\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              347\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               345\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              265\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 176\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               116\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2012 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               188\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             36\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               2\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                            88\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             16\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             63\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               3\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            320\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                26\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             243\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2012 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                            115 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          12 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            7 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                          5 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          68 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                          10 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            1 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                          11 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             32 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            5 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2013 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2013 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    11\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  0\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   0\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                 4\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  2\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  3\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                   5\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  1\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     4\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   1\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2013 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                 944\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              532\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                73\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                              84\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              451\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              458\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               404\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              279\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 371\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               138\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2013 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               180\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             33\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               4\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                           109\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             23\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             78\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               4\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            316\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                23\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             247\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2013 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                            156 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          24 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            1 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         15 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          49 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                          32 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            3 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                          54 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             20 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            5 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2014 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2014 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    11\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  0\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   0\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                 8\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  4\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  0\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                   8\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  2\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     2\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   1\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2014 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                1346\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              534\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                91\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                             136\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              505\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              519\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               569\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              474\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 443\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               150\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2014 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               132\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             51\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               2\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                           139\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             26\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             89\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               5\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            204\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                13\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             254\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2014 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                            148 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          15 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            1 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         33 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          44 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           6 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            2 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                          41 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             10 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            7 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2015 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2015 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    16\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  0\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   0\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                 6\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  4\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  0\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                  12\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  0\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     2\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   1\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2015 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                1849\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              628\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               105\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                             140\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              553\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              528\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               639\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              573\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 740\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               159\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2015 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               131\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             49\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               1\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                           152\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             24\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             90\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               5\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            199\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                17\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             257\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2015 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                            141 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          14 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            2 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         31 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          45 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           6 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            3 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           9 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             10 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            7 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2016 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2016 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    29\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  1\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   1\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                18\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  0\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                 10\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                   0\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  7\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     4\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   0\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2016 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                2904\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              944\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               122\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                             148\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             1104\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              886\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               576\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              696\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                1030\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               192\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2016 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               214\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             36\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               2\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                           138\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             13\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              1\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                              68\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            261\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                20\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             227\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2016 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                             42 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          26 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            1 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         15 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          21 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           4 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            4 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           5 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             17 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            7 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2017 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2017 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    35\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  1\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   1\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                11\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  0\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  0\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                  11\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  6\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     3\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   1\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2017 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                2847\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             1021\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               134\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                             150\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             1031\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              618\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               980\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              744\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 996\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               206\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2017 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               190\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             25\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               1\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                           157\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             17\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             53\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               3\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            263\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                16\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             222\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2017 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                             94 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          29 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            3 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         23 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          44 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           4 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            0 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           1 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             17 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            3 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2018 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2018 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    31\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  2\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   1\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                10\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  0\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  0\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                  11\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  5\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     3\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   1\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2018 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                2733\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              913\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               140\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                             155\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              785\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              664\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               845\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              658\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 699\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               175\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2018 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               191\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             30\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               0\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                           160\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             14\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             53\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               0\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            263\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                16\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             225\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2018 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                            120 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          16 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            2 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         33 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          46 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           1 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            5 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           0 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             21 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            3 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2019 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2019 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                   131\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                 10\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   1\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                11\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                  0\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  0\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                   8\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                 11\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     3\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   1\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2019 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                2782\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             1081\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               150\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                             156\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              772\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              675\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               848\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              710\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 699\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               192\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2019 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               200\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             26\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               0\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                           166\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             14\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             53\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               0\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            263\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                16\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             201\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2019 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                            114 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          19 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            3 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         37 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          46 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           3 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            5 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           0 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             21 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            3 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2020 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2020 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    48\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                 12\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                   5\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                12\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                 24\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  3\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                  41\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  6\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     9\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   2\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2020 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                1741\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              690\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                77\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                              57\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              510\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              453\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               704\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              429\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 582\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               158\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2020 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               144\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             12\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               0\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                            79\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             39\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             36\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               0\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            155\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                12\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             132\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2020 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                              9 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          12 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            9 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                          1 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          52 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           0 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            6 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           0 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                             16 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            1 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2021 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2021 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    38\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  7\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                  19\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                11\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                 50\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  3\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                  46\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                  6\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     9\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   3\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2021 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                1740\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              615\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                69\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                              51\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              554\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              491\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               730\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              446\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 414\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               164\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2021 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               134\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             15\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               7\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                            76\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             37\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             33\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               1\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            154\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                13\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             127\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2021 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                             15 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          28 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                            9 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                          3 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          54 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           0 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            5 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           0 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                              2 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            2 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2022 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2022 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    37\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  7\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                  19\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                13\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                 52\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  3\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                  46\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                 10\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     9\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   4\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2022 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                1752\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              691\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                59\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                              56\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              563\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              572\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               724\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              444\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 411\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               178\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2022 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               159\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             14\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               7\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                            82\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             46\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             31\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               3\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            161\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                13\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             129\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2022 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                             24 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          23 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                           11 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                         10 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          52 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           1 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            5 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           0 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                              2 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            1 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n$`2023 Cultivation farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2023 Cultivation farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                  &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                    35\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                                  8\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                  17\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                                13\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                                 62\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                                  2\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                                  47\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                                 10\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                     8\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                                   5\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Livestock farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2023 Livestock farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                                &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                                1751\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                              746\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                                62\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                              60\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                              565\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                              606\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               735\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                              458\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                 412\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                               163\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Fishing farm`\n# A tibble: 63 × 5\n   nb        wt        `Cities, provincies` `2023 Fishing farm`\n   &lt;nb&gt;      &lt;list&gt;    &lt;chr&gt;                              &lt;dbl&gt;\n 1 &lt;int [8]&gt; &lt;dbl [8]&gt; Ha Noi                               151\n 2 &lt;int [4]&gt; &lt;dbl [4]&gt; Vinh Phuc                             12\n 3 &lt;int [4]&gt; &lt;dbl [4]&gt; Bac Ninh                               4\n 4 &lt;int [4]&gt; &lt;dbl [4]&gt; Quang Ninh                            87\n 5 &lt;int [6]&gt; &lt;dbl [6]&gt; Hai Duong                             48\n 6 &lt;int [3]&gt; &lt;dbl [3]&gt; Hai Phong                             37\n 7 &lt;int [5]&gt; &lt;dbl [5]&gt; Hung Yen                               3\n 8 &lt;int [5]&gt; &lt;dbl [5]&gt; Thai Binh                            143\n 9 &lt;int [6]&gt; &lt;dbl [6]&gt; Ha Nam                                13\n10 &lt;int [3]&gt; &lt;dbl [3]&gt; Nam Dinh                             125\n# ℹ 53 more rows\n# ℹ 1 more variable: geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Others(*)`\n# A tibble: 63 × 5\n   nb    wt     `Cities, provincies` `2023 Others(*)`                   geometry\n   &lt;nb&gt;  &lt;list&gt; &lt;chr&gt;                           &lt;dbl&gt;         &lt;MULTIPOLYGON [°]&gt;\n 1 &lt;int&gt; &lt;dbl&gt;  Ha Noi                             29 (((105.8297 21.37512, 105…\n 2 &lt;int&gt; &lt;dbl&gt;  Vinh Phuc                          24 (((105.585 21.53527, 105.…\n 3 &lt;int&gt; &lt;dbl&gt;  Bac Ninh                           11 (((106.0325 21.22488, 106…\n 4 &lt;int&gt; &lt;dbl&gt;  Quang Ninh                          9 (((107.3455 20.68667, 107…\n 5 &lt;int&gt; &lt;dbl&gt;  Hai Duong                          52 (((106.4971 21.22826, 106…\n 6 &lt;int&gt; &lt;dbl&gt;  Hai Phong                           0 (((107.728 20.12807, 107.…\n 7 &lt;int&gt; &lt;dbl&gt;  Hung Yen                            4 (((106.1005 20.99829, 106…\n 8 &lt;int&gt; &lt;dbl&gt;  Thai Binh                           9 (((106.6048 20.27758, 106…\n 9 &lt;int&gt; &lt;dbl&gt;  Ha Nam                              2 (((106.0332 20.6791, 106.…\n10 &lt;int&gt; &lt;dbl&gt;  Nam Dinh                            2 (((106.1047 19.89106, 106…\n# ℹ 53 more rows\n\n\n\n\nGlobal Moran’s I is a statistical test used to assess spatial autocorrelation in a data set, which means it evaluates whether the presence of a particular phenomenon (like the number of cultivation farms) in a geographic area is influenced by nearby areas\n\ncompute_list_of_morans_i_test &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in VIETNAM_COL_NAMES) {\n    event_data_list[[col_name]]&lt;- global_moran_test(data[[col_name]][[col_name]],\n            vietnam_farms_q[[col_name]]$nb,\n            vietnam_farms_q[[col_name]]$wt)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\ncompute_list_of_morans_i_test(\"vietnam_farms_moran_i_test_res\", vietnam_farms_q, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_moran_i_test_res\n\n$`2012 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 6.2405, p-value = 2.181e-10\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.500821513      -0.016129032       0.006862191 \n\n\n$`2012 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.9777, p-value = 0.001452\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.218306168      -0.016129032       0.006198545 \n\n\n$`2012 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.15565, p-value = 0.4382\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n    -0.0130741077     -0.0161290323      0.0003852305 \n\n\n$`2012 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.073961, p-value = 0.4705\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      -0.01052430       -0.01612903        0.00574260 \n\n\n$`2013 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 6.0377, p-value = 7.815e-10\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.487208949      -0.016129032       0.006949792 \n\n\n$`2013 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.3934, p-value = 0.0003452\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.250181544      -0.016129032       0.006158994 \n\n\n$`2013 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.52008, p-value = 0.3015\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n    -0.0057725442     -0.0161290323      0.0003965323 \n\n\n$`2013 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.80171, p-value = 0.2114\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.04675681       -0.01612903        0.00615279 \n\n\n$`2014 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 5.3104, p-value = 5.469e-08\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.436346312      -0.016129032       0.007259987 \n\n\n$`2014 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.9327, p-value = 0.00168\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.20149207       -0.01612903        0.00550630 \n\n\n$`2014 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.87768, p-value = 0.1901\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n    -0.0008350456     -0.0161290323      0.0003036482 \n\n\n$`2014 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.43013, p-value = 0.3335\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.014863329      -0.016129032       0.005191644 \n\n\n$`2015 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 5.2014, p-value = 9.891e-08\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.425725069      -0.016129032       0.007216432 \n\n\n$`2015 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.7492, p-value = 0.002987\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.18625542       -0.01612903        0.00541944 \n\n\n$`2015 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.9634, p-value = 0.0248\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0267608746     -0.0161290323      0.0004771706 \n\n\n$`2015 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.16953, p-value = 0.4327\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.003980907      -0.016129032       0.005134697 \n\n\n$`2016 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.2488, p-value = 1.075e-05\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.338394867      -0.016129032       0.006962366 \n\n\n$`2016 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.2749, p-value = 0.01146\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.153894185      -0.016129032       0.005586112 \n\n\n$`2016 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.7416, p-value = 0.003057\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.207392788      -0.016129032       0.006647225 \n\n\n$`2016 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.05319, p-value = 0.4788\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.014189935      -0.016129032       0.001329045 \n\n\n$`2017 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.3328, p-value = 7.362e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.346900212      -0.016129032       0.007020184 \n\n\n$`2017 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.4231, p-value = 0.007694\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.166166348      -0.016129032       0.005659787 \n\n\n$`2017 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.8152, p-value = 0.03475\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.133312563      -0.016129032       0.006777747 \n\n\n$`2017 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.38662, p-value = 0.3495\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0005552447     -0.0161290323      0.0018622622 \n\n\n$`2018 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.357, p-value = 6.592e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.34673643       -0.01612903        0.00693604 \n\n\n$`2018 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.6182, p-value = 0.00442\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.181444087      -0.016129032       0.005694515 \n\n\n$`2018 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.8135, p-value = 0.002451\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.212272224      -0.016129032       0.006590442 \n\n\n$`2018 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = -0.024039, p-value = 0.5096\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.017361116      -0.016129032       0.002627013 \n\n\n$`2019 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.21, p-value = 1.277e-05\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.332599308      -0.016129032       0.006861432 \n\n\n$`2019 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.6463, p-value = 0.004069\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.183672271      -0.016129032       0.005700736 \n\n\n$`2019 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.6845, p-value = 0.003632\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.201801067      -0.016129032       0.006590175 \n\n\n$`2019 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 0.24871, p-value = 0.4018\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.002422843      -0.016129032       0.003037074 \n\n\n$`2020 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.2828, p-value = 0.000514\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.251398081      -0.016129032       0.006641362 \n\n\n$`2020 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.5174, p-value = 0.0002179\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.263277538      -0.016129032       0.006309896 \n\n\n$`2020 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.4387, p-value = 0.0002922\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.237890730      -0.016129032       0.005456835 \n\n\n$`2020 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.1871, p-value = 0.1176\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.079912300      -0.016129032       0.006545238 \n\n\n$`2021 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.4593, p-value = 0.0002708\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.265341747      -0.016129032       0.006620581 \n\n\n$`2021 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.0755, p-value = 0.001051\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.228489444      -0.016129032       0.006326466 \n\n\n$`2021 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.7528, p-value = 8.742e-05\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.250545852      -0.016129032       0.005049468 \n\n\n$`2021 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.3921, p-value = 0.08195\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.096175219      -0.016129032       0.006508028 \n\n\n$`2022 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.5432, p-value = 0.0001976\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.271214154      -0.016129032       0.006576651 \n\n\n$`2022 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.3717, p-value = 0.0003736\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.254790674      -0.016129032       0.006456406 \n\n\n$`2022 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.7422, p-value = 9.12e-05\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.248016293      -0.016129032       0.004982246 \n\n\n$`2022 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 2.0154, p-value = 0.02193\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.146897889      -0.016129032       0.006543517 \n\n\n$`2023 Cultivation farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.7103, p-value = 0.0001035\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.291260440      -0.016129032       0.006863614 \n\n\n$`2023 Livestock farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.6853, p-value = 0.0001142\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.281128282      -0.016129032       0.006506104 \n\n\n$`2023 Fishing farm`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 3.4162, p-value = 0.0003175\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.212036896      -0.016129032       0.004460735 \n\n\n$`2023 Others(*)`\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 1.0885, p-value = 0.1382\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.07230876       -0.01612903        0.00660148 \n\n\n\n\n\nIn practice, Monte carlo simulation should be used to perform the statistical test. For sfdep, it is supported by global_moran_perm()\n\ncompute_list_of_morans_i_mc_test &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in VIETNAM_COL_NAMES) {\n    event_data_list[[col_name]]&lt;- global_moran_perm(data[[col_name]][[col_name]],\n            vietnam_farms_q[[col_name]]$nb,\n            vietnam_farms_q[[col_name]]$wt,\n            nsim = 999,\n            zero.policy = TRUE, \n            na.action=na.omit)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\ncompute_list_of_morans_i_mc_test(\"vietnam_farms_moran_i_mc_test_res\", vietnam_farms_q, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_moran_i_mc_test_res\n\n$`2012 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.50082, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n$`2012 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.21831, observed rank = 991, p-value = 0.018\nalternative hypothesis: two.sided\n\n\n$`2012 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.013074, observed rank = 703, p-value = 0.594\nalternative hypothesis: two.sided\n\n\n$`2012 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.010524, observed rank = 644, p-value = 0.712\nalternative hypothesis: two.sided\n\n\n$`2013 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.48721, observed rank = 999, p-value = 0.002\nalternative hypothesis: two.sided\n\n\n$`2013 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.25018, observed rank = 996, p-value = 0.008\nalternative hypothesis: two.sided\n\n\n$`2013 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.0057725, observed rank = 769, p-value = 0.462\nalternative hypothesis: two.sided\n\n\n$`2013 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.046757, observed rank = 818, p-value = 0.364\nalternative hypothesis: two.sided\n\n\n$`2014 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.43635, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n$`2014 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.20149, observed rank = 993, p-value = 0.014\nalternative hypothesis: two.sided\n\n\n$`2014 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.00083505, observed rank = 851, p-value = 0.298\nalternative hypothesis: two.sided\n\n\n$`2014 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.014863, observed rank = 764, p-value = 0.472\nalternative hypothesis: two.sided\n\n\n$`2015 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.42573, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n$`2015 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.18626, observed rank = 978, p-value = 0.044\nalternative hypothesis: two.sided\n\n\n$`2015 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.026761, observed rank = 948, p-value = 0.104\nalternative hypothesis: two.sided\n\n\n$`2015 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.0039809, observed rank = 661, p-value = 0.678\nalternative hypothesis: two.sided\n\n\n$`2016 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.33839, observed rank = 999, p-value = 0.002\nalternative hypothesis: two.sided\n\n\n$`2016 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.15389, observed rank = 972, p-value = 0.056\nalternative hypothesis: two.sided\n\n\n$`2016 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.20739, observed rank = 989, p-value = 0.022\nalternative hypothesis: two.sided\n\n\n$`2016 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.01419, observed rank = 592, p-value = 0.816\nalternative hypothesis: two.sided\n\n\n$`2017 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.3469, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n$`2017 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.16617, observed rank = 967, p-value = 0.066\nalternative hypothesis: two.sided\n\n\n$`2017 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.13331, observed rank = 944, p-value = 0.112\nalternative hypothesis: two.sided\n\n\n$`2017 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.00055524, observed rank = 715, p-value = 0.57\nalternative hypothesis: two.sided\n\n\n$`2018 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.34674, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n$`2018 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.18144, observed rank = 981, p-value = 0.038\nalternative hypothesis: two.sided\n\n\n$`2018 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.21227, observed rank = 995, p-value = 0.01\nalternative hypothesis: two.sided\n\n\n$`2018 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.017361, observed rank = 645, p-value = 0.71\nalternative hypothesis: two.sided\n\n\n$`2019 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.3326, observed rank = 999, p-value = 0.002\nalternative hypothesis: two.sided\n\n\n$`2019 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.18367, observed rank = 980, p-value = 0.04\nalternative hypothesis: two.sided\n\n\n$`2019 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.2018, observed rank = 989, p-value = 0.022\nalternative hypothesis: two.sided\n\n\n$`2019 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.0024228, observed rank = 713, p-value = 0.574\nalternative hypothesis: two.sided\n\n\n$`2020 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.2514, observed rank = 991, p-value = 0.018\nalternative hypothesis: two.sided\n\n\n$`2020 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.26328, observed rank = 995, p-value = 0.01\nalternative hypothesis: two.sided\n\n\n$`2020 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.23789, observed rank = 997, p-value = 0.006\nalternative hypothesis: two.sided\n\n\n$`2020 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.079912, observed rank = 871, p-value = 0.258\nalternative hypothesis: two.sided\n\n\n$`2021 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.26534, observed rank = 993, p-value = 0.014\nalternative hypothesis: two.sided\n\n\n$`2021 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.22849, observed rank = 988, p-value = 0.024\nalternative hypothesis: two.sided\n\n\n$`2021 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.25055, observed rank = 998, p-value = 0.004\nalternative hypothesis: two.sided\n\n\n$`2021 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.096175, observed rank = 904, p-value = 0.192\nalternative hypothesis: two.sided\n\n\n$`2022 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.27121, observed rank = 995, p-value = 0.01\nalternative hypothesis: two.sided\n\n\n$`2022 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.25479, observed rank = 998, p-value = 0.004\nalternative hypothesis: two.sided\n\n\n$`2022 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.24802, observed rank = 996, p-value = 0.008\nalternative hypothesis: two.sided\n\n\n$`2022 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.1469, observed rank = 953, p-value = 0.094\nalternative hypothesis: two.sided\n\n\n$`2023 Cultivation farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.29126, observed rank = 995, p-value = 0.01\nalternative hypothesis: two.sided\n\n\n$`2023 Livestock farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.28113, observed rank = 998, p-value = 0.004\nalternative hypothesis: two.sided\n\n\n$`2023 Fishing farm`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.21204, observed rank = 993, p-value = 0.014\nalternative hypothesis: two.sided\n\n\n$`2023 Others(*)`\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.072309, observed rank = 860, p-value = 0.28\nalternative hypothesis: two.sided\n\n\n\n\n\n\nhist(vietnam_farms_moran_i_mc_test_res[[\"2012 Cultivation farm\"]]$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\")"
  },
  {
    "objectID": "Take-home_Ex03/takehome_3.html#local-measures-of-spatial-autocorrelation",
    "href": "Take-home_Ex03/takehome_3.html#local-measures-of-spatial-autocorrelation",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "Local Indicators of Spatial Association (LISA) help us identify clusters among different regions. In simpler terms, LISA is a statistical method that shows how much a region is affected by its neighboring areas, with higher values indicating a stronger influence from the surroundings.\n\n\n\n\n\n\n#Helper function\ncompute_list_of_lisa &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    \n    event_data_list[[col_name]] &lt;- data[[col_name]] %&gt;% \n      mutate(local_moran = local_moran(\n        data[[col_name]][[col_name]], \n        vietnam_farms_q[[col_name]]$nb, \n        vietnam_farms_q[[col_name]]$wt, nsim = 99),\n             .before = 1) %&gt;%\n      unnest(local_moran)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\ncompute_list_of_lisa(\"vietnam_farms_list_lisa\", vietnam_farms_q, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_list_lisa\n\n$`2012 Cultivation farm`\n# A tibble: 63 × 17\n      ii       eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.240 -0.00366  0.0345 1.31  0.190     0.12         0.06   -0.953   0.603 \n 2 0.258  0.0229   0.0645 0.926 0.355     0.42         0.21   -1.14    1.14  \n 3 0.258 -0.0157   0.0732 1.01  0.312     0.34         0.17   -0.909  -0.0258\n 4 0.257 -0.0162   0.0597 1.12  0.264     0.1          0.05   -0.811  -0.205 \n 5 0.257  0.0474   0.0320 1.17  0.241     0.18         0.09   -0.985   0.735 \n 6 0.260  0.000680 0.0687 0.990 0.322     0.36         0.18   -0.897  -0.124 \n 7 0.252  0.00497  0.0477 1.13  0.257     0.14         0.07   -1.20    1.76  \n 8 0.255  0.0427   0.0447 1.01  0.315     0.16         0.08   -1.07    0.607 \n 9 0.247 -0.0102   0.0395 1.29  0.196     0.16         0.08   -0.933   1.07  \n10 0.259  0.0696   0.0651 0.742 0.458     0.46         0.23   -1.69    2.80  \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2012 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Livestock farm`\n# A tibble: 63 × 17\n         ii      eii  var_ii    z_ii    p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  1.74    -0.232   1.73     1.50   0.134       0.18         0.09    0.808\n 2  1.70     0.0352  0.548    2.25   0.0245      0.1          0.05    1.07 \n 3 -0.507   -0.0155  0.0271  -2.98   0.00286     0.04         0.02   -1.01 \n 4 -0.232    0.0116  0.0413  -1.20   0.230       0.26         0.13   -1.33 \n 5  0.571   -0.0248  0.365    0.986  0.324       0.26         0.13    1.63 \n 6  0.560    0.00104 0.368    0.921  0.357       0.3          0.15    1.38 \n 7  1.17    -0.00168 0.243    2.38   0.0174      0.06         0.03    1.54 \n 8  0.466   -0.0120  0.118    1.39   0.165       0.18         0.09    1.93 \n 9  0.164   -0.00629 0.00767  1.94   0.0520      0.12         0.06    1.44 \n10 -0.00708 -0.00432 0.00168 -0.0672 0.946       0.66         0.33   -1.15 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2012 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Fishing farm`\n# A tibble: 63 × 17\n         ii       eii   var_ii     z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.0517   0.00334  0.0135   -0.473   0.636     0.66         0.32     2.35\n 2  0.00671  0.000232 0.00272   0.124   0.901     0.54         0.27    -3.48\n 3  0.0106   0.0129   0.00460  -0.0345  0.972     0.46         0.23    -5.01\n 4 -0.00494 -0.000977 0.000237 -0.258   0.797     0.88         0.44     3.87\n 5 -0.00282 -0.0117   0.00862   0.0952  0.924     0.3          0.15    -2.84\n 6 -0.00576 -0.00219  0.000554 -0.152   0.879     0.18         0.09    -2.99\n 7 -0.0186  -0.00549  0.00841  -0.143   0.886     0.24         0.12    -2.70\n 8 -0.00842 -0.00948  0.0844    0.00365 0.997     0.2          0.1      2.98\n 9 -0.0181   0.000777 0.00255  -0.375   0.708     0.2          0.1     -2.70\n10  0.0499   0.00720  0.0709    0.160   0.873     0.22         0.11     3.83\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2012 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Others(*)`\n# A tibble: 63 × 17\n        ii      eii  var_ii    z_ii   p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.436  -0.169   0.692   -0.322  0.748      0.98         0.49     1.82\n 2 -0.0376  0.00427 0.00133 -1.15   0.251      0.32         0.16    -1.66\n 3 -0.186  -0.00534 0.0103  -1.78   0.0752     0.24         0.12    -1.72\n 4 -0.0433  0.00159 0.0183  -0.332  0.740      0.44         0.22    -1.62\n 5 -0.316  -0.0623  0.316   -0.451  0.652      0.98         0.49     1.76\n 6 -0.0464 -0.00469 0.00643 -0.520  0.603      0.36         0.18    -1.71\n 7 -0.317   0.00323 0.0309  -1.83   0.0679     0.16         0.08    -1.79\n 8 -0.0234 -0.00347 0.00246 -0.402  0.688      0.52         0.26    -1.51\n 9  0.119  -0.00982 0.0290   0.759  0.448      0.46         0.23     1.02\n10 -0.0219 -0.0307  0.0328   0.0485 0.961      0.64         0.32    -1.67\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2012 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Cultivation farm`\n# A tibble: 63 × 17\n      ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.243 -0.00197 0.0453 1.15  0.250     0.14         0.08   -0.962   1.04  \n 2 0.268  0.0191  0.0673 0.960 0.337     0.44         0.22   -1.02    1.08  \n 3 0.266 -0.00362 0.0621 1.08  0.279     0.28         0.14   -0.861   0.118 \n 4 0.265  0.0124  0.0569 1.06  0.290     0.24         0.13   -0.996   0.892 \n 5 0.268  0.0119  0.0344 1.38  0.168     0.1          0.05   -0.299  -0.952 \n 6 0.267  0.0614  0.0724 0.766 0.444     0.24         0.12   -1.91    4.18  \n 7 0.261 -0.0112  0.0484 1.24  0.216     0.26         0.13   -0.377  -0.901 \n 8 0.270 -0.0238  0.0675 1.13  0.258     0.16         0.09   -0.750   0.0788\n 9 0.252 -0.0345  0.0585 1.19  0.236     0.2          0.1    -0.979   0.533 \n10 0.273  0.0343  0.0883 0.802 0.422     0.32         0.16   -1.33    1.00  \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2013 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Livestock farm`\n# A tibble: 63 × 17\n        ii       eii   var_ii   z_ii     p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  1.96   -0.369    1.09      2.23  0.0257       0.08         0.04     2.14\n 2  1.58   -0.0781   0.571     2.20  0.0280       0.14         0.07     1.22\n 3 -0.510  -0.00721  0.0188   -3.67  0.000238     0.02         0.01    -1.01\n 4 -0.177   0.0186   0.0142   -1.64  0.101        0.16         0.08    -1.78\n 5  0.667  -0.000971 0.325     1.17  0.241        0.3          0.15     1.12\n 6  0.728  -0.119    0.442     1.27  0.203        0.22         0.11     1.28\n 7  1.33   -0.0634   0.197     3.15  0.00164      0.04         0.02     1.38\n 8  0.541  -0.0140   0.0714    2.08  0.0380       0.14         0.07     1.71\n 9  0.691  -0.0115   0.182     1.65  0.0999       0.2          0.1      1.61\n10 -0.0130  0.000528 0.000429 -0.651 0.515        0.36         0.18    -1.59\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2013 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Fishing farm`\n# A tibble: 63 × 17\n         ii       eii      var_ii    z_ii    p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.0491   0.00179  0.0105      -0.498  6.19e-1     0.38         0.19     1.98\n 2  0.00805  0.00326  0.00349      0.0812 9.35e-1     0.5          0.25    -5.41\n 3  0.00986 -0.0212   0.0187       0.227  8.20e-1     0.46         0.23    -2.85\n 4 -0.0117   0.000458 0.00246     -0.245  8.06e-1     0.66         0.33     3.20\n 5 -0.00516  0.00554  0.00239     -0.219  8.27e-1     0.18         0.09    -3.18\n 6  0.00199 -0.00133  0.000000732  3.88   1.04e-4     0.04         0.02     2.45\n 7 -0.0183  -0.00811  0.0113      -0.0960 9.24e-1     0.22         0.11    -3.11\n 8  0.00101 -0.0538   0.0427       0.265  7.91e-1     0.12         0.06     4.42\n 9 -0.0196   0.00183  0.00399     -0.339  7.35e-1     0.14         0.07    -4.36\n10  0.0498   0.0133   0.125        0.103  9.18e-1     0.16         0.08     4.79\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2013 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Others(*)`\n# A tibble: 63 × 17\n         ii       eii   var_ii    z_ii   p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.175   -0.191    1.19      0.0153 0.988      0.78         0.39     1.06\n 2  0.151   -0.0103   0.00479   2.33   0.0200     0.1          0.05     1.47\n 3 -0.408   -0.00389  0.0566   -1.70   0.0894     0.16         0.08    -1.98\n 4 -0.00714  0.00266  0.00129  -0.273  0.785      0.5          0.25    -1.47\n 5  0.00737 -0.0596   0.0778    0.240  0.810      0.56         0.28     1.27\n 6  0.204    0.0161   0.0519    0.824  0.410      0.36         0.18     1.80\n 7 -0.388   -0.0172   0.0368   -1.93   0.0534     0.14         0.07    -1.36\n 8  0.0936  -0.0588   0.141     0.405  0.685      0.44         0.22     1.36\n 9  0.0350   0.000965 0.000469  1.57   0.116      0.18         0.09     1.42\n10 -0.0915  -0.00839  0.0451   -0.391  0.696      0.36         0.18    -2.29\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2013 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Cultivation farm`\n# A tibble: 63 × 17\n      ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.281  0.00377 0.0316 1.56  0.119     0.14         0.07   -0.277  -0.630 \n 2 0.287 -0.0360  0.0622 1.29  0.196     0.28         0.14   -0.388  -0.543 \n 3 0.298  0.0179  0.0775 1.00  0.315     0.28         0.14   -1.12    0.881 \n 4 0.291 -0.0509  0.0829 1.19  0.235     0.16         0.08   -0.915   1.22  \n 5 0.301 -0.0154  0.0585 1.31  0.190     0.1          0.05   -0.909   0.662 \n 6 0.319 -0.0329  0.132  0.969 0.332     0.24         0.12   -1.37    2.88  \n 7 0.303 -0.00728 0.0552 1.32  0.187     0.14         0.07   -0.610  -0.0144\n 8 0.318 -0.0255  0.0629 1.37  0.171     0.04         0.02   -0.876   0.633 \n 9 0.301 -0.0277  0.0519 1.44  0.150     0.14         0.07   -0.161  -0.830 \n10 0.324 -0.0245  0.150  0.901 0.368     0.24         0.14   -1.33    2.00  \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2014 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Livestock farm`\n# A tibble: 63 × 17\n        ii       eii  var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  1.41    0.00232  1.42     1.18  0.237       0.34         0.17    1.00 \n 2  0.889  -0.0811   0.202    2.16  0.0307      0.16         0.08    1.54 \n 3 -0.487  -0.00439  0.0256  -3.02  0.00256     0.04         0.02   -2.28 \n 4 -0.0880  0.000509 0.0102  -0.874 0.382       0.26         0.13   -2.17 \n 5  0.437  -0.0297   0.117    1.37  0.172       0.26         0.13    1.11 \n 6  0.482   0.0779   0.422    0.622 0.534       0.32         0.16    1.85 \n 7  1.21   -0.0451   0.245    2.54  0.0112      0.12         0.06    1.35 \n 8  0.573  -0.0284   0.124    1.70  0.0882      0.22         0.11    0.993\n 9  0.526   0.00644  0.0907   1.73  0.0845      0.18         0.09    1.28 \n10 -0.0597 -0.00234  0.00518 -0.797 0.426       0.42         0.21   -1.62 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2014 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Fishing farm`\n# A tibble: 63 × 17\n          ii      eii   var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n       &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.0271   -0.00430 0.00281  -0.429  0.668     0.4          0.2      3.22\n 2  0.00649  -0.00434 0.00129   0.302  0.763     0.88         0.44    -2.73\n 3  0.0163   -0.00712 0.0114    0.220  0.826     0.58         0.29    -2.95\n 4 -0.0207   -0.00156 0.00995  -0.192  0.848     0.76         0.38     4.89\n 5 -0.000399  0.00361 0.00302  -0.0729 0.942     0.16         0.08    -4.07\n 6  0.00563  -0.00132 0.000362  0.365  0.715     0.08         0.04     5.13\n 7 -0.000866 -0.00556 0.00743   0.0545 0.957     0.3          0.15    -2.72\n 8  0.00359   0.00996 0.0296   -0.0370 0.970     0.22         0.11     2.56\n 9 -0.0123   -0.00535 0.00520  -0.0966 0.923     0.26         0.13    -2.25\n10  0.00128  -0.0283  0.0510    0.131  0.896     0.1          0.05     5.29\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2014 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Others(*)`\n# A tibble: 63 × 17\n         ii       eii   var_ii     z_ii    p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.287   -0.301    1.36      0.0124  0.990       0.7          0.35     1.37\n 2  0.0267   0.000213 0.000177  1.99    0.0464      0.16         0.08     1.85\n 3 -0.498   -0.000586 0.0356   -2.63    0.00842     0.08         0.04    -1.69\n 4  0.0431  -0.0132   0.0696    0.213   0.831       0.52         0.26     1.62\n 5  0.0684  -0.0353   0.125     0.293   0.769       0.46         0.23     1.44\n 6 -0.203    0.0158   0.0126   -1.95    0.0517      0.12         0.06    -2.29\n 7 -0.415   -0.0124   0.0362   -2.12    0.0342      0.06         0.03    -2.93\n 8 -0.00990 -0.00819  0.158    -0.00429 0.997       0.6          0.3      1.80\n 9 -0.104    0.00206  0.00246  -2.13    0.0333      0.12         0.06    -1.11\n10 -0.0600  -0.0172   0.0208   -0.297   0.766       0.4          0.2     -2.05\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2014 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Cultivation farm`\n# A tibble: 63 × 17\n      ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.263 -0.00255 0.0359 1.40  0.162     0.22         0.11   -0.620  -0.0883\n 2 0.288 -0.0269  0.0825 1.09  0.274     0.4          0.2    -0.430  -0.868 \n 3 0.286  0.0354  0.0734 0.927 0.354     0.58         0.29   -0.937   0.418 \n 4 0.290 -0.0385  0.0735 1.21  0.226     0.26         0.13   -0.572  -0.258 \n 5 0.296  0.00308 0.0553 1.25  0.213     0.2          0.1    -0.519  -0.344 \n 6 0.317  0.00326 0.0786 1.12  0.262     0.18         0.09   -0.879   0.949 \n 7 0.289 -0.00753 0.0557 1.26  0.209     0.12         0.06   -0.722  -0.0330\n 8 0.316 -0.00938 0.0684 1.25  0.213     0.12         0.06   -0.603  -0.624 \n 9 0.290 -0.00145 0.0580 1.21  0.226     0.26         0.13   -0.729   0.0944\n10 0.321 -0.0277  0.127  0.977 0.328     0.16         0.09   -0.779  -0.531 \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2015 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Livestock farm`\n# A tibble: 63 × 17\n        ii      eii var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  1.56   -0.203   1.19    1.62  0.106       0.2          0.1      1.09\n 2  0.894   0.0397  0.337   1.47  0.141       0.32         0.16     1.76\n 3 -0.482  -0.0232  0.0298 -2.66  0.00778     0.08         0.04    -1.66\n 4 -0.0789  0.0128  0.0132 -0.798 0.425       0.34         0.17    -1.82\n 5  0.293  -0.0131  0.0854  1.05  0.295       0.28         0.14     1.25\n 6  0.302  -0.0255  0.103   1.02  0.308       0.18         0.09     2.24\n 7  1.20    0.104   0.276   2.09  0.0368      0.1          0.05     1.30\n 8  0.544  -0.0846  0.0767  2.27  0.0233      0.14         0.07     1.30\n 9  0.918  -0.00349 0.291   1.71  0.0876      0.12         0.06     1.73\n10 -0.104   0.0110  0.0103 -1.13  0.256       0.16         0.08    -2.32\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2015 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Fishing farm`\n# A tibble: 63 × 17\n         ii      eii   var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.0381  -0.00206 0.00599  -0.465  0.642     0.6          0.3      2.78\n 2  0.00590  0.00376 0.000430  0.103  0.918     0.64         0.32    -4.90\n 3  0.0159  -0.00684 0.0138    0.193  0.847     0.6          0.3     -2.90\n 4 -0.0316  -0.0114  0.0156   -0.162  0.871     0.56         0.28     3.87\n 5 -0.00503  0.00235 0.00295  -0.136  0.892     0.2          0.1     -2.71\n 6  0.0152   0.00140 0.00209   0.302  0.763     0.14         0.07     3.86\n 7 -0.00544 -0.0117  0.0101    0.0626 0.950     0.3          0.15    -2.36\n 8  0.0179   0.00290 0.0411    0.0739 0.941     0.24         0.12     2.70\n 9 -0.0182  -0.00311 0.00459  -0.223  0.823     0.24         0.12    -2.31\n10  0.0168   0.0650  0.230    -0.100  0.920     0.26         0.13     2.75\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2015 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Others(*)`\n# A tibble: 63 × 17\n         ii       eii   var_ii    z_ii   p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.568   -0.227    1.28     -0.300  0.764      0.96         0.48     1.72\n 2 -0.0414  -0.00285  0.000542 -1.65   0.0982     0.22         0.11    -1.85\n 3 -0.411    0.000394 0.0495   -1.85   0.0644     0.16         0.08    -2.63\n 4 -0.0198  -0.0130   0.0437   -0.0325 0.974      0.68         0.34     1.50\n 5 -0.166   -0.00810  0.173    -0.380  0.704      1            0.5      2.05\n 6 -0.113    0.0384   0.0187   -1.10   0.269      0.18         0.09    -3.62\n 7 -0.299    0.00691  0.0321   -1.71   0.0877     0.22         0.11    -2.03\n 8  0.00689 -0.00476  0.00722   0.137  0.891      0.78         0.39    -1.42\n 9 -0.0887   0.00396  0.00383  -1.50   0.134      0.28         0.14    -1.33\n10  0.0210   0.0152   0.0106    0.0556 0.956      0.8          0.39    -2.22\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2015 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Cultivation farm`\n# A tibble: 63 × 17\n      ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness  kurtosis\n   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n 1 0.201 -0.0184  0.0249 1.39  0.164     0.1          0.05   -0.709  0.351   \n 2 0.208  0.0213  0.0612 0.754 0.451     0.74         0.37   -0.856 -0.222   \n 3 0.249  0.0168  0.0608 0.943 0.346     0.36         0.18   -0.883 -0.0749  \n 4 0.228 -0.0302  0.0687 0.985 0.325     0.42         0.21   -0.899 -0.148   \n 5 0.260 -0.00923 0.0371 1.40  0.162     0.1          0.05   -0.647 -0.000635\n 6 0.250  0.00596 0.0811 0.856 0.392     0.32         0.16   -1.47   2.34    \n 7 0.268  0.0411  0.0499 1.02  0.309     0.26         0.13   -0.992  0.348   \n 8 0.265 -0.0259  0.0633 1.16  0.247     0.1          0.05   -1.06   0.772   \n 9 0.237 -0.0154  0.0465 1.17  0.242     0.16         0.08   -0.754 -0.149   \n10 0.276  0.0252  0.0847 0.863 0.388     0.22         0.11   -1.19   0.302   \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2016 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Livestock farm`\n# A tibble: 63 × 17\n       ii      eii var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness kurtosis\n    &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  1.61  -0.592   1.29    1.94  5.22e-2     0.12         0.06     2.21    6.56 \n 2  1.21  -0.0305  0.203   2.76  5.82e-3     0.1          0.05     1.64    2.32 \n 3 -0.589  0.0119  0.0347 -3.23  1.25e-3     0.04         0.02    -2.31    6.24 \n 4 -0.169 -0.00112 0.0221 -1.13  2.59e-1     0.3          0.15    -1.36    1.10 \n 5  0.389 -0.0608  0.218   0.964 3.35e-1     0.4          0.2      1.31    0.580\n 6  0.516 -0.0842  0.241   1.22  2.21e-1     0.2          0.1      1.89    3.25 \n 7  0.601  0.00492 0.0320  3.33  8.67e-4     0.02         0.01     1.18    0.335\n 8  0.455 -0.0351  0.0501  2.19  2.86e-2     0.1          0.05     1.36    1.60 \n 9  0.880 -0.0203  0.229   1.88  6.00e-2     0.16         0.08     1.50    1.89 \n10 -0.116 -0.0162  0.0239 -0.647 5.17e-1     0.3          0.15    -1.66    1.71 \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2016 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Fishing farm`\n# A tibble: 63 × 17\n         ii        eii   var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.670   -0.0573    0.879    -0.654 0.513       0.62         0.31    1.15 \n 2 -0.00536  0.0000433 0.000107 -0.523 0.601       0.46         0.23   -1.70 \n 3 -0.314    0.0000464 0.0761   -1.14  0.255       0.26         0.13   -1.49 \n 4 -0.622   -0.0887    0.516    -0.743 0.458       0.44         0.22    1.58 \n 5 -0.231    0.0129    0.0181   -1.82  0.0695      0.14         0.07   -0.875\n 6 -0.779    0.0375    0.0750   -2.98  0.00287     0.06         0.03   -1.75 \n 7  0.426   -0.00679   0.0388    2.20  0.0280      0.12         0.06    1.43 \n 8  1.37    -0.236     1.47      1.32  0.186       0.3          0.15    0.898\n 9 -0.350    0.000282  0.0115   -3.26  0.00112     0.02         0.01   -0.959\n10  2.55    -0.0442    2.39      1.68  0.0934      0.22         0.11    1.43 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2016 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Others(*)`\n# A tibble: 63 × 17\n          ii       eii     var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n       &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.0145    0.0145   0.0337     -0.158  0.875     0.54         0.27     1.88\n 2  0.0584   -0.000281 0.00704     0.699  0.484     0.16         0.08     2.86\n 3 -0.0133   -0.0230   0.0303      0.0557 0.956     0.42         0.21    -2.36\n 4  0.00457  -0.00268  0.000354    0.385  0.700     0.96         0.49    -2.33\n 5 -0.0146    0.00179  0.00136    -0.447  0.655     0.72         0.36     2.71\n 6  0.0130   -0.0106   0.0258      0.146  0.884     0.68         0.34    -3.09\n 7 -0.00207   0.00788  0.00692    -0.120  0.905     0.5          0.25    -3.15\n 8  0.0240    0.0116   0.00557     0.166  0.868     0.9          0.45    -3.63\n 9 -0.000323 -0.000244 0.00000299 -0.0461 0.963     0.68         0.34     2.80\n10  0.0218   -0.0109   0.0185      0.240  0.810     0.8          0.4     -4.07\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2016 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Cultivation farm`\n# A tibble: 63 × 17\n      ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.190 -0.00751 0.0223 1.33  0.185     0.18         0.09   -0.519   -0.297\n 2 0.206  0.0312  0.0575 0.731 0.465     0.56         0.28   -1.06     0.399\n 3 0.247  0.0179  0.0631 0.913 0.361     0.52         0.26   -0.908    0.259\n 4 0.251 -0.0390  0.0750 1.06  0.290     0.42         0.21   -0.693   -0.240\n 5 0.269  0.0123  0.0449 1.21  0.225     0.12         0.06   -0.671   -0.421\n 6 0.281 -0.0557  0.115  0.995 0.320     0.22         0.11   -0.877   -0.333\n 7 0.253  0.0197  0.0486 1.06  0.289     0.16         0.08   -1.22     1.63 \n 8 0.274 -0.00907 0.0563 1.19  0.232     0.12         0.06   -0.663   -0.275\n 9 0.235  0.0308  0.0407 1.01  0.312     0.36         0.18   -0.779   -0.104\n10 0.284 -0.0230  0.115  0.907 0.364     0.16         0.08   -0.928   -0.338\n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2017 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Livestock farm`\n# A tibble: 63 × 17\n       ii     eii var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness kurtosis\n    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  1.96  -0.326  1.61    1.80  0.0718      0.16         0.08     2.01     5.59\n 2  1.32  -0.0526 0.247   2.75  0.00590     0.08         0.04     1.43     1.52\n 3 -0.612 -0.0267 0.0448 -2.77  0.00566     0.06         0.03    -1.91     4.09\n 4 -0.126  0.0142 0.0251 -0.883 0.377       0.26         0.13    -2.39     7.54\n 5  0.416  0.0566 0.353   0.605 0.545       0.44         0.22     1.84     3.58\n 6  0.254 -0.0289 0.0543  1.21  0.225       0.16         0.08     2.00     5.12\n 7  1.54   0.0377 0.281   2.84  0.00451     0.06         0.03     1.33     1.78\n 8  0.517  0.0288 0.150   1.26  0.208       0.26         0.13     1.85     4.41\n 9  0.956 -0.0220 0.226   2.06  0.0394      0.08         0.04     1.77     3.89\n10 -0.108  0.0250 0.0106 -1.29  0.198       0.16         0.08    -2.39     7.15\n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2017 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Fishing farm`\n# A tibble: 63 × 17\n        ii       eii  var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.782  -0.0396   0.519   -1.03  0.302       0.2          0.1     1.02 \n 2 -0.0301 -0.00683  0.0148  -0.192 0.848       0.6          0.3    -1.23 \n 3 -0.102  -0.0167   0.0667  -0.332 0.740       0.64         0.32   -1.18 \n 4 -0.384  -0.0800   0.569   -0.403 0.687       1            0.5     1.63 \n 5 -0.168  -0.00442  0.0188  -1.19  0.234       0.22         0.11   -1.37 \n 6  0.196  -0.00760  0.00512  2.85  0.00435     0.02         0.01    1.05 \n 7 -0.360  -0.00417  0.0425  -1.73  0.0843      0.16         0.08   -1.03 \n 8  0.758  -0.0559   1.46     0.675 0.500       0.5          0.25    1.03 \n 9 -0.317  -0.000507 0.0206  -2.21  0.0274      0.1          0.05   -0.929\n10  1.70   -0.362    1.59     1.63  0.103       0.2          0.1     2.29 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2017 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Others(*)`\n# A tibble: 63 × 17\n         ii       eii   var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.174   -0.0379   0.259    -0.267  0.789     0.86         0.43     2.70\n 2  0.0729   0.00163  0.00663   0.875  0.381     0.16         0.08     3.07\n 3 -0.0816  -0.0207   0.0243   -0.390  0.696     0.24         0.12    -2.29\n 4 -0.00551  0.00555  0.00217  -0.238  0.812     0.7          0.35     2.25\n 5 -0.0869   0.00808  0.0328   -0.525  0.600     0.68         0.33     2.17\n 6 -0.0175  -0.00207  0.0168   -0.119  0.905     0.52         0.26    -3.27\n 7 -0.0710   0.0101   0.0114   -0.759  0.448     0.2          0.1     -2.99\n 8  0.0246   0.00343  0.0152    0.172  0.864     0.72         0.36    -2.65\n 9 -0.00186 -0.00114  0.000146 -0.0593 0.953     0.44         0.22    -2.45\n10  0.0111   0.000683 0.0225    0.0692 0.945     0.56         0.28    -3.48\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2017 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Cultivation farm`\n# A tibble: 63 × 17\n      ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.192 -0.00743 0.0197 1.42  0.155     0.16         0.08   -0.842   0.663 \n 2 0.188 -0.0640  0.0767 0.908 0.364     0.58         0.29   -0.761   0.0146\n 3 0.246 -0.00524 0.0691 0.955 0.340     0.4          0.2    -1.06    0.828 \n 4 0.251 -0.0243  0.0668 1.06  0.287     0.26         0.13   -0.968   0.613 \n 5 0.270 -0.0261  0.0564 1.25  0.213     0.2          0.1    -0.615  -0.306 \n 6 0.286  0.0353  0.0938 0.819 0.413     0.28         0.14   -1.79    4.21  \n 7 0.257  0.00798 0.0529 1.08  0.279     0.24         0.12   -1.19    1.42  \n 8 0.280  0.0117  0.0569 1.12  0.261     0.08         0.04   -1.05    0.645 \n 9 0.237  0.0130  0.0391 1.13  0.257     0.38         0.19   -0.455  -0.595 \n10 0.289  0.0442  0.0700 0.926 0.354     0.22         0.11   -0.968  -0.153 \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2018 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Livestock farm`\n# A tibble: 63 × 17\n        ii      eii var_ii   z_ii      p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  2.04   -0.322   1.97    1.68  0.0925        0.18         0.09     1.05\n 2  1.49    0.0750  0.411   2.21  0.0269        0.08         0.04     1.40\n 3 -0.601   0.0249  0.0225 -4.17  0.0000309     0.02         0.01    -1.83\n 4 -0.117   0.00685 0.0209 -0.855 0.392         0.3          0.15    -1.41\n 5  0.350  -0.00141 0.149   0.908 0.364         0.46         0.23     1.16\n 6  0.295  -0.00659 0.160   0.753 0.451         0.26         0.13     1.87\n 7  1.40    0.0851  0.295   2.41  0.0159        0.08         0.04     1.35\n 8  0.422  -0.0503  0.0541  2.03  0.0423        0.16         0.08     1.28\n 9  0.669  -0.0227  0.101   2.17  0.0299        0.1          0.05     1.63\n10 -0.0926 -0.00194 0.0244 -0.581 0.561         0.36         0.18    -1.67\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2018 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Fishing farm`\n# A tibble: 63 × 17\n        ii      eii  var_ii   z_ii      p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.784  -0.154   0.689   -0.759 0.448         0.48         0.23    1.56 \n 2 -0.0311 -0.00502 0.00261 -0.509 0.611         0.56         0.28   -1.13 \n 3 -0.146   0.00426 0.0595  -0.617 0.537         0.44         0.22   -1.36 \n 4 -0.409  -0.118   0.554   -0.391 0.696         1            0.5     1.02 \n 5 -0.220  -0.0124  0.0201  -1.47  0.143         0.18         0.09   -1.09 \n 6  0.366  -0.0330  0.00886  4.24  0.0000220     0.02         0.01    1.37 \n 7 -0.467  -0.0257  0.0584  -1.83  0.0679        0.12         0.06   -0.795\n 8  1.17   -0.133   1.87     0.955 0.340         0.38         0.19    1.10 \n 9 -0.349  -0.0220  0.0185  -2.41  0.0161        0.06         0.03   -0.838\n10  2.43    0.118   2.48     1.47  0.142         0.26         0.13    1.25 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2018 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Others(*)`\n# A tibble: 63 × 17\n         ii       eii   var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.271   -0.0162   0.462    -0.374  0.708     0.82         0.41     1.88\n 2 -0.0312  -0.00491  0.00112  -0.786  0.432     0.22         0.11    -2.67\n 3 -0.126   -0.00482  0.0216   -0.823  0.410     0.22         0.11    -2.28\n 4 -0.0236   0.00850  0.0156   -0.257  0.797     0.76         0.38     2.18\n 5 -0.0885  -0.0359   0.0182   -0.391  0.696     0.98         0.49     2.67\n 6 -0.0387   0.0120   0.0245   -0.324  0.746     0.34         0.17    -3.43\n 7 -0.0772   0.00425  0.00814  -0.903  0.367     0.18         0.09    -2.65\n 8  0.0213  -0.0174   0.0274    0.234  0.815     0.86         0.43    -2.16\n 9  0.00484  0.000240 0.000179  0.344  0.731     0.34         0.17     1.96\n10  0.00790  0.00540  0.0257    0.0156 0.988     0.38         0.19    -3.32\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2018 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Cultivation farm`\n# A tibble: 63 × 17\n        ii       eii  var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.00500  0.000804 1.45e-5 1.10  0.271     0.28         0.14   -1.14    1.72  \n 2 0.106   -0.0299   6.36e-2 0.539 0.590     0.66         0.33   -0.789  -0.315 \n 3 0.196    0.0422   6.83e-2 0.588 0.557     0.78         0.39   -1.59    3.13  \n 4 0.254    0.0123   6.08e-2 0.979 0.328     0.34         0.17   -0.910  -0.0380\n 5 0.274    0.00146  4.60e-2 1.27  0.205     0.1          0.05   -0.906   0.608 \n 6 0.287    0.0538   7.95e-2 0.827 0.408     0.28         0.14   -1.71    2.60  \n 7 0.223   -0.0138   4.98e-2 1.06  0.289     0.34         0.17   -0.755  -0.111 \n 8 0.274   -0.0194   5.61e-2 1.24  0.216     0.04         0.02   -1.03    0.698 \n 9 0.203    0.000211 4.74e-2 0.934 0.350     0.32         0.16   -1.29    1.90  \n10 0.291   -0.0420   9.87e-2 1.06  0.290     0.2          0.1    -0.872  -0.166 \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2019 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Livestock farm`\n# A tibble: 63 × 17\n        ii      eii var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  2.08   -0.348   1.58    1.93  0.0540      0.12         0.06    0.808\n 2  1.78   -0.0297  0.529   2.49  0.0128      0.08         0.04    1.41 \n 3 -0.563  -0.0271  0.0330 -2.95  0.00315     0.04         0.02   -1.61 \n 4 -0.110  -0.00303 0.0231 -0.701 0.483       0.32         0.16   -1.55 \n 5  0.314  -0.0115  0.146   0.853 0.394       0.42         0.21    1.69 \n 6  0.279  -0.0382  0.152   0.813 0.416       0.28         0.14    1.93 \n 7  1.30   -0.0158  0.182   3.09  0.00197     0.02         0.01    1.10 \n 8  0.432  -0.00393 0.141   1.16  0.246       0.24         0.12    2.10 \n 9  0.623   0.0362  0.0948  1.91  0.0567      0.08         0.04    1.02 \n10 -0.0857  0.00118 0.0138 -0.738 0.460       0.26         0.13   -1.88 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2019 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Fishing farm`\n# A tibble: 63 × 17\n        ii      eii  var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.841  -0.0630  0.845   -0.846 0.397       0.44         0.22    1.25 \n 2 -0.0555 -0.00681 0.00796 -0.546 0.585       0.52         0.26   -1.12 \n 3 -0.166  -0.0185  0.0921  -0.485 0.628       0.46         0.23   -1.78 \n 4 -0.432  -0.0242  1.03    -0.402 0.688       0.98         0.49    1.30 \n 5 -0.227   0.0122  0.0142  -2.01  0.0449      0.1          0.05   -0.899\n 6  0.379  -0.00327 0.0187   2.79  0.00529     0.06         0.03    1.44 \n 7 -0.485   0.0262  0.0427  -2.48  0.0133      0.02         0.01   -0.592\n 8  0.956  -0.489   1.56     1.16  0.248       0.26         0.13    1.68 \n 9 -0.341  -0.00273 0.0193  -2.44  0.0149      0.04         0.02   -1.23 \n10  2.15   -0.0693  1.48     1.82  0.0692      0.12         0.06    1.28 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2019 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Others(*)`\n# A tibble: 63 × 17\n         ii       eii    var_ii   z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.247   -0.0897   0.235     -0.324 0.746     0.94         0.47     2.02\n 2 -0.00982 -0.000254 0.0000510 -1.34  0.180     0.2          0.1     -2.06\n 3 -0.109    0.00585  0.0171    -0.877 0.380     0.24         0.12    -2.43\n 4 -0.0297   0.00909  0.0363    -0.204 0.839     0.64         0.32     3.17\n 5 -0.0803   0.0195   0.0393    -0.503 0.615     0.9          0.45     1.75\n 6 -0.0370   0.00520  0.0253    -0.265 0.791     0.42         0.21    -3.06\n 7 -0.0710   0.0180   0.00920   -0.928 0.353     0.2          0.1     -4.30\n 8  0.0243  -0.00790  0.0215     0.219 0.827     0.84         0.42    -1.94\n 9  0.00190 -0.00109  0.0000376  0.488 0.626     0.36         0.18     2.16\n10  0.0123  -0.0383   0.0507     0.225 0.822     0.7          0.35    -2.99\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2019 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Cultivation farm`\n# A tibble: 63 × 17\n       ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n    &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.110  -0.0127  0.0116 1.14  0.254     0.18         0.09   -0.658   -0.467\n 2 0.0776 -0.0211  0.0634 0.392 0.695     0.88         0.44   -1.40     2.11 \n 3 0.158  -0.00480 0.0581 0.675 0.499     0.74         0.37   -0.894   -0.167\n 4 0.200  -0.0194  0.0677 0.844 0.399     0.52         0.26   -1.12     0.763\n 5 0.177  -0.0116  0.0269 1.15  0.250     0.18         0.09   -0.905    0.535\n 6 0.247  -0.0105  0.0990 0.817 0.414     0.36         0.18   -1.32     0.840\n 7 0.147  -0.0168  0.0244 1.05  0.294     0.22         0.11   -1.56     3.61 \n 8 0.235   0.0255  0.0332 1.15  0.251     0.24         0.12   -0.860    0.467\n 9 0.182  -0.0249  0.0482 0.944 0.345     0.38         0.19   -1.24     2.05 \n10 0.274   0.00422 0.0971 0.865 0.387     0.24         0.12   -1.57     2.26 \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2020 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Livestock farm`\n# A tibble: 63 × 17\n        ii      eii var_ii   z_ii      p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  2.99   -0.305   2.14    2.25  0.0244        0.1          0.05    1.13 \n 2  2.07   -0.175   0.399   3.55  0.000386      0.04         0.02    2.24 \n 3 -0.806   0.00391 0.0402 -4.04  0.0000529     0.02         0.01   -1.20 \n 4 -0.176   0.0360  0.0448 -1.00  0.317         0.28         0.14   -1.67 \n 5  0.353  -0.0403  0.130   1.09  0.274         0.32         0.16    1.16 \n 6  0.249   0.0305  0.183   0.509 0.610         0.42         0.21    1.41 \n 7  2.03   -0.102   0.585   2.79  0.00525       0.06         0.03    2.70 \n 8  0.516  -0.0170  0.0740  1.96  0.0499        0.14         0.07    0.967\n 9  1.07    0.00172 0.240   2.18  0.0293        0.08         0.04    1.32 \n10 -0.0837  0.00247 0.0101 -0.857 0.392         0.4          0.2    -1.21 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2020 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Fishing farm`\n# A tibble: 63 × 17\n         ii       eii   var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.501   -0.00113  0.183    -1.17   0.244     0.12         0.06    0.815\n 2  0.00531  0.0196   0.0264   -0.0878 0.930     0.7          0.35   -1.85 \n 3 -0.0217   0.00569  0.0627   -0.109  0.913     0.74         0.37   -1.48 \n 4 -0.113   -0.0308   0.0341   -0.447  0.655     0.96         0.48    1.45 \n 5 -0.00144 -0.000209 0.000461 -0.0574 0.954     0.74         0.37   -1.44 \n 6 -0.0455   0.00664  0.00104  -1.62   0.105     0.14         0.07   -1.34 \n 7 -0.157    0.0105   0.0424   -0.814  0.416     0.44         0.22   -1.18 \n 8  0.0119  -0.0843   0.259     0.189  0.850     0.56         0.28    1.31 \n 9 -0.131    0.00438  0.0211   -0.930  0.352     0.32         0.16   -2.00 \n10  0.208   -0.116    0.234     0.671  0.502     0.34         0.17    2.43 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2020 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Others(*)`\n# A tibble: 63 × 17\n         ii       eii   var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.00843 -0.000657 0.000101 -0.774  0.439     0.4          0.2    -1.21 \n 2  0.147    0.00709  0.00772   1.59   0.112     0.18         0.09    1.45 \n 3 -0.0187  -0.000375 0.000188 -1.33   0.182     0.28         0.14   -1.06 \n 4 -0.247    0.0298   0.0450   -1.30   0.192     0.3          0.15   -1.03 \n 5 -0.500   -0.124    0.882    -0.401  0.688     0.9          0.45    1.17 \n 6 -0.265   -0.000543 0.107    -0.807  0.420     0.32         0.16   -2.43 \n 7 -0.0912  -0.00273  0.00902  -0.931  0.352     0.3          0.15   -1.60 \n 8 -0.179    0.00163  0.0514   -0.797  0.425     0.46         0.23   -1.27 \n 9 -0.103   -0.0327   0.0163   -0.553  0.580     0.74         0.37    0.826\n10  0.0224   0.000776 0.0556    0.0918 0.927     0.82         0.41   -0.912\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2020 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Cultivation farm`\n# A tibble: 63 × 17\n       ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n    &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.131   0.0139  0.0163 0.915 0.360     0.42         0.21   -0.948   0.651 \n 2 0.0628 -0.0165  0.0660 0.309 0.758     0.9          0.45   -0.779  -0.391 \n 3 0.133  -0.0528  0.0854 0.635 0.526     0.76         0.38   -1.26    1.49  \n 4 0.201  -0.0187  0.0723 0.817 0.414     0.5          0.26   -1.50    2.61  \n 5 0.124   0.0169  0.0140 0.904 0.366     0.32         0.16   -1.23    1.42  \n 6 0.242  -0.0235  0.127  0.744 0.457     0.5          0.25   -1.62    2.82  \n 7 0.135  -0.0284  0.0219 1.10  0.270     0.18         0.09   -0.762  -0.263 \n 8 0.235  -0.00168 0.0584 0.981 0.327     0.36         0.18   -0.912   0.0275\n 9 0.202  -0.00828 0.0522 0.921 0.357     0.34         0.17   -1.04    0.473 \n10 0.294  -0.0442  0.122  0.967 0.334     0.16         0.08   -1.10    0.369 \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2021 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Livestock farm`\n# A tibble: 63 × 17\n        ii      eii  var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  2.54   -0.371   1.54     2.35  0.0189      0.04         0.02    0.478\n 2  1.75   -0.112   0.322    3.28  0.00104     0.02         0.01    1.15 \n 3 -0.873  -0.0255  0.0739  -3.11  0.00184     0.04         0.02   -1.25 \n 4 -0.203  -0.0305  0.0877  -0.584 0.559       0.38         0.19   -1.58 \n 5  0.428   0.00969 0.137    1.13  0.258       0.3          0.15    1.02 \n 6  0.339  -0.00723 0.255    0.685 0.493       0.36         0.18    1.51 \n 7  2.05   -0.0372  0.406    3.28  0.00103     0.02         0.01    0.753\n 8  0.541  -0.00892 0.0997   1.74  0.0817      0.16         0.08    1.58 \n 9  0.600   0.0103  0.0707   2.22  0.0266      0.08         0.04    0.778\n10 -0.0521  0.0211  0.00530 -1.01  0.315       0.22         0.11   -1.53 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2021 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Fishing farm`\n# A tibble: 63 × 17\n         ii       eii  var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.368    0.0123   0.147   -0.994  0.320     0.2          0.1      1.37\n 2  0.0191  -0.00310  0.0328   0.123  0.902     0.84         0.42    -2.49\n 3 -0.00364  0.0138   0.0340  -0.0947 0.925     0.66         0.33    -1.67\n 4 -0.0881  -0.0239   0.0272  -0.389  0.697     1            0.5      1.89\n 5 -0.00190  0.000393 0.00102 -0.0718 0.943     0.8          0.4     -1.71\n 6 -0.0589   0.00452  0.00296 -1.17   0.244     0.24         0.12    -1.72\n 7 -0.121   -0.0653   0.0767  -0.202  0.840     0.6          0.3     -1.90\n 8 -0.0305   0.0156   0.298   -0.0845 0.933     0.78         0.39     1.15\n 9 -0.0981   0.000465 0.0159  -0.782  0.434     0.36         0.18    -1.10\n10  0.150   -0.00247  0.267    0.296  0.767     0.46         0.23     2.28\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2021 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Others(*)`\n# A tibble: 63 × 17\n        ii      eii  var_ii   z_ii   p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.0358  0.00170 0.00426  0.522 0.601      0.68         0.34    0.514\n 2  0.657  -0.0486  0.143    1.86  0.0625     0.1          0.05    1.58 \n 3 -0.0498 -0.00108 0.00213 -1.06  0.291      0.34         0.17   -1.23 \n 4 -0.106   0.00238 0.0340  -0.589 0.556      0.5          0.25   -1.34 \n 5 -0.561  -0.0856  0.532   -0.652 0.515      0.66         0.33    0.988\n 6 -0.195   0.0263  0.0725  -0.822 0.411      0.42         0.21   -1.18 \n 7 -0.0665  0.0146  0.0142  -0.681 0.496      0.44         0.22   -1.85 \n 8 -0.0381  0.00667 0.0494  -0.201 0.840      0.7          0.35   -1.34 \n 9  0.0980 -0.0101  0.0297   0.628 0.530      0.7          0.35   -1.02 \n10  0.148  -0.00114 0.0515   0.658 0.510      0.78         0.39   -1.21 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2021 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Cultivation farm`\n# A tibble: 63 × 17\n       ii      eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n    &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.135   0.0126  0.0152 0.995 0.320     0.24         0.12   -1.05    0.634 \n 2 0.0988  0.0265  0.0708 0.272 0.786     0.96         0.48   -1.19    0.437 \n 3 0.147   0.0249  0.0323 0.681 0.496     0.68         0.34   -1.10    1.57  \n 4 0.213   0.0285  0.0479 0.844 0.399     0.38         0.19   -1.10    0.394 \n 5 0.120  -0.00425 0.0105 1.21  0.226     0.16         0.08   -0.675   0.223 \n 6 0.230  -0.0304  0.114  0.773 0.439     0.56         0.28   -1.33    1.35  \n 7 0.128  -0.00669 0.0234 0.877 0.381     0.32         0.16   -1.54    3.07  \n 8 0.220  -0.0176  0.0572 0.993 0.321     0.38         0.19   -0.843   0.0642\n 9 0.196  -0.0422  0.0619 0.957 0.339     0.4          0.2    -0.946   0.716 \n10 0.284   0.00362 0.0822 0.979 0.327     0.2          0.1    -1.23    0.940 \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2022 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Livestock farm`\n# A tibble: 63 × 17\n        ii      eii  var_ii   z_ii     p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  2.84   -0.334   2.42     2.04  0.0416       0.1          0.05    0.983\n 2  2.12   -0.0238  0.564    2.86  0.00428      0.04         0.02    1.35 \n 3 -1.02   -0.0274  0.0746  -3.64  0.000275     0.02         0.01   -1.16 \n 4 -0.281   0.0104  0.0767  -1.05  0.293        0.3          0.15   -1.38 \n 5  0.521  -0.00186 0.164    1.29  0.196        0.3          0.15    0.702\n 6  0.436   0.0636  0.437    0.563 0.573        0.52         0.26    1.05 \n 7  2.02   -0.00561 0.391    3.24  0.00118      0.02         0.01    0.689\n 8  0.561  -0.0693  0.0593   2.59  0.00962      0.08         0.04    1.05 \n 9  0.585   0.0260  0.0820   1.95  0.0509       0.1          0.05    1.02 \n10 -0.0445  0.00730 0.00633 -0.652 0.515        0.46         0.23   -1.23 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2022 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Fishing farm`\n# A tibble: 63 × 17\n          ii       eii     var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n       &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.455    -0.0550   0.167      -0.980  0.327     0.2          0.1      1.60\n 2  0.00330   0.0302   0.0138     -0.229  0.819     0.72         0.36    -1.82\n 3 -0.0430    0.0208   0.0316     -0.359  0.720     0.5          0.25    -1.70\n 4 -0.0892    0.0260   0.0379     -0.592  0.554     0.56         0.28     2.19\n 5 -0.000269  0.000295 0.00000507 -0.251  0.802     0.64         0.32    -1.33\n 6 -0.0857   -0.0115   0.00848    -0.806  0.420     0.4          0.2     -1.45\n 7 -0.147     0.0204   0.0271     -1.02   0.310     0.28         0.14    -1.58\n 8 -0.0286    0.00924  0.291      -0.0701 0.944     0.8          0.4      1.59\n 9 -0.120    -0.0151   0.0245     -0.670  0.503     0.36         0.18    -1.59\n10  0.169     0.00657  0.298       0.298  0.765     0.48         0.24     2.56\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2022 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Others(*)`\n# A tibble: 63 × 17\n         ii       eii   var_ii    z_ii   p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.122   -0.0198   0.0329    0.782  0.434      0.44         0.22    0.641\n 2  0.470    0.000319 0.0709    1.76   0.0778     0.14         0.07    1.44 \n 3 -0.0230   0.00223  0.000293 -1.48   0.140      0.24         0.12   -1.34 \n 4 -0.0252  -0.00212  0.00194  -0.523  0.601      0.48         0.24   -1.32 \n 5 -0.318   -0.0153   0.503    -0.427  0.669      0.86         0.43    0.836\n 6 -0.199   -0.0181   0.0817   -0.633  0.527      0.52         0.26   -1.14 \n 7 -0.0848  -0.00556  0.0244   -0.508  0.612      0.5          0.25   -1.70 \n 8 -0.00959 -0.0762   0.0937    0.217  0.828      0.92         0.46   -0.907\n 9 -0.00388  0.00776  0.0278   -0.0698 0.944      0.84         0.42   -0.853\n10  0.00321  0.0516   0.0493   -0.218  0.828      0.54         0.27   -1.83 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2022 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Cultivation farm`\n# A tibble: 63 × 17\n      ii       eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.156  0.0286   0.0169 0.981 0.326     0.34         0.17   -1.02    0.847 \n 2 0.147 -0.0168   0.0587 0.675 0.500     0.66         0.33   -1.19    1.24  \n 3 0.158 -0.00917  0.0580 0.693 0.488     0.68         0.34   -0.908   0.0227\n 4 0.212 -0.000368 0.0596 0.871 0.384     0.42         0.21   -1.06    0.524 \n 5 0.113  0.0103   0.0109 0.987 0.323     0.26         0.13   -1.25    1.46  \n 6 0.226  0.00153  0.123  0.640 0.522     0.8          0.4    -1.26    0.591 \n 7 0.138 -0.00651  0.0247 0.917 0.359     0.46         0.23   -1.06    0.723 \n 8 0.219  0.0161   0.0440 0.965 0.334     0.32         0.16   -0.793  -0.406 \n 9 0.205  0.00291  0.0379 1.04  0.300     0.4          0.2    -0.737   0.0588\n10 0.278 -0.0298   0.0912 1.02  0.308     0.08         0.04   -0.948  -0.0128\n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2023 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Livestock farm`\n# A tibble: 63 × 17\n        ii       eii var_ii   z_ii       p_ii p_ii_sim p_folded_sim skewness\n     &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  3.12   -0.285    1.77    2.56  0.0106         0.02         0.01    0.302\n 2  2.52   -0.135    0.500   3.76  0.000168       0.02         0.01    1.15 \n 3 -1.05    0.00811  0.0520 -4.63  0.00000361     0.02         0.01   -0.585\n 4 -0.296   0.0189   0.0624 -1.26  0.207          0.2          0.1    -1.19 \n 5  0.582   0.0454   0.243   1.09  0.276          0.28         0.14    0.883\n 6  0.533  -0.0903   0.418   0.964 0.335          0.28         0.14    1.38 \n 7  2.20    0.0400   0.387   3.47  0.000521       0.02         0.01    0.633\n 8  0.647   0.000137 0.104   2.01  0.0447         0.08         0.04    0.665\n 9  0.628  -0.000464 0.0623  2.52  0.0118         0.08         0.04    1.20 \n10 -0.0675  0.00139  0.0107 -0.666 0.505          0.48         0.24   -1.22 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;,\n#   `2023 Livestock farm` &lt;dbl&gt;, geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Fishing farm`\n# A tibble: 63 × 17\n          ii       eii     var_ii    z_ii  p_ii p_ii_sim p_folded_sim skewness\n       &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.431    -0.0264   0.151      -1.04   0.298     0.04         0.02     1.97\n 2  0.0305   -0.0139   0.0406      0.220  0.826     0.82         0.41    -1.90\n 3 -0.0347   -0.0178   0.0587     -0.0699 0.944     0.62         0.31    -1.82\n 4 -0.0864   -0.0242   0.0303     -0.357  0.721     0.94         0.47     1.90\n 5  0.000152 -0.000583 0.00000885  0.247  0.805     0.6          0.3      1.48\n 6 -0.0466   -0.00667  0.00576    -0.526  0.599     0.3          0.15    -2.41\n 7 -0.111     0.00238  0.0383     -0.578  0.563     0.4          0.2     -1.44\n 8 -0.0182   -0.0395   0.164       0.0526 0.958     0.66         0.33     1.84\n 9 -0.108     0.0110   0.0199     -0.840  0.401     0.28         0.14    -1.72\n10  0.163     0.0650   0.321       0.173  0.863     0.5          0.25     2.12\n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2023 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Others(*)`\n# A tibble: 63 × 17\n         ii      eii  var_ii   z_ii   p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.172    0.00521 0.0760   0.606 0.544      0.52         0.26    0.861\n 2  0.585    0.0162  0.0797   2.01  0.0440     0.14         0.07    1.35 \n 3 -0.0495   0.00204 0.00166 -1.27  0.206      0.22         0.11   -1.63 \n 4 -0.0383  -0.0243  0.0129  -0.123 0.902      0.74         0.37   -0.939\n 5 -0.333   -0.0669  0.512   -0.371 0.711      0.92         0.46    1.19 \n 6 -0.273   -0.00171 0.107   -0.831 0.406      0.4          0.2    -1.27 \n 7 -0.139    0.00560 0.0381  -0.741 0.459      0.32         0.16   -1.89 \n 8  0.00670 -0.00491 0.00692  0.140 0.889      1            0.5    -1.07 \n 9 -0.0215   0.0106  0.0328  -0.177 0.859      0.74         0.37   -1.21 \n10 -0.0325   0.00679 0.0885  -0.132 0.895      0.62         0.31   -1.78 \n# ℹ 53 more rows\n# ℹ 9 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2023 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n\n\nvietnam_farms_list_lisa[\"2012 Cultivation farm\"][[\"2012 Cultivation farm\"]]\n\n# A tibble: 63 × 17\n      ii       eii var_ii  z_ii  p_ii p_ii_sim p_folded_sim skewness kurtosis\n   &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1 0.240 -0.00366  0.0345 1.31  0.190     0.12         0.06   -0.953   0.603 \n 2 0.258  0.0229   0.0645 0.926 0.355     0.42         0.21   -1.14    1.14  \n 3 0.258 -0.0157   0.0732 1.01  0.312     0.34         0.17   -0.909  -0.0258\n 4 0.257 -0.0162   0.0597 1.12  0.264     0.1          0.05   -0.811  -0.205 \n 5 0.257  0.0474   0.0320 1.17  0.241     0.18         0.09   -0.985   0.735 \n 6 0.260  0.000680 0.0687 0.990 0.322     0.36         0.18   -0.897  -0.124 \n 7 0.252  0.00497  0.0477 1.13  0.257     0.14         0.07   -1.20    1.76  \n 8 0.255  0.0427   0.0447 1.01  0.315     0.16         0.08   -1.07    0.607 \n 9 0.247 -0.0102   0.0395 1.29  0.196     0.16         0.08   -0.933   1.07  \n10 0.259  0.0696   0.0651 0.742 0.458     0.46         0.23   -1.69    2.80  \n# ℹ 53 more rows\n# ℹ 8 more variables: mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;, nb &lt;nb&gt;,\n#   wt &lt;list&gt;, `Cities, provincies` &lt;chr&gt;, `2012 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n\n\n\n\nplot_list_of_lisa &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    \n    event_data_list[[col_name]] &lt;- tm_shape(st_as_sf(data[[col_name]])) +\n      tm_fill(\"ii\",\n              palette = c(\"#b7dce9\",\"#e1ecbb\",\"#f5f3a6\",\n                          \"#ec9a64\",\"#d21b1c\")) +\n      tm_layout(main.title = paste(\"Spatial Autocorrelation\\n of Vietnam\", col_name),\n                main.title.position = \"center\",\n                # main.title.size = 1.3,\n                # main.title.fontface = \"bold\",\n                legend.title.size = 1,\n                legend.text.size = 1,\n                frame = TRUE) +\n      tm_borders(col = \"black\", alpha = 0.6) +\n      tm_compass(type=\"8star\", text.size = 1.5, size = 3, position=c(\"RIGHT\", \"TOP\"))\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\nplot_list_of_lisa(\"vietnam_farms_list_lisa_plots\", vietnam_farms_list_lisa, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_list_lisa_plots$`2012 Cultivation farm`\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot_list_of_lisa_pii &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    \n    event_data_list[[col_name]] &lt;- tm_shape(st_as_sf(data[[col_name]])) +\n      tm_fill(\"p_ii\",\n              palette = c(\"#b7dce9\",\"#e1ecbb\",\"#f5f3a6\",\n                          \"#ec9a64\",\"#d21b1c\")) +\n      tm_layout(main.title = paste(\"Statistical Significance of Spatial Autocorrelation\\n of Vietnam\", col_name),\n                main.title.position = \"center\",\n                # main.title.size = 1.3,\n                # main.title.fontface = \"bold\",\n                legend.title.size = 1,\n                legend.text.size = 1,\n                frame = TRUE) +\n      tm_borders(col = \"black\", alpha = 0.6) +\n      tm_compass(type=\"8star\", text.size = 1.5, size = 3, position=c(\"RIGHT\", \"TOP\"))\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\nplot_list_of_lisa_pii(\"vietnam_farms_list_lisa_pii_plots\", vietnam_farms_list_lisa, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_list_lisa_pii_plots$`2012 Cultivation farm`\n\n\n\n\n\n\n\n\n\n\n\n\nplot_list_of_lisa_sig &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    \n    event_data_list[[col_name]] &lt;- tm_shape(st_as_sf(data[[col_name]])) +\n      tm_fill(\"p_ii\",\n              palette = c(\"#b7dce9\",\"#e1ecbb\",\"#f5f3a6\",\n                          \"#ec9a64\",\"#d21b1c\")) +\n      tm_layout(main.title = paste(\"Statistical Significance of Spatial Autocorrelation\\n of Vietnam\", col_name),\n                main.title.position = \"center\",\n                # main.title.size = 1.3,\n                # main.title.fontface = \"bold\",\n                legend.title.size = 1,\n                legend.text.size = 1,\n                frame = TRUE) +\n      tm_borders(col = \"black\", alpha = 0.6) +\n      tm_compass(type=\"8star\", text.size = 1.5, size = 3, position=c(\"RIGHT\", \"TOP\"))\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\n\n\n\n\n\nThe local indicator of spatial association (LISA) for each observation gives an indication of the extent of significant spatial clustering of similar values around that observation. In general, the analysis will calculate a local statistic value, a z-score, a pseudo p-value, and a code representing the cluster type for each statistically significant feature. LISA map is a categorical map showing type of outliers and clusters. There are two types of outliers namely: High-Low and Low-High outliers. Likewise, there are two type of clusters namely: High-High and Low-Low cluaters.\nSpecific to our study, we may infer LISA classifications as below.\n\nHigh-Low Outliers: Provinces with a high number of farms, surrounded by neighbouring provinces with low number of farms.\nLow-High Outliers: Provinces with a low number of farms, surrounded by neighbouring provinces with high number of farms.\nHigh-High Clusters: Provinces with a high number of farms, surrounded by neighbouring provinces with high number of farms.\nLow-Low Clusters: Provinces with a low number of farms, surrounded by neighbouring provinces with low number of farms.\n\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nplot_list_of_lisa_class &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    lisa &lt;- st_as_sf(data[[col_name]])\n    lisa_sig &lt;- lisa  %&gt;%\n      filter(p_ii_sim &lt; 0.05)\n    \n    event_data_list[[col_name]] &lt;- tm_shape(lisa) +\n      tm_polygons() +\n      tm_borders(col = \"black\", alpha = 0.6)+\n      tm_shape(lisa_sig)+\n        tm_fill(\"mean\", \n                palette = c(\"#b7dce9\",\"#ec9a64\",\"#e1ecbb\", \"#d21b1c\"),\n                title = \"LISA class\",\n                midpoint = NA,\n                legend.hist = TRUE, \n                legend.is.portrait = TRUE,\n                legend.hist.z = 0.1) +\n        tm_borders(col = \"black\", alpha = 0.6)+\n        tm_layout(main.title = paste(\"Province-Level LISA Map of\\n \", col_name),\n                  main.title.position = \"center\",\n                  main.title.size = 1.7,\n                  main.title.fontface = \"bold\",\n                  legend.outside = TRUE,\n                  legend.outside.position = \"right\",\n                  legend.title.size = 1.8,\n                  legend.text.size = 1.3,\n                  frame = TRUE) +\n        tm_borders(alpha = 0.5) +\n        tm_compass(type=\"8star\", text.size = 1.5, size = 2, position=c(\"RIGHT\", \"TOP\")) +\n        tm_scale_bar(position=c(\"LEFT\", \"BOTTOM\"), text.size=1.2) +\n        tm_grid(labels.size = 1,alpha =0.2)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\n\nplot_list_of_lisa_class(\"vietnam_farms_list_lisa_classs_plots\", vietnam_farms_list_lisa, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_list_lisa_classs_plots$`2012 Cultivation farm`\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n\n\n\n\n\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nA hotspot is a region or value that is higher relative to its surroundings\n\n# helper functions\ncompute_and_generate_wm &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    event_data_list[[col_name]] &lt;- data[[col_name]] %&gt;%\n      mutate(nb = include_self(st_contiguity(geometry)),\n             wt = st_inverse_distance(nb, geometry,\n                                       scale = 1,\n                                       alpha = 1),\n             .before = 1)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\ncompute_and_generate_wm(\"vietnam_farms_wm\", vietnam_farms_data, YEARS, VIETNAM_COL_NAMES)\n\nNext, we will calculate local Gi∗ using local_gstart_perm() function from sfdep package. This function uses a neighbour list nb and a weight list wt as an input and generate Gi∗ statistics through a Monte Carlo permutation with specified nsim. The results will then be stored into a new object called HCSA.\n\n# helper functions\ncompute_and_generate_HCSA &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    event_data_list[[col_name]] &lt;- data[[col_name]] %&gt;% \n      mutate(local_Gi_star = local_gstar_perm(data[[col_name]][[col_name]], \n                                              nb, \n                                              data[[col_name]]$wt, nsim = 99),\n             .before = 1) %&gt;%\n      unnest(local_Gi_star)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\ncompute_and_generate_HCSA(\"vietnam_farms_HCSA\", vietnam_farms_wm, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_HCSA\n\n$`2012 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.45  Low     0.00218   2.14e-6  -1.44    0.149  0.08         0.04    0.822\n 2  -0.987 Low     0.00143   1.89e-6  -1.00    0.315  0.32         0.16    0.688\n 3  -1.00  Low     0.00185   3.09e-6  -1.02    0.309  0.26         0.13    1.40 \n 4  -1.04  Low     0.000808  6.65e-7  -0.973   0.331  0.2          0.1     1.40 \n 5  -1.24  Low     0.00242   4.20e-6  -1.16    0.246  0.08         0.04    0.710\n 6  -0.851 Low     0.00105   1.44e-6  -0.855   0.392  0.3          0.15    1.46 \n 7  -1.14  Low     0.00192   2.75e-6  -1.12    0.263  0.16         0.08    1.08 \n 8  -1.15  Low     0.00188   2.55e-6  -1.15    0.248  0.1          0.05    1.33 \n 9  -1.22  Low     0.00197   2.25e-6  -1.27    0.205  0.16         0.08    0.578\n10  -0.878 Low     0.00150   1.85e-6  -1.08    0.281  0.22         0.11    0.988\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2012 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.40  High    0.00202   1.42e-6   1.68  9.38e-2  0.18         0.09     1.04\n 2   2.68  High    0.000975  6.75e-7   3.56  3.65e-4  0.04         0.02     1.87\n 3   3.18  Low     0.00162   2.22e-6   2.82  4.87e-3  0.06         0.03     1.36\n 4   1.24  Low     0.000691  2.51e-7   1.70  8.96e-2  0.16         0.08     1.05\n 5   1.15  High    0.00197   1.66e-6   1.52  1.27e-1  0.24         0.12     1.28\n 6   1.28  High    0.00109   1.14e-6   1.20  2.31e-1  0.14         0.07     3.15\n 7   2.41  High    0.00224   2.48e-6   2.18  2.95e-2  0.06         0.03     1.11\n 8   1.45  High    0.00151   1.48e-6   1.89  5.86e-2  0.12         0.06     2.15\n 9   1.72  High    0.00186   2.14e-6   1.82  6.89e-2  0.08         0.04     2.54\n10   0.250 Low     0.00107   1.24e-6   0.395 6.93e-1  0.54         0.27     2.27\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2012 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.488  High    0.00227   1.91e-5 -0.434    0.664  0.48         0.24     2.90\n 2 -0.0794 Low     0.00181   2.01e-5 -0.185    0.853  0.46         0.23     3.41\n 3 -0.153  Low     0.00190   2.66e-5 -0.172    0.863  0.6          0.3      4.75\n 4 -0.275  High    0.000769  3.51e-6 -0.273    0.785  0.74         0.37     3.29\n 5 -0.0416 Low     0.00214   1.93e-5 -0.0250   0.980  0.34         0.17     2.95\n 6  0.278  Low     0.00205   2.36e-5 -0.0245   0.980  0.28         0.14     2.65\n 7  0.117  Low     0.00250   2.92e-5  0.0214   0.983  0.24         0.12     3.04\n 8  0.0621 High    0.00204   2.30e-5  0.0181   0.986  0.2          0.1      2.98\n 9  0.296  Low     0.00217   2.03e-5  0.266    0.790  0.26         0.13     3.00\n10  0.290  High    0.00126   1.35e-5  0.266    0.790  0.14         0.07     4.00\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2012 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2012 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.466  High    0.00191   3.36e-6 -0.304   0.761   0.9          0.45     1.36\n 2  1.19   Low     0.00162   3.62e-6  0.748   0.455   0.38         0.19     1.54\n 3  1.69   Low     0.00175   4.81e-6  1.50    0.134   0.28         0.14     1.43\n 4  0.277  Low     0.000589  8.74e-7  0.479   0.632   0.36         0.18     3.19\n 5 -0.532  High    0.00251   6.26e-6 -0.600   0.548   0.76         0.38     1.35\n 6  0.921  Low     0.00113   2.60e-6  0.854   0.393   0.3          0.15     2.17\n 7  1.89   Low     0.00196   5.81e-6  1.84    0.0657  0.14         0.07     1.71\n 8  0.388  Low     0.00167   3.71e-6  0.523   0.601   0.4          0.2      2.19\n 9  0.363  High    0.00183   3.79e-6  0.540   0.589   0.48         0.24     2.08\n10  0.0714 Low     0.00126   3.20e-6  0.0497  0.960   0.5          0.25     1.80\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2012 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.45  Low     0.00236   2.28e-6  -1.48    0.138  0.16         0.08    0.276\n 2  -1.01  Low     0.00115   1.77e-6  -0.828   0.407  0.34         0.17    1.43 \n 3  -1.02  Low     0.00188   2.81e-6  -1.08    0.279  0.18         0.09    1.13 \n 4  -1.05  Low     0.000754  4.84e-7  -1.06    0.290  0.06         0.03    1.10 \n 5  -1.26  Low     0.00193   2.28e-6  -1.24    0.213  0.08         0.04    0.721\n 6  -0.874 Low     0.00119   1.55e-6  -0.943   0.346  0.2          0.1     1.34 \n 7  -1.17  Low     0.00189   3.27e-6  -1.02    0.309  0.16         0.08    1.14 \n 8  -1.17  Low     0.00204   2.25e-6  -1.33    0.183  0.08         0.04    0.673\n 9  -1.23  Low     0.00207   3.13e-6  -1.12    0.265  0.16         0.08    1.08 \n10  -0.904 Low     0.00139   1.85e-6  -1.01    0.310  0.16         0.08    1.16 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2013 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.72  High    0.00226   1.66e-6   1.64  0.102    0.2          0.1      1.38\n 2   2.38  High    0.00117   9.25e-7   2.47  0.0137   0.08         0.04     2.09\n 3   3.10  Low     0.00167   2.02e-6   2.77  0.00563  0.06         0.03     2.29\n 4   1.44  Low     0.000733  3.08e-7   1.64  0.101    0.12         0.06     1.24\n 5   1.39  High    0.00211   2.26e-6   1.41  0.160    0.22         0.11     1.34\n 6   1.24  High    0.000899  7.83e-7   1.58  0.114    0.16         0.08     1.59\n 7   2.65  High    0.00196   2.65e-6   2.43  0.0150   0.08         0.04     1.51\n 8   1.96  High    0.00177   1.37e-6   2.27  0.0235   0.08         0.04     1.42\n 9   1.70  High    0.00205   2.41e-6   1.54  0.124    0.16         0.08     1.19\n10   0.590 Low     0.00128   1.20e-6   0.552 0.581    0.46         0.23     1.26\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2013 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Fishing farm`\n# A tibble: 63 × 15\n    gi_star cluster     e_gi  var_gi std_dev p_value p_sim p_folded_sim skewness\n      &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.490   High    0.00204  1.73e-5 -0.399    0.690  0.56         0.28     3.23\n 2 -0.0952  Low     0.000649 2.26e-6  0.189    0.850  0.34         0.17     7.89\n 3 -0.145   Low     0.00185  1.82e-5 -0.186    0.853  0.5          0.25     2.83\n 4 -0.239   High    0.000761 3.78e-6 -0.223    0.824  0.62         0.31     3.56\n 5 -0.00291 Low     0.00258  3.14e-5 -0.0658   0.948  0.32         0.16     3.22\n 6  0.312   High    0.00102  1.50e-5  0.258    0.796  0.16         0.08     6.79\n 7  0.115   Low     0.00199  1.89e-5  0.141    0.888  0.18         0.09     3.54\n 8  0.0953  High    0.00233  2.26e-5 -0.0140   0.989  0.26         0.13     2.40\n 9  0.299   Low     0.00253  2.16e-5  0.181    0.856  0.3          0.15     2.43\n10  0.284   High    0.00104  9.80e-6  0.370    0.711  0.12         0.06     4.65\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2013 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2013 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.136  High    0.00210   2.82e-6 -0.0461  0.963   0.82         0.41    1.39 \n 2  2.22   High    0.00120   1.60e-6  2.32    0.0205  0.12         0.06    1.39 \n 3  1.62   Low     0.00170   3.06e-6  1.56    0.120   0.22         0.11    1.42 \n 4  0.190  Low     0.000710  5.30e-7  0.300   0.764   0.5          0.25    1.33 \n 5 -0.0499 High    0.00264   5.53e-6 -0.217   0.828   0.82         0.41    1.08 \n 6  1.13   High    0.000992  1.98e-6  1.13    0.259   0.22         0.11    2.20 \n 7  2.03   Low     0.00220   5.23e-6  1.67    0.0940  0.22         0.11    1.46 \n 8  0.140  High    0.00217   3.91e-6 -0.0228  0.982   0.72         0.36    0.851\n 9  1.19   High    0.00198   4.62e-6  1.07    0.283   0.3          0.15    2.21 \n10  0.579  Low     0.00105   2.06e-6  0.722   0.471   0.26         0.13    3.23 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2013 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.54  Low     0.00232   2.15e-6  -1.48    0.140  0.1          0.05    0.585\n 2  -1.04  Low     0.00132   1.18e-6  -1.12    0.262  0.32         0.16    0.606\n 3  -1.06  Low     0.00159   2.31e-6  -0.953   0.341  0.4          0.2     0.991\n 4  -1.09  Low     0.000785  5.48e-7  -0.989   0.323  0.26         0.13    1.19 \n 5  -1.33  Low     0.00238   3.53e-6  -1.21    0.228  0.16         0.08    0.826\n 6  -0.938 Low     0.000858  9.85e-7  -0.834   0.404  0.46         0.23    1.19 \n 7  -1.28  Low     0.00206   2.36e-6  -1.30    0.192  0.1          0.05    0.749\n 8  -1.28  Low     0.00188   2.56e-6  -1.16    0.248  0.12         0.06    1.03 \n 9  -1.32  Low     0.00260   2.88e-6  -1.46    0.143  0.08         0.04    0.594\n10  -0.985 Low     0.00115   1.58e-6  -0.907   0.364  0.2          0.1     1.11 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2014 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.23  High    0.00212   1.84e-6   1.28  0.202    0.24         0.12     1.12\n 2   2.25  High    0.00140   1.22e-6   1.93  0.0532   0.2          0.1      1.09\n 3   2.80  Low     0.00176   1.97e-6   2.61  0.00901  0.06         0.03     1.57\n 4   1.02  Low     0.000729  3.46e-7   1.18  0.238    0.24         0.12     1.88\n 5   1.25  High    0.00238   2.99e-6   1.01  0.311    0.34         0.17     1.33\n 6   1.09  High    0.00110   1.57e-6   0.892 0.372    0.32         0.16     2.14\n 7   2.38  High    0.00214   2.67e-6   2.20  0.0281   0.1          0.05     1.26\n 8   1.43  High    0.00169   1.90e-6   1.56  0.118    0.22         0.11     1.55\n 9   1.78  High    0.00242   3.35e-6   1.23  0.220    0.26         0.13     1.71\n10   0.697 Low     0.00136   1.88e-6   0.496 0.620    0.38         0.19     1.93\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2014 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.481  High    0.00199   1.29e-5 -0.445    0.657  0.46         0.23     2.51\n 2 -0.175  Low     0.00110   9.34e-6 -0.134    0.894  0.44         0.22     3.96\n 3 -0.195  Low     0.00113   1.04e-5 -0.0880   0.930  0.56         0.28     5.25\n 4 -0.223  High    0.000820  4.91e-6 -0.210    0.834  0.74         0.37     4.46\n 5 -0.0795 Low     0.00222   2.13e-5 -0.0768   0.939  0.34         0.17     3.15\n 6  0.171  High    0.000844  5.65e-6  0.316    0.752  0.14         0.07     4.89\n 7 -0.0575 Low     0.00205   2.14e-5 -0.0501   0.960  0.28         0.14     3.02\n 8  0.116  High    0.00174   1.80e-5  0.143    0.886  0.16         0.08     3.60\n 9  0.144  Low     0.00219   1.62e-5  0.130    0.896  0.24         0.12     2.84\n10  0.0702 High    0.00142   1.54e-5  0.0118   0.991  0.22         0.11     3.84\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2014 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2014 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi  var_gi  std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -0.256 High    0.00182  1.83e-6 -0.0146   0.988   0.74         0.37     1.59\n 2   2.45  High    0.00127  1.76e-6  2.51     0.0120  0.1          0.05     1.70\n 3   2.12  Low     0.00165  2.36e-6  2.49     0.0128  0.12         0.06     1.54\n 4   0.125 High    0.000740 9.63e-7  0.144    0.885   0.42         0.21     2.56\n 5  -0.112 High    0.00217  4.04e-6 -0.0890   0.929   0.72         0.36     1.55\n 6   1.40  Low     0.00121  2.36e-6  1.19     0.232   0.28         0.14     1.88\n 7   2.21  Low     0.00210  5.68e-6  1.90     0.0577  0.14         0.07     2.09\n 8  -0.102 High    0.00167  3.83e-6  0.00782  0.994   0.56         0.28     2.30\n 9   1.48  Low     0.00198  5.09e-6  1.32     0.186   0.18         0.09     3.49\n10   0.584 Low     0.00134  2.70e-6  0.491    0.624   0.42         0.21     1.79\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2014 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.51  Low     0.00233   1.61e-6  -1.69   0.0919  0.08         0.04    0.302\n 2  -1.04  Low     0.00122   1.42e-6  -0.936  0.349   0.36         0.18    1.20 \n 3  -1.03  Low     0.00157   2.19e-6  -0.943  0.346   0.46         0.23    0.771\n 4  -1.07  Low     0.000882  5.89e-7  -1.07   0.284   0.34         0.17    0.636\n 5  -1.31  Low     0.00225   3.22e-6  -1.18   0.236   0.22         0.11    0.711\n 6  -0.939 Low     0.00107   1.12e-6  -0.987  0.324   0.24         0.12    0.782\n 7  -1.26  Low     0.00210   2.46e-6  -1.30   0.193   0.12         0.06    0.559\n 8  -1.27  Low     0.00203   1.92e-6  -1.43   0.152   0.08         0.04    0.346\n 9  -1.29  Low     0.00186   2.27e-6  -1.14   0.255   0.2          0.1     1.12 \n10  -0.984 Low     0.00115   1.13e-6  -1.08   0.280   0.04         0.02    0.994\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2015 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.22  High    0.00200   1.47e-6   1.57  1.16e-1  0.22         0.11     1.46\n 2   2.38  High    0.000969  7.98e-7   3.15  1.64e-3  0.08         0.04     1.88\n 3   2.77  Low     0.00155   1.34e-6   3.44  5.76e-4  0.06         0.03     1.61\n 4   0.749 Low     0.000681  3.61e-7   0.984 3.25e-1  0.24         0.12     2.45\n 5   1.00  High    0.00206   2.13e-6   1.21  2.28e-1  0.28         0.14     1.34\n 6   0.951 High    0.00105   1.49e-6   0.865 3.87e-1  0.22         0.11     2.30\n 7   2.77  High    0.00197   2.32e-6   2.97  2.94e-3  0.06         0.03     1.37\n 8   1.40  High    0.00183   1.92e-6   1.49  1.37e-1  0.2          0.1      1.69\n 9   1.80  High    0.00193   1.97e-6   2.06  3.97e-2  0.12         0.06     1.28\n10   0.888 Low     0.00114   1.13e-6   1.10  2.70e-1  0.2          0.1      2.34\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2015 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.507  High    0.00198   9.85e-6 -0.486    0.627  0.5          0.25     2.59\n 2 -0.165  Low     0.00117   8.61e-6 -0.141    0.888  0.52         0.26     3.60\n 3 -0.183  Low     0.00201   2.39e-5 -0.215    0.830  0.6          0.3      3.56\n 4 -0.209  High    0.000608  1.98e-6 -0.140    0.889  0.8          0.4      4.36\n 5 -0.0262 Low     0.00347   3.16e-5 -0.242    0.809  0.52         0.26     2.01\n 6  0.248  High    0.00155   1.58e-5  0.0575   0.954  0.22         0.11     3.30\n 7 -0.0176 Low     0.00188   1.28e-5  0.0371   0.970  0.28         0.14     3.26\n 8  0.207  High    0.00177   1.37e-5  0.241    0.810  0.18         0.09     3.48\n 9  0.228  Low     0.00213   1.42e-5  0.231    0.817  0.3          0.15     3.00\n10  0.122  High    0.00139   1.39e-5  0.0602   0.952  0.18         0.09     4.08\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2015 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2015 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -0.433 High    0.00197   3.27e-6  -0.242  0.809   0.94         0.47     2.25\n 2   2.27  Low     0.00128   1.74e-6   2.21   0.0270  0.1          0.05     2.30\n 3   1.79  Low     0.00182   3.08e-6   1.66   0.0977  0.18         0.09     1.37\n 4  -0.125 High    0.000765  5.24e-7  -0.128  0.898   0.82         0.41     1.41\n 5  -0.636 High    0.00180   3.27e-6  -0.451  0.652   0.8          0.4      3.11\n 6   0.733 Low     0.00100   1.90e-6   0.758  0.449   0.22         0.11     2.76\n 7   1.66  Low     0.00210   4.46e-6   1.53   0.126   0.26         0.13     1.68\n 8  -0.158 Low     0.00184   2.83e-6  -0.148  0.883   0.86         0.43     1.24\n 9   0.887 Low     0.00214   3.79e-6   0.822  0.411   0.3          0.15     1.79\n10  -0.146 Low     0.00117   1.93e-6  -0.123  0.902   0.7          0.35     1.96\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2015 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.38  Low     0.00226   2.80e-6  -1.21    0.228  0.16         0.08    0.725\n 2  -0.864 Low     0.00148   1.79e-6  -0.937   0.349  0.46         0.23    1.05 \n 3  -0.970 Low     0.00189   2.68e-6  -1.06    0.291  0.38         0.19    0.526\n 4  -0.984 Low     0.000889  5.56e-7  -1.09    0.274  0.22         0.11    0.995\n 5  -1.20  Low     0.00228   2.60e-6  -1.31    0.189  0.1          0.05    0.831\n 6  -0.860 Low     0.00138   1.88e-6  -0.978   0.328  0.2          0.1     1.19 \n 7  -1.15  Low     0.00225   3.17e-6  -1.20    0.229  0.14         0.07    0.834\n 8  -1.19  Low     0.00189   1.67e-6  -1.43    0.152  0.02         0.01    0.394\n 9  -1.18  Low     0.00228   2.46e-6  -1.33    0.183  0.14         0.07    0.709\n10  -0.897 Low     0.00123   1.63e-6  -0.937   0.349  0.3          0.15    1.05 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2016 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.03  High    0.00190   1.64e-6   1.38  1.67e-1  0.18         0.09     1.79\n 2   2.81  High    0.00152   1.97e-6   1.96  4.97e-2  0.16         0.08     1.76\n 3   3.05  Low     0.00162   2.07e-6   3.03  2.41e-3  0.06         0.03     1.75\n 4   1.16  Low     0.000839  5.18e-7   0.994 3.20e-1  0.34         0.17     1.29\n 5   0.800 High    0.00213   2.32e-6   0.907 3.65e-1  0.36         0.18     1.23\n 6   1.25  High    0.000861  7.15e-7   1.89  5.93e-2  0.12         0.06     2.13\n 7   3.18  High    0.00162   1.65e-6   4.35  1.37e-5  0.02         0.01     1.78\n 8   1.49  High    0.00193   2.68e-6   1.30  1.95e-1  0.2          0.1      2.05\n 9   1.56  High    0.00196   1.71e-6   1.93  5.38e-2  0.14         0.07     1.23\n10   0.773 Low     0.00137   2.03e-6   0.572 5.67e-1  0.28         0.14     2.28\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2016 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -0.617 High    0.00220   2.17e-6  -0.564 0.573    0.72         0.36    0.996\n 2   0.840 Low     0.00140   1.42e-6   0.640 0.522    0.46         0.23    0.888\n 3   0.973 Low     0.00152   2.10e-6   1.07  0.286    0.4          0.2     1.20 \n 4  -0.852 High    0.000721  4.21e-7  -0.831 0.406    0.38         0.19    1.31 \n 5   0.951 Low     0.00228   3.13e-6   0.865 0.387    0.34         0.17    1.12 \n 6   2.15  Low     0.00126   2.06e-6   1.59  0.111    0.16         0.08    1.84 \n 7   1.68  High    0.00186   2.80e-6   1.82  0.0694   0.16         0.08    1.31 \n 8   1.35  High    0.00165   2.01e-6   1.60  0.110    0.18         0.09    1.40 \n 9   3.31  Low     0.00225   3.82e-6   2.59  0.00949  0.06         0.03    1.29 \n10   2.03  High    0.00135   2.26e-6   1.66  0.0972   0.24         0.12    1.36 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2016 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2016 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.111  High    0.00236   1.18e-5  -0.115   0.908  0.48         0.24     3.10\n 2  0.596  High    0.000979  3.22e-6   0.802   0.423  0.14         0.07     3.74\n 3  0.0582 Low     0.00143   5.22e-6   0.153   0.878  0.44         0.22     3.99\n 4 -0.300  Low     0.000835  1.66e-6  -0.336   0.737  1            0.5      3.00\n 5 -0.511  High    0.00193   6.21e-6  -0.493   0.622  0.6          0.3      3.07\n 6 -0.0765 Low     0.00143   7.79e-6  -0.187   0.852  0.66         0.33     3.05\n 7  0.0185 Low     0.00150   5.05e-6   0.282   0.778  0.34         0.17     3.50\n 8 -0.268  Low     0.00154   4.14e-6  -0.193   0.847  0.86         0.43     3.09\n 9 -0.242  High    0.00230   8.26e-6  -0.306   0.759  1            0.5      2.36\n10 -0.240  Low     0.00140   7.24e-6  -0.272   0.786  0.86         0.43     3.23\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2016 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.35  Low     0.00234   2.92e-6  -1.19    0.235  0.22         0.11    0.790\n 2  -0.854 Low     0.00129   1.58e-6  -0.823   0.410  0.44         0.22    1.75 \n 3  -0.950 Low     0.00169   2.70e-6  -0.901   0.368  0.4          0.2     1.22 \n 4  -1.02  Low     0.000842  6.16e-7  -0.997   0.319  0.28         0.14    1.24 \n 5  -1.23  Low     0.00244   3.43e-6  -1.23    0.218  0.1          0.05    0.796\n 6  -0.883 Low     0.000980  1.29e-6  -0.833   0.405  0.2          0.1     1.34 \n 7  -1.16  Low     0.00185   2.08e-6  -1.20    0.232  0.14         0.07    1.03 \n 8  -1.21  Low     0.00209   2.64e-6  -1.26    0.207  0.06         0.03    0.945\n 9  -1.15  Low     0.00218   2.53e-6  -1.20    0.229  0.24         0.12    0.746\n10  -0.916 Low     0.00106   1.54e-6  -0.835   0.403  0.16         0.08    1.30 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2017 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.40  High    0.00185   9.67e-7   2.34  0.0195   0.1          0.05     1.07\n 2   2.72  High    0.00119   1.17e-6   2.72  0.00661  0.06         0.03     1.53\n 3   3.32  Low     0.00149   2.42e-6   3.08  0.00205  0.08         0.04     2.73\n 4   0.845 Low     0.000827  6.79e-7   0.613 0.540    0.32         0.16     1.82\n 5   0.904 High    0.00214   2.93e-6   0.882 0.378    0.34         0.17     1.43\n 6   1.20  High    0.00110   1.37e-6   1.09  0.276    0.22         0.11     1.85\n 7   3.08  High    0.00215   2.83e-6   2.86  0.00421  0.04         0.02     1.25\n 8   1.48  High    0.00180   2.79e-6   1.32  0.188    0.28         0.14     1.93\n 9   1.97  High    0.00234   3.46e-6   1.46  0.144    0.2          0.1      1.56\n10   0.784 Low     0.00160   3.19e-6   0.326 0.744    0.36         0.18     1.95\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2017 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.19  High    0.00207   2.29e-6  -1.02   0.308   0.24         0.12    0.762\n 2   0.505 Low     0.00133   1.49e-6   0.380  0.704   0.66         0.33    1.25 \n 3   0.170 Low     0.00143   2.16e-6   0.312  0.755   0.6          0.3     1.72 \n 4  -0.481 High    0.000719  5.00e-7  -0.401  0.689   0.9          0.45    0.970\n 5   0.711 Low     0.00232   3.15e-6   0.625  0.532   0.5          0.25    1.10 \n 6   1.94  High    0.00114   1.79e-6   1.64   0.101   0.18         0.09    1.58 \n 7   1.22  Low     0.00217   3.42e-6   1.07   0.286   0.26         0.13    1.82 \n 8   0.999 High    0.00167   2.07e-6   1.20   0.230   0.24         0.12    1.41 \n 9   2.13  Low     0.00203   2.09e-6   2.41   0.0160  0.08         0.04    0.771\n10   1.66  High    0.00120   1.44e-6   1.82   0.0681  0.14         0.07    1.05 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2017 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2017 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.382  High    0.00235   6.77e-6  -0.404   0.686  0.96         0.48     1.78\n 2  0.752  High    0.00135   4.83e-6   0.612   0.540  0.2          0.1      2.78\n 3  0.557  Low     0.00176   8.92e-6   0.437   0.662  0.26         0.13     2.64\n 4 -0.167  High    0.000921  2.78e-6  -0.209   0.834  0.62         0.31     3.06\n 5 -0.562  High    0.00190   7.50e-6  -0.479   0.632  0.6          0.3      2.78\n 6  0.181  Low     0.000988  2.05e-6   0.305   0.761  0.5          0.25     3.74\n 7  0.490  Low     0.00165   2.44e-6   1.19    0.233  0.2          0.1      2.29\n 8 -0.236  Low     0.00192   8.20e-6  -0.231   0.818  0.72         0.36     2.56\n 9  0.0412 Low     0.00185   5.81e-6   0.152   0.879  0.44         0.22     3.26\n10 -0.107  Low     0.00147   6.53e-6  -0.191   0.849  0.68         0.34     2.77\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2017 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.33  Low     0.00244   3.04e-6  -1.20    0.230  0.16         0.08    0.888\n 2  -0.814 Low     0.00135   1.41e-6  -0.885   0.376  0.54         0.27    0.982\n 3  -0.940 Low     0.00161   2.10e-6  -0.951   0.342  0.42         0.21    1.02 \n 4  -1.00  Low     0.000691  4.01e-7  -0.972   0.331  0.38         0.19    1.20 \n 5  -1.22  Low     0.00222   2.72e-6  -1.24    0.216  0.14         0.07    0.753\n 6  -0.892 Low     0.00129   1.74e-6  -0.957   0.339  0.22         0.11    0.937\n 7  -1.17  Low     0.00209   3.34e-6  -1.08    0.281  0.18         0.09    0.919\n 8  -1.21  Low     0.00193   2.90e-6  -1.11    0.268  0.08         0.04    1.20 \n 9  -1.16  Low     0.00211   2.77e-6  -1.10    0.270  0.22         0.11    1.11 \n10  -0.925 Low     0.00121   2.01e-6  -0.837   0.403  0.24         0.12    1.37 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2018 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.30  High    0.00196   1.04e-6   1.93  5.39e-2  0.12         0.06     1.27\n 2   3.08  High    0.00123   1.04e-6   3.05  2.27e-3  0.04         0.02     1.57\n 3   3.30  Low     0.00157   1.79e-6   3.33  8.62e-4  0.04         0.02     1.45\n 4   0.850 Low     0.000777  4.04e-7   0.835 4.04e-1  0.3          0.15     1.49\n 5   0.998 High    0.00212   2.66e-6   0.980 3.27e-1  0.32         0.16     1.41\n 6   0.983 High    0.000948  8.00e-7   1.27  2.04e-1  0.18         0.09     2.15\n 7   2.91  High    0.00234   3.16e-6   2.32  2.05e-2  0.08         0.04     1.40\n 8   1.24  High    0.00190   2.48e-6   1.05  2.92e-1  0.36         0.18     1.50\n 9   2.03  High    0.00186   1.70e-6   2.39  1.66e-2  0.14         0.07     1.31\n10   0.593 Low     0.00125   1.38e-6   0.561 5.75e-1  0.32         0.16     1.96\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2018 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.05  High    0.00217   1.80e-6  -1.07  0.286    0.3          0.15    0.635\n 2   0.876 Low     0.00121   1.55e-6   0.810 0.418    0.36         0.18    1.52 \n 3   0.288 Low     0.00174   2.05e-6   0.223 0.824    0.8          0.4     0.809\n 4  -0.414 High    0.000768  6.99e-7  -0.342 0.732    0.84         0.42    1.80 \n 5   0.951 Low     0.00237   5.38e-6   0.633 0.526    0.42         0.21    1.51 \n 6   2.28  High    0.000867  1.27e-6   2.54  0.0110   0.08         0.04    1.94 \n 7   1.50  Low     0.00204   3.84e-6   1.33  0.184    0.24         0.12    1.69 \n 8   1.27  High    0.00151   1.99e-6   1.64  0.102    0.12         0.06    1.20 \n 9   2.57  Low     0.00171   2.26e-6   3.00  0.00268  0.08         0.04    1.43 \n10   1.99  High    0.00113   1.43e-6   2.26  0.0239   0.1          0.05    1.59 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2018 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2018 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.458  High    0.00202   5.96e-6  -0.352   0.725  0.94         0.47     2.03\n 2  1.13   Low     0.00122   4.27e-6   1.04    0.300  0.18         0.09     3.17\n 3  0.772  Low     0.00166   5.50e-6   0.806   0.420  0.28         0.14     2.41\n 4 -0.229  High    0.000622  1.04e-6  -0.113   0.910  0.64         0.32     3.42\n 5 -0.579  High    0.00186   5.82e-6  -0.524   0.600  0.8          0.4      2.57\n 6  0.242  Low     0.00111   4.21e-6   0.206   0.836  0.36         0.18     3.00\n 7  0.702  Low     0.00191   7.85e-6   0.766   0.444  0.14         0.07     4.86\n 8 -0.204  Low     0.00189   8.35e-6  -0.184   0.854  0.68         0.34     2.57\n 9  0.196  High    0.00208   8.22e-6   0.190   0.849  0.54         0.27     2.09\n10 -0.0951 Low     0.00174   7.13e-6  -0.273   0.785  0.76         0.38     2.26\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2018 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.34  Low     0.00200   1.99e-6  -1.15    0.248  0.22         0.11    0.783\n 2  -0.533 Low     0.00117   1.11e-6  -0.520   0.603  0.8          0.4     0.861\n 3  -0.787 Low     0.00177   2.34e-6  -0.849   0.396  0.56         0.28    0.898\n 4  -1.01  Low     0.000797  6.44e-7  -0.897   0.370  0.38         0.19    1.33 \n 5  -1.23  Low     0.00208   2.84e-6  -1.12    0.263  0.12         0.06    1.69 \n 6  -0.885 Low     0.00104   1.46e-6  -0.824   0.410  0.26         0.13    1.32 \n 7  -1.00  Low     0.00218   3.65e-6  -0.921   0.357  0.36         0.18    1.25 \n 8  -1.23  Low     0.00196   2.81e-6  -1.15    0.249  0.06         0.03    0.837\n 9  -1.04  Low     0.00226   2.74e-6  -1.07    0.285  0.32         0.16    0.766\n10  -0.917 Low     0.00119   1.38e-6  -0.971   0.331  0.32         0.16    1.44 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2019 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.38  High    0.00195   1.28e-6   1.83  6.69e-2  0.18         0.09     1.45\n 2   3.02  High    0.00130   1.08e-6   2.86  4.19e-3  0.04         0.02     1.89\n 3   3.17  Low     0.00157   1.27e-6   3.80  1.43e-4  0.04         0.02     1.85\n 4   0.783 Low     0.000782  4.29e-7   0.738 4.61e-1  0.4          0.2      1.57\n 5   0.974 High    0.00198   1.82e-6   1.26  2.06e-1  0.26         0.13     1.41\n 6   0.956 High    0.00111   1.33e-6   0.815 4.15e-1  0.24         0.12     2.01\n 7   2.84  High    0.00222   2.50e-6   2.61  8.97e-3  0.08         0.04     2.01\n 8   1.18  High    0.00173   1.33e-6   1.51  1.31e-1  0.2          0.1      1.42\n 9   2.01  High    0.00208   1.92e-6   2.07  3.82e-2  0.14         0.07     1.26\n10   0.607 Low     0.00137   1.60e-6   0.438 6.61e-1  0.4          0.2      2.31\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2019 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.07  High    0.00204   2.21e-6  -0.891  0.373   0.28         0.14     1.17\n 2   0.979 Low     0.00133   1.46e-6   0.835  0.404   0.36         0.18     1.33\n 3   0.345 Low     0.00165   2.55e-6   0.309  0.758   0.58         0.29     1.09\n 4  -0.414 High    0.000577  3.55e-7  -0.159  0.874   0.8          0.4      1.91\n 5   0.975 Low     0.00213   2.79e-6   1.04   0.298   0.34         0.17     1.05\n 6   2.32  High    0.00112   1.42e-6   2.23   0.0259  0.12         0.06     1.28\n 7   1.57  Low     0.00184   2.28e-6   1.92   0.0552  0.14         0.07     1.07\n 8   1.07  High    0.00173   2.20e-6   1.20   0.232   0.3          0.15     1.40\n 9   2.49  Low     0.00198   2.91e-6   2.41   0.0161  0.1          0.05     1.44\n10   2.00  High    0.00134   1.89e-6   1.82   0.0681  0.16         0.08     1.30\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2019 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2019 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -0.454 High    0.00194   3.91e-6 -0.378    0.705  0.98         0.49     1.97\n 2   1.13  Low     0.00134   4.71e-6  0.903    0.366  0.2          0.1      2.49\n 3   0.685 Low     0.00182   7.27e-6  0.545    0.586  0.3          0.15     2.48\n 4  -0.236 High    0.000959  1.74e-6 -0.343    0.731  0.84         0.42     1.93\n 5  -0.565 High    0.00175   5.12e-6 -0.471    0.638  0.9          0.45     2.82\n 6   0.235 Low     0.00131   5.81e-6  0.0795   0.937  0.38         0.19     2.91\n 7   0.619 Low     0.00197   6.81e-6  0.693    0.488  0.28         0.14     2.29\n 8  -0.219 Low     0.00140   2.73e-6 -0.0392   0.969  0.7          0.35     2.39\n 9   0.119 High    0.00227   1.01e-5  0.0446   0.964  0.52         0.26     2.35\n10  -0.120 Low     0.00165   7.17e-6 -0.253    0.800  0.66         0.33     2.60\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2019 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.09  Low     0.00211   2.02e-6  -1.00    0.316  0.32         0.16    0.900\n 2  -0.547 Low     0.00140   1.70e-6  -0.616   0.538  0.72         0.36    1.04 \n 3  -0.644 Low     0.00177   2.12e-6  -0.759   0.448  0.64         0.32    0.733\n 4  -0.837 Low     0.000757  4.24e-7  -0.876   0.381  0.46         0.23    1.14 \n 5  -1.05  Low     0.00200   2.45e-6  -0.983   0.326  0.34         0.17    0.997\n 6  -0.778 Low     0.00111   1.44e-6  -0.794   0.427  0.54         0.27    1.44 \n 7  -1.02  Low     0.00177   2.26e-6  -0.942   0.346  0.26         0.13    1.71 \n 8  -1.07  Low     0.00181   2.68e-6  -0.955   0.339  0.22         0.11    1.64 \n 9  -0.971 Low     0.00202   2.63e-6  -0.902   0.367  0.36         0.18    1.25 \n10  -0.895 Low     0.00116   1.48e-6  -0.906   0.365  0.06         0.03    1.46 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2020 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.92  High    0.00189   8.79e-7   2.77  5.57e-3  0.06         0.03    1.04 \n 2   3.45  High    0.00109   6.14e-7   4.23  2.34e-5  0.02         0.01    1.27 \n 3   3.47  Low     0.00180   1.77e-6   3.04  2.33e-3  0.04         0.02    1.28 \n 4   0.801 Low     0.000720  3.55e-7   0.860 3.90e-1  0.34         0.17    1.47 \n 5   1.09  High    0.00207   1.70e-6   1.26  2.08e-1  0.36         0.18    0.846\n 6   0.877 High    0.00102   7.53e-7   1.00  3.17e-1  0.32         0.16    1.58 \n 7   3.01  High    0.00204   1.86e-6   3.06  2.23e-3  0.02         0.01    1.09 \n 8   1.63  High    0.00156   9.79e-7   2.36  1.82e-2  0.08         0.04    0.845\n 9   2.30  High    0.00180   1.48e-6   2.69  7.07e-3  0.08         0.04    1.35 \n10   0.729 Low     0.00124   1.74e-6   0.567 5.71e-1  0.38         0.19    1.82 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2020 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -1.25   High    0.00221   2.94e-6 -1.11     0.269  0.1          0.05     1.39\n 2  0.134  Low     0.00119   1.44e-6  0.164    0.870  0.7          0.35     1.68\n 3 -0.0172 Low     0.00170   2.64e-6 -0.0602   0.952  0.9          0.45     1.26\n 4 -0.542  High    0.000712  3.99e-7 -0.554    0.580  0.74         0.37     1.51\n 5 -0.186  Low     0.00245   4.96e-6 -0.254    0.800  0.96         0.48     1.57\n 6  0.868  Low     0.00102   1.49e-6  0.933    0.351  0.32         0.16     2.22\n 7  0.479  Low     0.00235   3.40e-6  0.327    0.744  0.66         0.33     1.18\n 8  0.208  High    0.00183   3.58e-6  0.207    0.836  0.56         0.28     1.56\n 9  0.747  Low     0.00215   3.85e-6  0.632    0.528  0.42         0.21     1.90\n10  0.558  High    0.00140   2.66e-6  0.375    0.708  0.5          0.25     1.71\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2020 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2020 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   0.693 Low     0.00221   2.14e-6   0.693  0.488   0.44         0.22    0.863\n 2   1.66  High    0.00128   1.28e-6   1.58   0.115   0.16         0.08    1.18 \n 3   1.71  Low     0.00152   2.47e-6   1.66   0.0963  0.18         0.09    1.44 \n 4   0.944 Low     0.000723  3.78e-7   1.14   0.253   0.36         0.18    0.881\n 5  -0.450 High    0.00203   2.06e-6  -0.386  0.700   0.98         0.49    0.910\n 6   1.39  Low     0.00130   1.95e-6   0.964  0.335   0.3          0.15    1.81 \n 7   1.11  Low     0.00226   3.21e-6   0.928  0.353   0.26         0.13    1.61 \n 8   0.501 Low     0.00194   2.39e-6   0.440  0.660   0.58         0.29    1.18 \n 9  -0.630 High    0.00239   3.10e-6  -0.720  0.471   0.66         0.33    0.820\n10  -0.196 Low     0.00112   1.29e-6  -0.131  0.896   0.84         0.42    1.61 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2020 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.08  Low     0.00227   1.87e-6  -1.10    0.270  0.24         0.12    0.689\n 2  -0.487 Low     0.00124   1.24e-6  -0.493   0.622  0.86         0.43    1.16 \n 3  -0.584 Low     0.00180   2.78e-6  -0.603   0.547  0.76         0.38    1.16 \n 4  -0.805 Low     0.000830  4.15e-7  -0.929   0.353  0.42         0.21    0.819\n 5  -1.04  Low     0.00234   3.47e-6  -0.962   0.336  0.4          0.2     0.938\n 6  -0.703 Low     0.00124   2.11e-6  -0.664   0.507  0.66         0.33    1.57 \n 7  -0.986 Low     0.00211   2.63e-6  -1.00    0.317  0.32         0.16    0.942\n 8  -1.04  Low     0.00170   2.07e-6  -0.935   0.350  0.28         0.14    1.52 \n 9  -1.02  Low     0.00211   2.30e-6  -1.03    0.304  0.38         0.19    0.954\n10  -0.932 Low     0.00114   1.40e-6  -0.916   0.360  0.12         0.06    1.27 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2021 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.64  High    0.00180   8.31e-7   2.58  9.80e-3  0.04         0.02    0.544\n 2   3.45  High    0.00126   1.20e-6   2.86  4.30e-3  0.06         0.03    1.69 \n 3   3.57  Low     0.00165   1.67e-6   3.32  8.86e-4  0.06         0.03    1.52 \n 4   0.877 Low     0.000762  3.42e-7   0.874 3.82e-1  0.38         0.19    1.14 \n 5   1.15  High    0.00223   2.32e-6   1.03  3.04e-1  0.3          0.15    1.43 \n 6   1.01  High    0.00103   8.92e-7   1.04  2.98e-1  0.24         0.12    1.67 \n 7   2.80  High    0.00215   2.07e-6   2.61  9.12e-3  0.04         0.02    1.09 \n 8   1.55  High    0.00184   1.39e-6   1.64  1.00e-1  0.14         0.07    0.996\n 9   2.41  High    0.00201   1.49e-6   2.61  8.93e-3  0.06         0.03    1.06 \n10   0.555 Low     0.00131   1.15e-6   0.463 6.43e-1  0.54         0.27    1.07 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2021 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -1.13   High    0.00227   3.12e-6 -1.05     0.293  0.18         0.09     1.41\n 2  0.0200 Low     0.00133   1.92e-6 -0.0595   0.953  0.88         0.44     2.21\n 3 -0.0752 Low     0.00148   2.12e-6  0.0169   0.986  0.76         0.38     1.59\n 4 -0.526  High    0.000804  7.55e-7 -0.516    0.606  0.86         0.43     2.30\n 5 -0.169  Low     0.00222   3.31e-6 -0.177    0.860  0.86         0.43     1.25\n 6  0.734  Low     0.000920  1.37e-6  0.951    0.341  0.24         0.12     2.71\n 7  0.384  Low     0.00177   3.16e-6  0.588    0.557  0.46         0.23     1.61\n 8  0.106  High    0.00192   3.78e-6  0.0700   0.944  0.72         0.36     1.65\n 9  0.596  Low     0.00213   4.47e-6  0.496    0.620  0.48         0.24     1.36\n10  0.485  High    0.00110   2.28e-6  0.554    0.580  0.3          0.15     2.46\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2021 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2021 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.490  High    0.00231   2.69e-6  0.410   0.682   0.68         0.34    0.742\n 2  1.42   High    0.000994  1.19e-6  1.75    0.0804  0.12         0.06    2.15 \n 3  1.26   Low     0.00173   2.04e-6  1.30    0.194   0.32         0.16    0.792\n 4  0.493  Low     0.000684  3.82e-7  0.730   0.466   0.38         0.19    1.19 \n 5 -0.654  High    0.00198   3.29e-6 -0.500   0.617   0.88         0.44    1.29 \n 6  1.09   Low     0.00120   2.10e-6  0.822   0.411   0.42         0.21    1.30 \n 7  0.509  Low     0.00205   2.74e-6  0.558   0.577   0.54         0.27    0.820\n 8 -0.0261 Low     0.00199   3.91e-6 -0.0781  0.938   0.84         0.42    1.89 \n 9 -0.603  Low     0.00238   3.09e-6 -0.726   0.468   0.56         0.28    0.999\n10 -0.614  Low     0.00114   1.85e-6 -0.550   0.583   0.82         0.41    1.91 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2021 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.09  Low     0.00222   1.89e-6  -1.08    0.280  0.22         0.11    0.902\n 2  -0.560 Low     0.00115   9.88e-7  -0.548   0.583  0.72         0.36    1.24 \n 3  -0.637 Low     0.00176   2.45e-6  -0.670   0.503  0.64         0.32    0.934\n 4  -0.890 Low     0.000774  4.33e-7  -0.914   0.361  0.32         0.16    1.33 \n 5  -1.08  Low     0.00236   3.63e-6  -0.993   0.321  0.26         0.13    1.09 \n 6  -0.668 Low     0.000944  9.61e-7  -0.645   0.519  0.76         0.38    1.35 \n 7  -0.963 Low     0.00213   2.65e-6  -0.991   0.322  0.36         0.18    0.626\n 8  -1.02  Low     0.00192   2.72e-6  -0.941   0.347  0.38         0.19    1.09 \n 9  -0.992 Low     0.00212   2.91e-6  -0.898   0.369  0.38         0.19    1.07 \n10  -0.912 Low     0.00134   1.76e-6  -0.949   0.343  0.08         0.04    1.56 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2022 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.77  High    0.00193   8.55e-7   2.49  1.26e-2  0.08         0.04    1.08 \n 2   3.51  High    0.00114   8.76e-7   3.42  6.19e-4  0.04         0.02    1.53 \n 3   3.74  Low     0.00159   1.37e-6   3.77  1.63e-4  0.04         0.02    1.45 \n 4   1.21  Low     0.000699  2.56e-7   1.46  1.44e-1  0.26         0.13    0.956\n 5   1.36  High    0.00225   1.65e-6   1.37  1.69e-1  0.22         0.11    1.14 \n 6   1.01  High    0.00104   7.23e-7   1.11  2.66e-1  0.2          0.1     1.34 \n 7   2.79  High    0.00185   1.47e-6   3.24  1.21e-3  0.04         0.02    1.48 \n 8   1.66  High    0.00194   1.98e-6   1.36  1.74e-1  0.2          0.1     1.57 \n 9   2.43  High    0.00212   2.18e-6   2.04  4.15e-2  0.16         0.08    1.13 \n10   0.560 Low     0.00120   1.01e-6   0.587 5.57e-1  0.52         0.26    1.07 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2022 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -1.14   High    0.00227   3.09e-6 -1.04     0.298  0.16         0.08     1.49\n 2  0.143  Low     0.00108   1.35e-6  0.279    0.780  0.58         0.29     2.02\n 3  0.0971 Low     0.00169   2.35e-6  0.0620   0.951  0.76         0.38     1.46\n 4 -0.481  High    0.000728  5.46e-7 -0.442    0.658  0.8          0.4      1.88\n 5 -0.151  Low     0.00229   4.61e-6 -0.162    0.871  0.9          0.45     1.69\n 6  0.822  Low     0.00131   2.82e-6  0.479    0.632  0.48         0.24     1.95\n 7  0.509  Low     0.00180   2.88e-6  0.723    0.470  0.32         0.16     1.66\n 8  0.104  High    0.00197   2.71e-6  0.0472   0.962  0.72         0.36     1.43\n 9  0.705  Low     0.00203   2.76e-6  0.791    0.429  0.32         0.16     2.03\n10  0.535  High    0.00103   1.90e-6  0.697    0.486  0.26         0.13     2.80\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2022 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2022 Others(*)`\n# A tibble: 63 × 15\n    gi_star cluster     e_gi  var_gi std_dev p_value p_sim p_folded_sim skewness\n      &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.496   High    0.00233  2.17e-6  0.436   0.662   0.58         0.29    0.606\n 2  1.68    High    0.00129  1.57e-6  1.47    0.142   0.26         0.13    1.40 \n 3  1.39    Low     0.00146  1.77e-6  1.69    0.0903  0.2          0.1     1.39 \n 4  0.568   Low     0.000673 4.21e-7  0.775   0.438   0.36         0.18    1.85 \n 5 -0.463   High    0.00187  2.78e-6 -0.256   0.798   0.92         0.46    1.41 \n 6  1.04    Low     0.00114  1.95e-6  0.817   0.414   0.32         0.16    1.61 \n 7  0.591   Low     0.00229  3.58e-6  0.421   0.674   0.6          0.3     1.06 \n 8 -0.146   Low     0.00202  2.60e-6 -0.226   0.821   0.96         0.48    0.909\n 9 -0.00582 Low     0.00233  3.82e-6 -0.121   0.903   0.82         0.41    1.19 \n10 -0.0225  Low     0.00118  1.73e-6  0.0119  0.991   0.76         0.38    2.07 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2022 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Cultivation farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  -1.16  Low     0.00256   2.54e-6  -1.22    0.224  0.18         0.09    0.680\n 2  -0.706 Low     0.00111   1.39e-6  -0.572   0.568  0.74         0.37    1.83 \n 3  -0.654 Low     0.00136   1.99e-6  -0.488   0.625  0.86         0.43    1.64 \n 4  -0.886 Low     0.000852  6.55e-7  -0.847   0.397  0.44         0.22    1.10 \n 5  -1.10  Low     0.00211   2.82e-6  -1.01    0.311  0.3          0.15    1.06 \n 6  -0.653 Low     0.00116   1.66e-6  -0.651   0.515  0.7          0.35    1.70 \n 7  -0.975 Low     0.00208   2.81e-6  -0.956   0.339  0.38         0.19    0.896\n 8  -1.02  Low     0.00169   1.88e-6  -0.974   0.330  0.26         0.13    1.11 \n 9  -1.02  Low     0.00191   2.27e-6  -0.920   0.358  0.52         0.26    0.745\n10  -0.908 Low     0.00147   2.44e-6  -0.895   0.371  0.26         0.13    1.30 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2023 Cultivation farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Livestock farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1   1.92  High    0.00206   9.99e-7   2.31  2.11e-2  0.08         0.04    1.15 \n 2   3.63  High    0.00117   8.06e-7   3.57  3.61e-4  0.04         0.02    1.32 \n 3   3.84  Low     0.00168   1.27e-6   3.86  1.14e-4  0.04         0.02    1.20 \n 4   1.27  Low     0.000944  3.47e-7   0.876 3.81e-1  0.34         0.17    0.886\n 5   1.47  High    0.00230   2.33e-6   1.20  2.32e-1  0.3          0.15    0.994\n 6   1.08  High    0.00107   7.07e-7   1.13  2.60e-1  0.2          0.1     2.35 \n 7   2.89  High    0.00201   1.67e-6   2.95  3.19e-3  0.08         0.04    1.41 \n 8   1.74  High    0.00181   1.05e-6   2.04  4.12e-2  0.1          0.05    1.17 \n 9   2.53  High    0.00199   1.50e-6   2.61  8.94e-3  0.04         0.02    0.939\n10   0.634 Low     0.00122   1.08e-6   0.608 5.43e-1  0.38         0.19    1.46 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2023 Livestock farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Fishing farm`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -1.20   High    0.00212   3.12e-6 -1.04     0.298  0.1          0.05     1.45\n 2 -0.0438 Low     0.000962  1.09e-6  0.192    0.848  0.64         0.32     2.22\n 3  0.0650 Low     0.00168   2.39e-6  0.0404   0.968  0.74         0.37     1.25\n 4 -0.426  High    0.000928  8.38e-7 -0.541    0.588  0.68         0.34     1.63\n 5 -0.193  High    0.00192   2.36e-6 -0.0474   0.962  0.82         0.41     1.62\n 6  0.709  Low     0.000860  1.30e-6  1.00     0.316  0.2          0.1      3.26\n 7  0.376  Low     0.00241   6.45e-6  0.156    0.876  0.58         0.29     1.75\n 8  0.101  High    0.00197   3.68e-6  0.0425   0.966  0.62         0.31     1.54\n 9  0.666  Low     0.00235   5.01e-6  0.429    0.668  0.4          0.2      2.52\n10  0.524  High    0.00132   2.72e-6  0.414    0.679  0.5          0.25     2.19\n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2023 Fishing farm` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n$`2023 Others(*)`\n# A tibble: 63 × 15\n   gi_star cluster     e_gi   var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;      &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.508  High    0.00220   2.35e-6   0.482  0.630   0.64         0.32    0.999\n 2  2.17   High    0.00112   1.19e-6   2.20   0.0278  0.08         0.04    1.26 \n 3  1.31   Low     0.00151   1.63e-6   1.53   0.127   0.18         0.09    1.34 \n 4  0.389  Low     0.000699  4.16e-7   0.514  0.608   0.5          0.25    1.29 \n 5 -0.518  High    0.00211   2.90e-6  -0.411  0.681   0.94         0.47    1.32 \n 6  1.17   Low     0.00113   1.26e-6   1.07   0.285   0.3          0.15    1.47 \n 7  0.713  Low     0.00233   3.34e-6   0.479  0.632   0.42         0.21    1.40 \n 8 -0.262  Low     0.00170   1.51e-6  -0.162  0.871   1            0.5     0.855\n 9  0.0756 Low     0.00203   2.55e-6   0.115  0.909   0.72         0.36    1.29 \n10  0.155  Low     0.00122   2.32e-6   0.125  0.901   0.52         0.26    1.96 \n# ℹ 53 more rows\n# ℹ 6 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wt &lt;list&gt;,\n#   `Cities, provincies` &lt;chr&gt;, `2023 Others(*)` &lt;dbl&gt;,\n#   geometry &lt;MULTIPOLYGON [°]&gt;\n\n\n\n\n\nNext, we will use relevant tmap functions to visualise the result of local Gi∗ values for our study area. For visualisation purpose, we will create a new column label similar to what we did in Local Moran’s I.\n\ntmap_mode(\"plot\")  \n\ntmap mode set to plotting\n\n# helper functions\nplot_vietnam_farms_HCSA &lt;- function(new_data_list_name, data, years, columns) {\n  # Initialize an empty list to store the results\n  event_data_list &lt;- list()\n\n  for (col_name in columns) {\n    # Create the map for each column in a separate tm_shape call\n    event_data_list[[col_name]] &lt;- tm_shape(st_as_sf(data[[col_name]])) +\n      tm_fill(\"gi_star\", \n              palette = c(\"#57bfc0\", \"#7977f3\",\"#f8d673\",\"#f8b675\",\"#f67774\"),\n              title = \"Gi*\",\n              midpoint = 0) +\n      tm_borders(col = \"black\", alpha = 0.6) +\n      tm_layout(main.title = paste(\"Hotspots & Coldspots of\\n \", col_name),\n                main.title.position = \"center\",\n                main.title.size = 1.5,\n                main.title.fontface = \"bold\",\n                legend.title.size = 1,\n                legend.text.size = 1,\n                frame = TRUE) +\n      tm_compass(type=\"8star\", text.size = 1.5, size = 3, position=c(\"RIGHT\", \"TOP\")) +\n      tm_scale_bar(position=c(\"LEFT\", \"BOTTOM\"), text.size=1.2) +\n      tm_grid(labels.size = 1, alpha = 0.2)\n  }\n\n  # Assign the populated list to the specified list name\n  assign(new_data_list_name, event_data_list, envir = .GlobalEnv)\n}\n\nplot_vietnam_farms_HCSA(\"vietnam_farms_HCSA_plots\", vietnam_farms_HCSA, YEARS, VIETNAM_COL_NAMES)\n\n\nvietnam_farms_HCSA_plots$`2012 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2013 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2014 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2015 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2016 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2017 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2018 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2019 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2020 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2021 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2022 Cultivation farm`\n\n\n\n\n\n\n\nvietnam_farms_HCSA_plots$`2023 Cultivation farm`"
  }
]